<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_task_p_8h" kind="file" language="C++">
    <compoundname>TaskP.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <incdepgraph>
      <node id="1925">
        <label>stdbool.h</label>
      </node>
      <node id="1924">
        <label>stdint.h</label>
      </node>
      <node id="1926">
        <label>stddef.h</label>
      </node>
      <node id="1923">
        <label>TaskP.h</label>
        <link refid="_task_p_8h"/>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="union_task_p___struct" prot="public">TaskP_Struct</innerclass>
    <innerclass refid="struct_task_p___params" prot="public">TaskP_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_task_p_8h_1aac2b2f55647e0f8cad9bed9043c701c7" prot="public" static="no">
        <name>TaskP_DEFAULT_STACK_SIZE</name>
        <initializer>(512)</initializer>
        <briefdescription>
<para>Number of bytes greater than or equal to the size of any RTOS Task object. </para>        </briefdescription>
        <detaileddescription>
<para>BIOS 6.x: 80 BIOS 7.x: 88 FreeRTOS: 104(llvm)/340(gcc)</para><para>Number of bytes for the default stack size of any RTOS Task object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="83" column="9" bodyfile="source/ti/drivers/dpl/TaskP.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cd" prot="public" static="no">
        <name>TaskP_State</name>
        <enumvalue id="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cdaac0f03513caf43ced537f79595615df0" prot="public">
          <name>TaskP_State_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This task is actively running </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cda9b2d5bf5d16c8db968e522a1006c992f" prot="public">
          <name>TaskP_State_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The task is ready to run, but not currently running </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cda7ffb1e2a28c3657be3601cbf1fdca866" prot="public">
          <name>TaskP_State_BLOCKED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The task is blocked </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cdaaaf5a227c0828eeeda74ce6fc604a431" prot="public">
          <name>TaskP_State_DELETED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The task has been deleted </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cda065d4dc283708f062245c94e46f3c869" prot="public">
          <name>TaskP_State_INACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The task is inactive </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cdaabea3e598d668c244f0cfa6a1f99c588" prot="public">
          <name>TaskP_State_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The task is not found or in an otherwise invalid state </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum returned from <ref refid="_task_p_8h_1ab5ee6a6175e9dc75d3f47d635a9f2731" kindref="member">TaskP_getState()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="100" column="1" bodyfile="source/ti/drivers/dpl/TaskP.h" bodystart="99" bodyend="113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_task_p_8h_1a7445cf2d882fd19a0c2d8a16e026a915" prot="public" static="no">
        <type>union <ref refid="union_task_p___struct" kindref="compound">TaskP_Struct</ref></type>
        <definition>typedef union TaskP_Struct  TaskP_Struct</definition>
        <argsstring></argsstring>
        <name>TaskP_Struct</name>
        <briefdescription>
<para>TaskP structure. </para>        </briefdescription>
        <detaileddescription>
<para>Opaque structure that should be large enough to hold any of the RTOS specific TaskP objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_task_p_8h_1a31ff8e662723e61efd85a4db30f89628" prot="public" static="no">
        <type><ref refid="union_task_p___struct" kindref="compound">TaskP_Struct</ref> *</type>
        <definition>typedef TaskP_Struct* TaskP_Handle</definition>
        <argsstring></argsstring>
        <name>TaskP_Handle</name>
        <briefdescription>
<para>Opaque client reference to an instance of a TaskP. </para>        </briefdescription>
        <detaileddescription>
<para>A TaskP_Handle returned from create or construct represents that instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="120" column="1" bodyfile="source/ti/drivers/dpl/TaskP.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_task_p_8h_1ac0a57708d5950934830c66a8724fb6a5" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* TaskP_Function) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>TaskP_Function</name>
        <briefdescription>
<para>Task function definition, passed to create and construct. </para>        </briefdescription>
        <detaileddescription>
<para>This function should never return. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="143" column="1" bodyfile="source/ti/drivers/dpl/TaskP.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_task_p_8h_1a4d8fda4ca1b5a3a7587b3232cf7bf43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_task_p_8h_1a31ff8e662723e61efd85a4db30f89628" kindref="member">TaskP_Handle</ref></type>
        <definition>TaskP_Handle TaskP_create</definition>
        <argsstring>(TaskP_Function fxn, const TaskP_Params *params)</argsstring>
        <name>TaskP_create</name>
        <param>
          <type><ref refid="_task_p_8h_1ac0a57708d5950934830c66a8724fb6a5" kindref="member">TaskP_Function</ref></type>
          <declname>fxn</declname>
        </param>
        <param>
          <type>const <ref refid="struct_task_p___params" kindref="compound">TaskP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Create a TaskP, allocating memory on the heap. </para>        </briefdescription>
        <detaileddescription>
<para>Creates a new TaskP and registers it with the OS scheduler. The task object and the entire stack will be allocated on the heap - make sure you have a sufficiently large heap. Stack allocation size is controlled by params.</para><para>If the program is already executing a task and the new task has a higher priority the new task will be scheduled immediately; in this case <ref refid="_task_p_8h_1a4d8fda4ca1b5a3a7587b3232cf7bf43b" kindref="member">TaskP_create()</ref> will not return until the new task blocks. To avoid this (for example when creating interdependent tasks at once) use <ref refid="_task_p_8h_1a23392193f7f8b3be8458519949ce4763" kindref="member">TaskP_disableScheduler()</ref> and <ref refid="_task_p_8h_1ae8c78742eec61d46ec4133cdee6f5ab4" kindref="member">TaskP_restoreScheduler()</ref> to prevent the context switch.</para><para><simplesect kind="note"><para>This API cannot be called from interrupt contexts.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TaskP</parametername>
</parameternamelist>
<parameterdescription>
<para>handle (NULL on failure) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_task_p_8h_1a88ca78b4f2572ee6a2e04bff7f8892d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskP_delete</definition>
        <argsstring>(TaskP_Handle task)</argsstring>
        <name>TaskP_delete</name>
        <param>
          <type><ref refid="_task_p_8h_1a31ff8e662723e61efd85a4db30f89628" kindref="member">TaskP_Handle</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Delete a TaskP. </para>        </briefdescription>
        <detaileddescription>
<para>Deletes a TaskP.</para><para><simplesect kind="note"><para>This API cannot be called from interrupt contexts.</para></simplesect>
For FreeRTOS, INCLUDE_vTaskDelete has to be set to 1 in FreeRTOSConfig.h. See &apos;Configuration with FreeRTOS&apos; in the Core SDK User&apos;s Guide for how to do this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_task_p_8h_1a0bf938483764f419259c910b098b6fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_task_p_8h_1a31ff8e662723e61efd85a4db30f89628" kindref="member">TaskP_Handle</ref></type>
        <definition>TaskP_Handle TaskP_construct</definition>
        <argsstring>(TaskP_Struct *obj, TaskP_Function fxn, const TaskP_Params *params)</argsstring>
        <name>TaskP_construct</name>
        <param>
          <type><ref refid="union_task_p___struct" kindref="compound">TaskP_Struct</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="_task_p_8h_1ac0a57708d5950934830c66a8724fb6a5" kindref="member">TaskP_Function</ref></type>
          <declname>fxn</declname>
        </param>
        <param>
          <type>const <ref refid="struct_task_p___params" kindref="compound">TaskP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Construct a TaskP from statically allocated memory. </para>        </briefdescription>
        <detaileddescription>
<para>TaskP_construct creates a new task object. TaskP_construct returns the handle of the new task object or NULL if the task could not be created.</para><para>To use TaskP_construct you must set both point <computeroutput>params.stack</computeroutput> to a valid preallocated memory location of at least <computeroutput>params.stackSize</computeroutput>.</para><para><simplesect kind="note"><para>This API cannot be called from interrupt contexts.</para></simplesect>
For FreeRTOS, configSUPPORT_STATIC_ALLOCATION has to be set to 1 in FreeRTOSConfig.h. See &apos;Configuration with FreeRTOS&apos; in the Core SDK User&apos;s Guide for how to do this.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TaskP</parametername>
</parameternamelist>
<parameterdescription>
<para>handle (NULL on failure) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_task_p_8h_1a2eacddcb7a8f8fbd37a08ea3b23b1c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskP_destruct</definition>
        <argsstring>(TaskP_Struct *obj)</argsstring>
        <name>TaskP_destruct</name>
        <param>
          <type><ref refid="union_task_p___struct" kindref="compound">TaskP_Struct</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Destruct a TaskP. </para>        </briefdescription>
        <detaileddescription>
<para>TaskP_destruct destructs a task object.</para><para><simplesect kind="note"><para>This API cannot be called from interrupt contexts. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_task_p_8h_1ab5ee6a6175e9dc75d3f47d635a9f2731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cd" kindref="member">TaskP_State</ref></type>
        <definition>TaskP_State TaskP_getState</definition>
        <argsstring>(TaskP_Handle task)</argsstring>
        <name>TaskP_getState</name>
        <param>
          <type><ref refid="_task_p_8h_1a31ff8e662723e61efd85a4db30f89628" kindref="member">TaskP_Handle</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Get the current state of a task handle. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the state of the referenced task at the time this function was called. The return value is not guaranteed to match the state of the task when the calling function tests the return value. For example, the referenced task might have unblocked as a result of an interrupt, but the value may still read TaskP_State_BLOCKED.</para><para>The conversion of task states between DPL, FreeRTOS and TI-RTOS is: DPL: FreeRTOS: TI-RTOS: TaskP_State_RUNNING - eRunning - Task_Mode_RUNNING TaskP_State_READY - eReady - Task_Mode_READY TaskP_State_BLOCKED - eBlocked - Task_Mode_BLOCKED TaskP_State_DELETED - eDeleted - Task_Mode_TERMINATED TaskP_State_INACTIVE - eSuspended - Task_Mode_INACTIVE TaskP_State_INVALID - eInvalid - N.A</para><para>For FreeRTOS, INCLUDE_eTaskGetState has to be set to 1 in FreeRTOSConfig.h. See &apos;Configuration with FreeRTOS&apos; in the Core SDK User&apos;s Guide for how to do this.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Current</parametername>
</parameternamelist>
<parameterdescription>
<para>state of the task pointed to by the task parameter </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_task_p_8h_1a07ad86c8971ad9ae9fd0f080b63bbb61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_task_p_8h_1a31ff8e662723e61efd85a4db30f89628" kindref="member">TaskP_Handle</ref></type>
        <definition>TaskP_Handle TaskP_getCurrentTask</definition>
        <argsstring>(void)</argsstring>
        <name>TaskP_getCurrentTask</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the currently executing task handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Must be called from task context.</para></simplesect>
For FreeRTOS, INCLUDE_xTaskGetCurrentTaskHandle has to be set to 1 in FreeRTOSConfig.h. See &apos;Configuration with FreeRTOS&apos; in the Core SDK User&apos;s Guide for how to do this.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>handle for the calling task </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_task_p_8h_1a23392193f7f8b3be8458519949ce4763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t TaskP_disableScheduler</definition>
        <argsstring>(void)</argsstring>
        <name>TaskP_disableScheduler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to disable task scheduling. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be called multiple times, but must unwound in the reverse order. For example <programlisting><codeline><highlight class="normal">uintptr_t<sp/>key1,<sp/>key2;</highlight></codeline>
<codeline><highlight class="normal">key1<sp/>=<sp/>TaskP_disableScheduler();</highlight></codeline>
<codeline><highlight class="normal">key2<sp/>=<sp/>TaskP_disableScheduler();</highlight></codeline>
<codeline><highlight class="normal">TaskP_restoreScheduler(key2);</highlight></codeline>
<codeline><highlight class="normal">TaskP_restoreScheduler(key1);</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>This API cannot be called from interrupt contexts.</para></simplesect>
For FreeRTOS the key value returned is always 0.</para><para><simplesect kind="return"><para>A key to pass to TaskP_restoreScheduler to re-enable the scheduler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_task_p_8h_1ae8c78742eec61d46ec4133cdee6f5ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskP_restoreScheduler</definition>
        <argsstring>(uintptr_t key)</argsstring>
        <name>TaskP_restoreScheduler</name>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Function to re-enable task scheduling. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This API cannot be called from interrupt contexts.</para></simplesect>
For FreeRTOS the key value is ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>returned from TaskP_disableScheduler </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_task_p_8h_1a34f74bb9a6902f4c003d2f9f9a9c427a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskP_yield</definition>
        <argsstring>(void)</argsstring>
        <name>TaskP_yield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a scheduler point, yielding to equal priority tasks. </para>        </briefdescription>
        <detaileddescription>
<para>Task_yield yields the processor to another task of equal priority. A task switch occurs when you call Task_yield if there is an equal priority task ready to run. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_task_p_8h_1ada126fc28d0aea5c60f1984dadfde56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskP_Params_init</definition>
        <argsstring>(TaskP_Params *params)</argsstring>
        <name>TaskP_Params_init</name>
        <param>
          <type><ref refid="struct_task_p___params" kindref="compound">TaskP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize params structure to default values. </para>        </briefdescription>
        <detaileddescription>
<para>Initialize the parameter struct with default values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the task parameter struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/TaskP.h" line="291" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Task module for the RTOS Porting Interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>TaskP objects are RTOS threads backed by OS-specific thread or task objects. Task functions will run according to the rules of the underlying scheduler, with higher priority tasks executing first.</para><para>Tasks require a stack and a control struct to operate, which can either be allocated statically with TaskP_construct or dynamically with TaskP_create. The stack should be large enough to contain at least your deepest call stack plus an interrupt frame.</para><para>Task Functions: The void* argument will be NULL by default, but you can set a value using <ref refid="struct_task_p___params" kindref="compound">TaskP_Params</ref>. Task functions should never return, as the behaviour after a task has returned is implementation-dependent and TaskP does not provide a mechanism for OS-independent task deletion. See your OS documentation for <heading level="1">details. </heading>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022-2024,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor">#ifndef<sp/>ti_dpl_TaskP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_dpl_TaskP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor">#if<sp/>(defined(__ti_version__)<sp/>&amp;&amp;<sp/>defined(__clang__))<sp/>||<sp/>defined(__IAR_SYSTEMS_ICC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>TaskP_STRUCT_SIZE<sp/>(104)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>TaskP_STRUCT_SIZE<sp/>(340)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="_task_p_8h_1aac2b2f55647e0f8cad9bed9043c701c7" refkind="member"><highlight class="preprocessor">#define<sp/>TaskP_DEFAULT_STACK_SIZE<sp/>(512)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="union_task_p___struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_task_p___struct" kindref="compound">TaskP_Struct</ref></highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92" refid="union_task_p___struct_1ab75d2cf207467c22338e264162c37314" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="union_task_p___struct_1ab75d2cf207467c22338e264162c37314" kindref="member">dummy</ref>;<sp/></highlight></codeline>
<codeline lineno="93" refid="union_task_p___struct_1aba112db52885eba253670c997a4009b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="union_task_p___struct_1aba112db52885eba253670c997a4009b6" kindref="member">data</ref>[TaskP_STRUCT_SIZE];</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}<sp/><ref refid="_task_p_8h_1a7445cf2d882fd19a0c2d8a16e026a915" kindref="member">TaskP_Struct</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102" refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cdaac0f03513caf43ced537f79595615df0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cdaac0f03513caf43ced537f79595615df0" kindref="member">TaskP_State_RUNNING</ref>,</highlight></codeline>
<codeline lineno="104" refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cda9b2d5bf5d16c8db968e522a1006c992f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cda9b2d5bf5d16c8db968e522a1006c992f" kindref="member">TaskP_State_READY</ref>,</highlight></codeline>
<codeline lineno="106" refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cda7ffb1e2a28c3657be3601cbf1fdca866" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cda7ffb1e2a28c3657be3601cbf1fdca866" kindref="member">TaskP_State_BLOCKED</ref>,</highlight></codeline>
<codeline lineno="108" refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cdaaaf5a227c0828eeeda74ce6fc604a431" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cdaaaf5a227c0828eeeda74ce6fc604a431" kindref="member">TaskP_State_DELETED</ref>,</highlight></codeline>
<codeline lineno="110" refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cda065d4dc283708f062245c94e46f3c869" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cda065d4dc283708f062245c94e46f3c869" kindref="member">TaskP_State_INACTIVE</ref>,</highlight></codeline>
<codeline lineno="112" refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cdaabea3e598d668c244f0cfa6a1f99c588" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cdaabea3e598d668c244f0cfa6a1f99c588" kindref="member">TaskP_State_INVALID</ref></highlight></codeline>
<codeline lineno="113"><highlight class="normal">}<sp/><ref refid="_task_p_8h_1a8f0482bc6ecdaabe28dff9e5d28198cd" kindref="member">TaskP_State</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="_task_p_8h_1a31ff8e662723e61efd85a4db30f89628" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="union_task_p___struct" kindref="compound">TaskP_Struct</ref><sp/>*<ref refid="_task_p_8h_1a31ff8e662723e61efd85a4db30f89628" kindref="member">TaskP_Handle</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="struct_task_p___params" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125" refid="struct_task_p___params_1a83aea2a29b1519740cb7d3f156380ebf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_task_p___params_1a83aea2a29b1519740cb7d3f156380ebf" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="127" refid="struct_task_p___params_1af3bc391be3fa3171be0e7c95705ec15d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_task_p___params_1af3bc391be3fa3171be0e7c95705ec15d" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="129" refid="struct_task_p___params_1ae6fea7801861c06f951e6ed57af82469" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_task_p___params_1ae6fea7801861c06f951e6ed57af82469" kindref="member">priority</ref>;</highlight></codeline>
<codeline lineno="131" refid="struct_task_p___params_1a7b556fb3cc5c1d9b1b88387acf7ed1a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_task_p___params_1a7b556fb3cc5c1d9b1b88387acf7ed1a3" kindref="member">stackSize</ref>;</highlight></codeline>
<codeline lineno="135" refid="struct_task_p___params_1adb0fc91309822415e70a2fbdd7b17f97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_task_p___params_1adb0fc91309822415e70a2fbdd7b17f97" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}<sp/><ref refid="struct_task_p___params" kindref="compound">TaskP_Params</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="_task_p_8h_1ac0a57708d5950934830c66a8724fb6a5" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_task_p_8h_1ac0a57708d5950934830c66a8724fb6a5" kindref="member">TaskP_Function</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TaskP_Handle<sp/><ref refid="_task_p_8h_1a4d8fda4ca1b5a3a7587b3232cf7bf43b" kindref="member">TaskP_create</ref>(<ref refid="_task_p_8h_1ac0a57708d5950934830c66a8724fb6a5" kindref="member">TaskP_Function</ref><sp/>fxn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_task_p___params" kindref="compound">TaskP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_task_p_8h_1a88ca78b4f2572ee6a2e04bff7f8892d9" kindref="member">TaskP_delete</ref>(TaskP_Handle<sp/>task);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TaskP_Handle<sp/><ref refid="_task_p_8h_1a0bf938483764f419259c910b098b6fa4" kindref="member">TaskP_construct</ref>(<ref refid="union_task_p___struct" kindref="compound">TaskP_Struct</ref><sp/>*obj,<sp/><ref refid="_task_p_8h_1ac0a57708d5950934830c66a8724fb6a5" kindref="member">TaskP_Function</ref><sp/>fxn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_task_p___params" kindref="compound">TaskP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_task_p_8h_1a2eacddcb7a8f8fbd37a08ea3b23b1c28" kindref="member">TaskP_destruct</ref>(<ref refid="union_task_p___struct" kindref="compound">TaskP_Struct</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TaskP_State<sp/><ref refid="_task_p_8h_1ab5ee6a6175e9dc75d3f47d635a9f2731" kindref="member">TaskP_getState</ref>(TaskP_Handle<sp/>task);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TaskP_Handle<sp/><ref refid="_task_p_8h_1a07ad86c8971ad9ae9fd0f080b63bbb61" kindref="member">TaskP_getCurrentTask</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uintptr_t<sp/><ref refid="_task_p_8h_1a23392193f7f8b3be8458519949ce4763" kindref="member">TaskP_disableScheduler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_task_p_8h_1ae8c78742eec61d46ec4133cdee6f5ab4" kindref="member">TaskP_restoreScheduler</ref>(uintptr_t<sp/>key);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_task_p_8h_1a34f74bb9a6902f4c003d2f9f9a9c427a" kindref="member">TaskP_yield</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_task_p_8h_1ada126fc28d0aea5c60f1984dadfde56e" kindref="member">TaskP_Params_init</ref>(<ref refid="struct_task_p___params" kindref="compound">TaskP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_dpl_TaskP__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/dpl/TaskP.h"/>
  </compounddef>
</doxygen>
