<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_swi_p_8h" kind="file" language="C++">
    <compoundname>SwiP.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includedby refid="_a_d_c_buf_c_c26_x2_8h" local="no">ADCBufCC26X2.h</includedby>
    <includedby refid="_a_d_c_buf_c_c26_x_x_8h" local="no">ADCBufCC26XX.h</includedby>
    <includedby refid="_a_e_s_c_b_c_c_c26_x_x_8h" local="no">AESCBCCC26XX.h</includedby>
    <includedby refid="_a_e_s_c_c_m_c_c26_x4_8h" local="no">AESCCMCC26X4.h</includedby>
    <includedby refid="_a_e_s_c_c_m_c_c26_x_x_8h" local="no">AESCCMCC26XX.h</includedby>
    <includedby refid="_a_e_s_c_m_a_c_c_c26_x_x_8h" local="no">AESCMACCC26XX.h</includedby>
    <includedby refid="_a_e_s_e_c_b_c_c26_x_x_8h" local="no">AESECBCC26XX.h</includedby>
    <includedby refid="_a_e_s_g_c_m_c_c26_x4_8h" local="no">AESGCMCC26X4.h</includedby>
    <includedby refid="_a_e_s_g_c_m_c_c26_x_x_8h" local="no">AESGCMCC26XX.h</includedby>
    <includedby refid="_e_c_d_h_c_c26_x2_8h" local="no">ECDHCC26X2.h</includedby>
    <includedby refid="_e_c_d_s_a_c_c26_x2_8h" local="no">ECDSACC26X2.h</includedby>
    <includedby refid="_i2_c_c_c26_x_x_8h" local="no">I2CCC26XX.h</includedby>
    <includedby refid="_s_p_i_c_c26_x2_d_m_a_8h" local="no">SPICC26X2DMA.h</includedby>
    <includedby refid="_s_p_i_c_c26_x4_d_m_a_8h" local="no">SPICC26X4DMA.h</includedby>
    <incdepgraph>
      <node id="1902">
        <label>stdbool.h</label>
      </node>
      <node id="1901">
        <label>stdint.h</label>
      </node>
      <node id="1903">
        <label>stddef.h</label>
      </node>
      <node id="1900">
        <label>SwiP.h</label>
        <link refid="_swi_p_8h"/>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1902" relation="include">
        </childnode>
        <childnode refid="1903" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1913">
        <label>AESGCMCC26XX.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="1909">
        <label>AESCCMCC26XX.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="1905">
        <label>ADCBufCC26X2.h</label>
        <link refid="_a_d_c_buf_c_c26_x2_8h"/>
      </node>
      <node id="1912">
        <label>AESGCMCC26X4.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x4_8h"/>
      </node>
      <node id="1911">
        <label>AESECBCC26XX.h</label>
        <link refid="_a_e_s_e_c_b_c_c26_x_x_8h"/>
      </node>
      <node id="1904">
        <label>SwiP.h</label>
        <link refid="_swi_p_8h"/>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1906" relation="include">
        </childnode>
        <childnode refid="1907" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1909" relation="include">
        </childnode>
        <childnode refid="1910" relation="include">
        </childnode>
        <childnode refid="1911" relation="include">
        </childnode>
        <childnode refid="1912" relation="include">
        </childnode>
        <childnode refid="1913" relation="include">
        </childnode>
        <childnode refid="1914" relation="include">
        </childnode>
        <childnode refid="1915" relation="include">
        </childnode>
        <childnode refid="1916" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1918" relation="include">
        </childnode>
      </node>
      <node id="1918">
        <label>SPICC26X4DMA.h</label>
        <link refid="_s_p_i_c_c26_x4_d_m_a_8h"/>
      </node>
      <node id="1908">
        <label>AESCCMCC26X4.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x4_8h"/>
      </node>
      <node id="1906">
        <label>ADCBufCC26XX.h</label>
        <link refid="_a_d_c_buf_c_c26_x_x_8h"/>
      </node>
      <node id="1916">
        <label>I2CCC26XX.h</label>
        <link refid="_i2_c_c_c26_x_x_8h"/>
      </node>
      <node id="1907">
        <label>AESCBCCC26XX.h</label>
        <link refid="_a_e_s_c_b_c_c_c26_x_x_8h"/>
      </node>
      <node id="1910">
        <label>AESCMACCC26XX.h</label>
        <link refid="_a_e_s_c_m_a_c_c_c26_x_x_8h"/>
      </node>
      <node id="1915">
        <label>ECDSACC26X2.h</label>
        <link refid="_e_c_d_s_a_c_c26_x2_8h"/>
      </node>
      <node id="1914">
        <label>ECDHCC26X2.h</label>
        <link refid="_e_c_d_h_c_c26_x2_8h"/>
      </node>
      <node id="1917">
        <label>SPICC26X2DMA.h</label>
        <link refid="_s_p_i_c_c26_x2_d_m_a_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="union_swi_p___struct" prot="public">SwiP_Struct</innerclass>
    <innerclass refid="struct_swi_p___params" prot="public">SwiP_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_swi_p_8h_1ab4f9bda0f04890b07aa42627413c4e83" prot="public" static="no">
        <name>SwiP_STRUCT_SIZE</name>
        <initializer>(60)</initializer>
        <briefdescription>
<para>Number of bytes greater than or equal to the size of any RTOS SwiP object. </para>        </briefdescription>
        <detaileddescription>
<para>NoRTOS: 40 FreeRTOS: ?? (should same as NoRTOS) BIOS 6.x: 52 BIOS 7.x: 60 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="60" column="9" bodyfile="source/ti/drivers/dpl/SwiP.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_swi_p_8h_1a8b45593bcfd9f6957bb59b3e7c01663f" prot="public" static="no">
        <name>SwiP_Status</name>
        <enumvalue id="_swi_p_8h_1a8b45593bcfd9f6957bb59b3e7c01663faffeaf50d8c5846b990e522ba70ae04c7" prot="public">
          <name>SwiP_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_swi_p_8h_1a8b45593bcfd9f6957bb59b3e7c01663fa995a62f8b5ada943a90b4f9c60bf20a3" prot="public">
          <name>SwiP_FAILURE</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Status codes for SwiP APIs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="85" column="1" bodyfile="source/ti/drivers/dpl/SwiP.h" bodystart="84" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_swi_p_8h_1a57453ec4b8c803ee0f77bf8519376f86" prot="public" static="no">
        <type>union <ref refid="union_swi_p___struct" kindref="compound">SwiP_Struct</ref></type>
        <definition>typedef union SwiP_Struct  SwiP_Struct</definition>
        <argsstring></argsstring>
        <name>SwiP_Struct</name>
        <briefdescription>
<para>SemaphoreP structure. </para>        </briefdescription>
        <detaileddescription>
<para>Opaque structure that should be large enough to hold any of the RTOS specific SwiP objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* SwiP_Handle</definition>
        <argsstring></argsstring>
        <name>SwiP_Handle</name>
        <briefdescription>
<para>Opaque client reference to an instance of a SwiP. </para>        </briefdescription>
        <detaileddescription>
<para>A SwiP_Handle returned from the <ref refid="_swi_p_8h_1aeed3e97f791991345cac2d0c7627475c" kindref="member">SwiP_create</ref> represents that instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="79" column="1" bodyfile="source/ti/drivers/dpl/SwiP.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_swi_p_8h_1a4a2c38e275f6fd182f60ae41e52f0f91" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* SwiP_Fxn) (uintptr_t arg0, uintptr_t arg1)</definition>
        <argsstring>)(uintptr_t arg0, uintptr_t arg1)</argsstring>
        <name>SwiP_Fxn</name>
        <briefdescription>
<para>Prototype for the entry function for a hardware interrupt. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="93" column="1" bodyfile="source/ti/drivers/dpl/SwiP.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_swi_p_8h_1af7d6d234f82bec50c73147177ffeed1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref></type>
        <definition>SwiP_Handle SwiP_construct</definition>
        <argsstring>(SwiP_Struct *swiP, SwiP_Fxn swiFxn, SwiP_Params *params)</argsstring>
        <name>SwiP_construct</name>
        <param>
          <type><ref refid="union_swi_p___struct" kindref="compound">SwiP_Struct</ref> *</type>
          <declname>swiP</declname>
        </param>
        <param>
          <type><ref refid="_swi_p_8h_1a4a2c38e275f6fd182f60ae41e52f0f91" kindref="member">SwiP_Fxn</ref></type>
          <declname>swiFxn</declname>
        </param>
        <param>
          <type><ref refid="struct_swi_p___params" kindref="compound">SwiP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to construct a software interrupt object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>swiP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="union_swi_p___struct" kindref="compound">SwiP_Struct</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swiFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>entry function of the software interrupt</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. NULL denotes to use the default parameters. The SwiP default parameters are noted in <ref refid="_swi_p_8h_1aff5b136d88dfec9e82e0e310b0f08945" kindref="member">SwiP_Params_init</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SwiP_Handle on success or a NULL on an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1a441006ce08b8b32d1e49dc513082a843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_destruct</definition>
        <argsstring>(SwiP_Struct *swiP)</argsstring>
        <name>SwiP_destruct</name>
        <param>
          <type><ref refid="union_swi_p___struct" kindref="compound">SwiP_Struct</ref> *</type>
          <declname>swiP</declname>
        </param>
        <briefdescription>
<para>Function to destruct a software interrupt object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>swiP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="union_swi_p___struct" kindref="compound">SwiP_Struct</ref> object that was passed to <ref refid="_swi_p_8h_1af7d6d234f82bec50c73147177ffeed1f" kindref="member">SwiP_construct()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1aff5b136d88dfec9e82e0e310b0f08945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_Params_init</definition>
        <argsstring>(SwiP_Params *params)</argsstring>
        <name>SwiP_Params_init</name>
        <param>
          <type><ref refid="struct_swi_p___params" kindref="compound">SwiP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize params structure to default values. </para>        </briefdescription>
        <detaileddescription>
<para>The default parameters are:<itemizedlist>
<listitem><para>name: NULL</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1aeed3e97f791991345cac2d0c7627475c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref></type>
        <definition>SwiP_Handle SwiP_create</definition>
        <argsstring>(SwiP_Fxn swiFxn, SwiP_Params *params)</argsstring>
        <name>SwiP_create</name>
        <param>
          <type><ref refid="_swi_p_8h_1a4a2c38e275f6fd182f60ae41e52f0f91" kindref="member">SwiP_Fxn</ref></type>
          <declname>swiFxn</declname>
        </param>
        <param>
          <type><ref refid="struct_swi_p___params" kindref="compound">SwiP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to create a software interrupt object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>swiFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>entry function of the software interrupt</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. NULL denotes to use the default parameters. The SwiP default parameters are noted in <ref refid="_swi_p_8h_1aff5b136d88dfec9e82e0e310b0f08945" kindref="member">SwiP_Params_init</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SwiP_Handle on success or a NULL on an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1adb4ec5be622b7c2ea09a510ca37d1e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_delete</definition>
        <argsstring>(SwiP_Handle handle)</argsstring>
        <name>SwiP_delete</name>
        <param>
          <type><ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to delete a software interrupt object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>returned from the SwiP_create call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1a97d6950fbd0a9c815c70adb432e45258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t SwiP_disable</definition>
        <argsstring>(void)</argsstring>
        <name>SwiP_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to disable software interrupts. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be called multiple times, but must unwound in the reverse order. For example <programlisting><codeline><highlight class="normal">uintptr_t<sp/>key1,<sp/>key2;</highlight></codeline>
<codeline><highlight class="normal">key1<sp/>=<sp/>SwiP_disable();</highlight></codeline>
<codeline><highlight class="normal">key2<sp/>=<sp/>SwiP_disable();</highlight></codeline>
<codeline><highlight class="normal">SwiP_restore(key2);</highlight></codeline>
<codeline><highlight class="normal">SwiP_restore(key1);</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>A key that must be passed to SwiP_restore to re-enable interrupts. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1a9fd505becdd49e440ceefafa5761d9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t SwiP_getTrigger</definition>
        <argsstring>(void)</argsstring>
        <name>SwiP_getTrigger</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to get the trigger value of the currently running SwiP. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1afa881bab5818dc389eca12a2a058b3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_andn</definition>
        <argsstring>(SwiP_Handle handle, uint32_t mask)</argsstring>
        <name>SwiP_andn</name>
        <param>
          <type><ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Clear bits in SwiP&apos;s trigger. Post SwiP if trigger becomes 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>returned from the SwiP_create or SwiP_construct call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>inverse value to be ANDed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1a7562a23d165e47cc8f00dd360cc64a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_dec</definition>
        <argsstring>(SwiP_Handle handle)</argsstring>
        <name>SwiP_dec</name>
        <param>
          <type><ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Decrement SwiP&apos;s trigger value. Post SwiP if trigger becomes 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>returned from the SwiP_create or SwiP_construct call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1aa7c056aaf64fcabe0ff7ea6fd665c650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_inc</definition>
        <argsstring>(SwiP_Handle handle)</argsstring>
        <name>SwiP_inc</name>
        <param>
          <type><ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Increment the SwiP&apos;s trigger value and post the SwiP. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>returned from the SwiP_create or SwiP_construct call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1a83237993728f41c3aef142d694baa5e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SwiP_inISR</definition>
        <argsstring>(void)</argsstring>
        <name>SwiP_inISR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to return a status based on whether it is in a software interrupt context. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status: indicating whether the function was called in a software interrupt routine (true) or not (false). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1adf25c9e8eab3e21263da35510280a096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_or</definition>
        <argsstring>(SwiP_Handle handle, uint32_t mask)</argsstring>
        <name>SwiP_or</name>
        <param>
          <type><ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Or the mask with the SwiP&apos;s trigger value and post the SwiP. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>returned from the SwiP_create or SwiP_construct call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be ORed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1a6ef21e06f58b649aa3a38926c67b93a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_post</definition>
        <argsstring>(SwiP_Handle handle)</argsstring>
        <name>SwiP_post</name>
        <param>
          <type><ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Unconditionally post a software interrupt. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>returned from the SwiP_create or SwiP_construct call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1a05b370cb42259cdf8cfdc0e159083846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_restore</definition>
        <argsstring>(uintptr_t key)</argsstring>
        <name>SwiP_restore</name>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Function to restore software interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>return from SwiP_disable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_swi_p_8h_1a73db5ea88573ded6ee25437873b4ab1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SwiP_setPriority</definition>
        <argsstring>(SwiP_Handle handle, uint32_t priority)</argsstring>
        <name>SwiP_setPriority</name>
        <param>
          <type><ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Function to set the priority of a software interrupt. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>returned from the SwiP_create or SwiP_construct call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>new priority </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SwiP.h" line="258" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Software Interrupt module for the RTOS Porting Interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para><hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017-2023,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor">#ifndef<sp/>ti_dpl_SwiP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_dpl_SwiP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="_swi_p_8h_1ab4f9bda0f04890b07aa42627413c4e83" refkind="member"><highlight class="preprocessor">#define<sp/>SwiP_STRUCT_SIZE<sp/>(60)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="union_swi_p___struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_swi_p___struct" kindref="compound">SwiP_Struct</ref></highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70" refid="union_swi_p___struct_1ad1260704ce9c058aeb2c332a47b9083c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="union_swi_p___struct_1ad1260704ce9c058aeb2c332a47b9083c" kindref="member">dummy</ref>;<sp/></highlight></codeline>
<codeline lineno="71" refid="union_swi_p___struct_1a027ab19bea449541f8440021d816620f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="union_swi_p___struct_1a027ab19bea449541f8440021d816620f" kindref="member">data</ref>[<ref refid="_swi_p_8h_1ab4f9bda0f04890b07aa42627413c4e83" kindref="member">SwiP_STRUCT_SIZE</ref>];</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}<sp/><ref refid="_swi_p_8h_1a57453ec4b8c803ee0f77bf8519376f86" kindref="member">SwiP_Struct</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_swi_p_8h_1ab7364aa5c613258800bbc8f8b586a17f" kindref="member">SwiP_Handle</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="_swi_p_8h_1a8b45593bcfd9f6957bb59b3e7c01663f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86" refid="_swi_p_8h_1a8b45593bcfd9f6957bb59b3e7c01663faffeaf50d8c5846b990e522ba70ae04c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_swi_p_8h_1a8b45593bcfd9f6957bb59b3e7c01663faffeaf50d8c5846b990e522ba70ae04c7" kindref="member">SwiP_OK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="87" refid="_swi_p_8h_1a8b45593bcfd9f6957bb59b3e7c01663fa995a62f8b5ada943a90b4f9c60bf20a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_swi_p_8h_1a8b45593bcfd9f6957bb59b3e7c01663fa995a62f8b5ada943a90b4f9c60bf20a3" kindref="member">SwiP_FAILURE</ref><sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}<sp/><ref refid="_swi_p_8h_1a8b45593bcfd9f6957bb59b3e7c01663f" kindref="member">SwiP_Status</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="_swi_p_8h_1a4a2c38e275f6fd182f60ae41e52f0f91" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_swi_p_8h_1a4a2c38e275f6fd182f60ae41e52f0f91" kindref="member">SwiP_Fxn</ref>)(uintptr_t<sp/>arg0,<sp/>uintptr_t<sp/>arg1);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="struct_swi_p___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115" refid="struct_swi_p___params_1ae189b3d772aeecf7bdd97702ed6c4d0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="struct_swi_p___params_1ae189b3d772aeecf7bdd97702ed6c4d0d" kindref="member">arg0</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116" refid="struct_swi_p___params_1aa25eb09538f959b632be48cee8a4ed17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="struct_swi_p___params_1aa25eb09538f959b632be48cee8a4ed17" kindref="member">arg1</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117" refid="struct_swi_p___params_1af9c1e4f447c892114beabcbe13dac109" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_swi_p___params_1af9c1e4f447c892114beabcbe13dac109" kindref="member">priority</ref>;<sp/></highlight></codeline>
<codeline lineno="118" refid="struct_swi_p___params_1a431dcf62eaa19ef0c4ce85d1ab58b940" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_swi_p___params_1a431dcf62eaa19ef0c4ce85d1ab58b940" kindref="member">trigger</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}<sp/><ref refid="struct_swi_p___params" kindref="compound">SwiP_Params</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SwiP_Handle<sp/><ref refid="_swi_p_8h_1af7d6d234f82bec50c73147177ffeed1f" kindref="member">SwiP_construct</ref>(<ref refid="union_swi_p___struct" kindref="compound">SwiP_Struct</ref><sp/>*swiP,<sp/><ref refid="_swi_p_8h_1a4a2c38e275f6fd182f60ae41e52f0f91" kindref="member">SwiP_Fxn</ref><sp/>swiFxn,<sp/><ref refid="struct_swi_p___params" kindref="compound">SwiP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1a441006ce08b8b32d1e49dc513082a843" kindref="member">SwiP_destruct</ref>(<ref refid="union_swi_p___struct" kindref="compound">SwiP_Struct</ref><sp/>*swiP);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1aff5b136d88dfec9e82e0e310b0f08945" kindref="member">SwiP_Params_init</ref>(<ref refid="struct_swi_p___params" kindref="compound">SwiP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SwiP_Handle<sp/><ref refid="_swi_p_8h_1aeed3e97f791991345cac2d0c7627475c" kindref="member">SwiP_create</ref>(<ref refid="_swi_p_8h_1a4a2c38e275f6fd182f60ae41e52f0f91" kindref="member">SwiP_Fxn</ref><sp/>swiFxn,<sp/><ref refid="struct_swi_p___params" kindref="compound">SwiP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1adb4ec5be622b7c2ea09a510ca37d1e3d" kindref="member">SwiP_delete</ref>(SwiP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uintptr_t<sp/><ref refid="_swi_p_8h_1a97d6950fbd0a9c815c70adb432e45258" kindref="member">SwiP_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_swi_p_8h_1a9fd505becdd49e440ceefafa5761d9a0" kindref="member">SwiP_getTrigger</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1afa881bab5818dc389eca12a2a058b3b9" kindref="member">SwiP_andn</ref>(SwiP_Handle<sp/>handle,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1a7562a23d165e47cc8f00dd360cc64a3b" kindref="member">SwiP_dec</ref>(SwiP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1aa7c056aaf64fcabe0ff7ea6fd665c650" kindref="member">SwiP_inc</ref>(SwiP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1a83237993728f41c3aef142d694baa5e2" kindref="member">SwiP_inISR</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1adf25c9e8eab3e21263da35510280a096" kindref="member">SwiP_or</ref>(SwiP_Handle<sp/>handle,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1a6ef21e06f58b649aa3a38926c67b93a9" kindref="member">SwiP_post</ref>(SwiP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1a05b370cb42259cdf8cfdc0e159083846" kindref="member">SwiP_restore</ref>(uintptr_t<sp/>key);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_swi_p_8h_1a73db5ea88573ded6ee25437873b4ab1d" kindref="member">SwiP_setPriority</ref>(SwiP_Handle<sp/>handle,<sp/>uint32_t<sp/>priority);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_dpl_SwiP__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/dpl/SwiP.h"/>
  </compounddef>
</doxygen>
