<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="struct_i2_s___params" kind="struct" language="C++" prot="public">
    <compoundname>I2S_Params</compoundname>
    <includes refid="_i2_s_8h" local="no">I2S.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_i2_s___params_1a3b7f7f942b6fb548141409be5a228e9c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool I2S_Params::trueI2sFormat</definition>
        <argsstring></argsstring>
        <name>trueI2sFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activate &quot;true I2S format&quot;.<itemizedlist>
<listitem><para>false: Data are read/write on the data lines from the first SCK period of the WS half-period to the last SCK edge of the WS half-period.</para></listitem><listitem><para>true: Data are read/write on the data lines from the second SCK period of the WS half-period to the first SCK edge of the next WS half-period. If no padding is activated, this corresponds to the I2S standard. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="926" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a9d3ad248a0bca19f6c8aba2ef4e311c7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool I2S_Params::invertWS</definition>
        <argsstring></argsstring>
        <name>invertWS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>WS must be internally inverted when using I2S data format.<itemizedlist>
<listitem><para>false: The WS signal is not internally inverted.</para></listitem><listitem><para>true: The WS signal is internally inverted. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="933" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="933" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1aa6bc7fe594699bd27444b2b3b8aa17e4" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool I2S_Params::isMSBFirst</definition>
        <argsstring></argsstring>
        <name>isMSBFirst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Endianness selection.<itemizedlist>
<listitem><para>false: The samples are transmitted LSB first.</para></listitem><listitem><para>true: The samples are transmitted MSB first.</para></listitem></itemizedlist>
</para><para><simplesect kind="warning"><para>Not all devices support selecting endianness. Please refer to the device-specific documentation for possible limitations. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="943" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a040e104c9b7118fb5719b3007801a2cb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool I2S_Params::isDMAUnused</definition>
        <argsstring></argsstring>
        <name>isDMAUnused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selection between DMA transmissions and CPU transmissions.<itemizedlist>
<listitem><para>false: Transmission are performed by DMA.</para></listitem><listitem><para>true: Transmission are performed by CPU.</para></listitem></itemizedlist>
</para><para><simplesect kind="warning"><para>Not all devices support selecting between DMA and CPU transmissions. Please refer to the device-specific documentation for possible limitations. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="954" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a257e437c1d8fb08ddd7457c47c479db5" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222" kindref="member">I2S_MemoryLength</ref></type>
        <definition>I2S_MemoryLength I2S_Params::memorySlotLength</definition>
        <argsstring></argsstring>
        <name>memorySlotLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Width of stored samples. It should be consistent with the word length. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="959" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1af450bbb82e3268acd51468d084b52b6d" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t I2S_Params::beforeWordPadding</definition>
        <argsstring></argsstring>
        <name>beforeWordPadding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of SCK periods between the first WS edge and the MSB of the first audio channel data transferred during the phase. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="965" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1abedf75df9cdd087f99fc5f7caeb67277" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t I2S_Params::afterWordPadding</definition>
        <argsstring></argsstring>
        <name>afterWordPadding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of SCK periods between the LSB of the an audio channel and the MSB of the next audio channel. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="971" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a4bde5e88326f32724193b9d67de9409c" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t I2S_Params::bitsPerWord</definition>
        <argsstring></argsstring>
        <name>bitsPerWord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bits per sample (Word length): must be between 8 and 24 bits. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="974" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a0774324bd379cbac6bba7aada9a3017b" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a54ce68790d113be856f3a6840bc3ebe0" kindref="member">I2S_Role</ref></type>
        <definition>I2S_Role I2S_Params::moduleRole</definition>
        <argsstring></argsstring>
        <name>moduleRole</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select if the I2S module is a Target or a Controller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="979" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1ab963a56402bc13a1e6c16fa046db151f" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1adf99b8155252f529a3089cee99c52a51" kindref="member">I2S_SamplingEdge</ref></type>
        <definition>I2S_SamplingEdge I2S_Params::samplingEdge</definition>
        <argsstring></argsstring>
        <name>samplingEdge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select edge sampling type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="984" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="984" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a1e7dcdbcaa1d392499e7e8c5194ccb11" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7e" kindref="member">I2S_DataInterfaceUse</ref></type>
        <definition>I2S_DataInterfaceUse I2S_Params::SD0Use</definition>
        <argsstring></argsstring>
        <name>SD0Use</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select if SD0 is an input, an output or disabled.<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eaa745a9c11f2a2d74d1c6d001a32b355b" kindref="member">I2S_SD0_DISABLED</ref>: Disabled.</para></listitem><listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eae0e5e7026b88277c279de0e798488e77" kindref="member">I2S_SD0_INPUT</ref>: Input.</para></listitem><listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eab32df02fc78f8a4eabe6efa84fe3b28e" kindref="member">I2S_SD0_OUTPUT</ref>: Output. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="992" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a40b06dc2ce35072ab5ce2af83710be37" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7e" kindref="member">I2S_DataInterfaceUse</ref></type>
        <definition>I2S_DataInterfaceUse I2S_Params::SD1Use</definition>
        <argsstring></argsstring>
        <name>SD1Use</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select if SD1 is an input, an output or disabled.<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eaac2fb5fe175b0b96da5c7ea069ae48b6" kindref="member">I2S_SD1_DISABLED</ref>: Disabled.</para></listitem><listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eabc860688d07b2022d075448f597d7811" kindref="member">I2S_SD1_INPUT</ref>: Input.</para></listitem><listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7ea966016f222e7831b399aac26e4b8c7f0" kindref="member">I2S_SD1_OUTPUT</ref>: Output. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1000" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1ae97322ea561e6c5237b60818e82627e5" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480" kindref="member">I2S_ChannelConfig</ref></type>
        <definition>I2S_ChannelConfig I2S_Params::SD0Channels</definition>
        <argsstring></argsstring>
        <name>SD0Channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This parameter is indicating which channels are valid on SD0. Valid channels on SD1 and SD0 can be different.</para><para>Refer to <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480" kindref="member">I2S_ChannelConfig</ref> for a list of possible values, and for which phase types they can be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1009" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a35e4c06e74c7ffee100850e93787d93b" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480" kindref="member">I2S_ChannelConfig</ref></type>
        <definition>I2S_ChannelConfig I2S_Params::SD1Channels</definition>
        <argsstring></argsstring>
        <name>SD1Channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This parameter is indicating which channels are valid on SD1. Valid channels on SD1 and SD0 can be different.</para><para>Refer to <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480" kindref="member">I2S_ChannelConfig</ref> for a list of possible values, and for which phase types they can be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1018" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a5b80fd825ba28a6db860108a9cb4f5e1" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a5d9de87aff52f63eadf4a95560abd61f" kindref="member">I2S_PhaseType</ref></type>
        <definition>I2S_PhaseType I2S_Params::phaseType</definition>
        <argsstring></argsstring>
        <name>phaseType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select phase type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1023" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1023" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1ae3241f138f3e247875ef9686622b4d43" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t I2S_Params::fixedBufferLength</definition>
        <argsstring></argsstring>
        <name>fixedBufferLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of consecutive bytes of the samples buffers. This field must be set to a value x different from 0. All the data buffers used (both for input and output) must contain N*x bytes (with N an integer satisfying N&gt;0). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1031" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1031" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1ad43b78dab7cc91991be4c6c8f67814e3" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t I2S_Params::startUpDelay</definition>
        <argsstring></argsstring>
        <name>startUpDelay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of WS periods to wait before the first transfer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1034" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1034" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a0008af9bd7157052d243694891b8580a" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t I2S_Params::CCLKDivider</definition>
        <argsstring></argsstring>
        <name>CCLKDivider</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select the frequency divider for CCLK signal. Final value of CCLK is 48MHz/CCLKDivider. Value must be selected between 2 and 1024. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1041" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1041" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1aff5aa130ef087ebb86932182787c1df8" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t I2S_Params::samplingFrequency</definition>
        <argsstring></argsstring>
        <name>samplingFrequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2S sampling frequency configuration in samples/second.</para><para>The selected sampling frequency must ensure that the SCK frequency will be inside of its device-specific limits. Please refer to the device-specific documentation for the lower and upper limits of the SCK frequency. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1050" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1050" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a94ed67cfe1320bd8daf013c132b907cc" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref></type>
        <definition>I2S_Callback I2S_Params::readCallback</definition>
        <argsstring></argsstring>
        <name>readCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to read callback. Cannot be NULL if a read interface is activated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1056" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1056" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a2cf905e275e93a49707613aedcb2ab9b" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref></type>
        <definition>I2S_Callback I2S_Params::writeCallback</definition>
        <argsstring></argsstring>
        <name>writeCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to write callback. Cannot be NULL if a write interface is activated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1062" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1aa12b8175a33bc574818208f4ccb8540d" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref></type>
        <definition>I2S_Callback I2S_Params::errorCallback</definition>
        <argsstring></argsstring>
        <name>errorCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to error callback. Cannot be NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1065" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1af9d903683ef9e8352c6f1bda555a740c" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* I2S_Params::custom</definition>
        <argsstring></argsstring>
        <name>custom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to device specific custom params </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/I2S.h" line="1068" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="1068" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic I2S Parameters. </para>    </briefdescription>
    <detaileddescription>
<para>I2S parameters are used to with the <ref refid="_i2_s_8h_1a49305a04152a6fb37a7afceabca642eb" kindref="member">I2S_open()</ref> call. Default values for these parameters are set using <ref refid="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" kindref="member">I2S_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" kindref="member">I2S_Params_init()</ref> </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="1237">
        <label>I2S_Config</label>
        <link refid="struct_i2_s___config"/>
      </node>
      <node id="1236">
        <label>I2S_Params</label>
        <link refid="struct_i2_s___params"/>
        <childnode refid="1237" relation="usage">
          <edgelabel>errorCallback</edgelabel>
          <edgelabel>readCallback</edgelabel>
          <edgelabel>writeCallback</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="source/ti/drivers/I2S.h" line="914" column="1" bodyfile="source/ti/drivers/I2S.h" bodystart="913" bodyend="1069"/>
    <listofallmembers>
      <member refid="struct_i2_s___params_1abedf75df9cdd087f99fc5f7caeb67277" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>afterWordPadding</name></member>
      <member refid="struct_i2_s___params_1af450bbb82e3268acd51468d084b52b6d" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>beforeWordPadding</name></member>
      <member refid="struct_i2_s___params_1a4bde5e88326f32724193b9d67de9409c" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>bitsPerWord</name></member>
      <member refid="struct_i2_s___params_1a0008af9bd7157052d243694891b8580a" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>CCLKDivider</name></member>
      <member refid="struct_i2_s___params_1af9d903683ef9e8352c6f1bda555a740c" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>custom</name></member>
      <member refid="struct_i2_s___params_1aa12b8175a33bc574818208f4ccb8540d" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>errorCallback</name></member>
      <member refid="struct_i2_s___params_1ae3241f138f3e247875ef9686622b4d43" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>fixedBufferLength</name></member>
      <member refid="struct_i2_s___params_1a9d3ad248a0bca19f6c8aba2ef4e311c7" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>invertWS</name></member>
      <member refid="struct_i2_s___params_1a040e104c9b7118fb5719b3007801a2cb" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>isDMAUnused</name></member>
      <member refid="struct_i2_s___params_1aa6bc7fe594699bd27444b2b3b8aa17e4" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>isMSBFirst</name></member>
      <member refid="struct_i2_s___params_1a257e437c1d8fb08ddd7457c47c479db5" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>memorySlotLength</name></member>
      <member refid="struct_i2_s___params_1a0774324bd379cbac6bba7aada9a3017b" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>moduleRole</name></member>
      <member refid="struct_i2_s___params_1a5b80fd825ba28a6db860108a9cb4f5e1" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>phaseType</name></member>
      <member refid="struct_i2_s___params_1a94ed67cfe1320bd8daf013c132b907cc" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>readCallback</name></member>
      <member refid="struct_i2_s___params_1ab963a56402bc13a1e6c16fa046db151f" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>samplingEdge</name></member>
      <member refid="struct_i2_s___params_1aff5aa130ef087ebb86932182787c1df8" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>samplingFrequency</name></member>
      <member refid="struct_i2_s___params_1ae97322ea561e6c5237b60818e82627e5" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>SD0Channels</name></member>
      <member refid="struct_i2_s___params_1a1e7dcdbcaa1d392499e7e8c5194ccb11" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>SD0Use</name></member>
      <member refid="struct_i2_s___params_1a35e4c06e74c7ffee100850e93787d93b" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>SD1Channels</name></member>
      <member refid="struct_i2_s___params_1a40b06dc2ce35072ab5ce2af83710be37" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>SD1Use</name></member>
      <member refid="struct_i2_s___params_1ad43b78dab7cc91991be4c6c8f67814e3" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>startUpDelay</name></member>
      <member refid="struct_i2_s___params_1a3b7f7f942b6fb548141409be5a228e9c" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>trueI2sFormat</name></member>
      <member refid="struct_i2_s___params_1a2cf905e275e93a49707613aedcb2ab9b" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>writeCallback</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
