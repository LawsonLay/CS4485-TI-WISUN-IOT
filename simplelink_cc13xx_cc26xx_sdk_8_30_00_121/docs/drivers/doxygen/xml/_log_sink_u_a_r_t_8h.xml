<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_log_sink_u_a_r_t_8h" kind="file" language="C++">
    <compoundname>LogSinkUART.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">ti/log/Log.h</includes>
    <includes refid="_u_a_r_t2_8h" local="no">ti/drivers/UART2.h</includes>
    <includes refid="_ring_buf_8h" local="no">ti/drivers/utils/RingBuf.h</includes>
    <incdepgraph>
      <node id="1397">
        <label>stdbool.h</label>
      </node>
      <node id="1395">
        <label>ti/log/Log.h</label>
      </node>
      <node id="1407">
        <label>ti/drivers/dpl/SemaphoreP.h</label>
        <link refid="_semaphore_p_8h"/>
        <childnode refid="1393" relation="include">
        </childnode>
        <childnode refid="1397" relation="include">
        </childnode>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1393">
        <label>stdint.h</label>
      </node>
      <node id="1405">
        <label>ti/drivers/Temperature.h</label>
        <link refid="_temperature_8h"/>
        <childnode refid="1397" relation="include">
        </childnode>
        <childnode refid="1394" relation="include">
        </childnode>
        <childnode refid="1393" relation="include">
        </childnode>
        <childnode refid="1399" relation="include">
        </childnode>
      </node>
      <node id="1394">
        <label>stddef.h</label>
      </node>
      <node id="1398">
        <label>ti/drivers/Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="1399" relation="include">
        </childnode>
        <childnode refid="1400" relation="include">
        </childnode>
        <childnode refid="1401" relation="include">
        </childnode>
      </node>
      <node id="1402">
        <label>ti/drivers/dpl/HwiP.h</label>
        <link refid="_hwi_p_8h"/>
        <childnode refid="1393" relation="include">
        </childnode>
        <childnode refid="1397" relation="include">
        </childnode>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1400">
        <label>ti/devices/DeviceFamily.h</label>
      </node>
      <node id="1399">
        <label>ti/drivers/utils/List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="1393" relation="include">
        </childnode>
        <childnode refid="1397" relation="include">
        </childnode>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1406">
        <label>DeviceFamily_constructPath(driverlib/sys_ctrl.h)</label>
      </node>
      <node id="1408">
        <label>ti/drivers/utils/RingBuf.h</label>
        <link refid="_ring_buf_8h"/>
        <childnode refid="1393" relation="include">
        </childnode>
        <childnode refid="1394" relation="include">
        </childnode>
        <childnode refid="1397" relation="include">
        </childnode>
      </node>
      <node id="1392">
        <label>LogSinkUART.h</label>
        <link refid="_log_sink_u_a_r_t_8h"/>
        <childnode refid="1393" relation="include">
        </childnode>
        <childnode refid="1394" relation="include">
        </childnode>
        <childnode refid="1395" relation="include">
        </childnode>
        <childnode refid="1396" relation="include">
        </childnode>
        <childnode refid="1408" relation="include">
        </childnode>
      </node>
      <node id="1404">
        <label>ti/drivers/power/PowerCC26X2.h</label>
        <link refid="_power_c_c26_x2_8h"/>
        <childnode refid="1402" relation="include">
        </childnode>
        <childnode refid="1403" relation="include">
        </childnode>
        <childnode refid="1398" relation="include">
        </childnode>
        <childnode refid="1401" relation="include">
        </childnode>
        <childnode refid="1405" relation="include">
        </childnode>
        <childnode refid="1400" relation="include">
        </childnode>
        <childnode refid="1406" relation="include">
        </childnode>
      </node>
      <node id="1403">
        <label>ti/drivers/dpl/ClockP.h</label>
        <link refid="_clock_p_8h"/>
        <childnode refid="1393" relation="include">
        </childnode>
        <childnode refid="1397" relation="include">
        </childnode>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1401">
        <label>ti/drivers/power/PowerCC26XX.h</label>
        <link refid="_power_c_c26_x_x_8h"/>
        <childnode refid="1402" relation="include">
        </childnode>
        <childnode refid="1403" relation="include">
        </childnode>
        <childnode refid="1398" relation="include">
        </childnode>
        <childnode refid="1400" relation="include">
        </childnode>
        <childnode refid="1404" relation="include">
        </childnode>
      </node>
      <node id="1396">
        <label>ti/drivers/UART2.h</label>
        <link refid="_u_a_r_t2_8h"/>
        <childnode refid="1394" relation="include">
        </childnode>
        <childnode refid="1393" relation="include">
        </childnode>
        <childnode refid="1397" relation="include">
        </childnode>
        <childnode refid="1398" relation="include">
        </childnode>
        <childnode refid="1403" relation="include">
        </childnode>
        <childnode refid="1402" relation="include">
        </childnode>
        <childnode refid="1407" relation="include">
        </childnode>
        <childnode refid="1408" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_log_sink_u_a_r_t___h_w_attrs" prot="public">LogSinkUART_HWAttrs</innerclass>
    <innerclass refid="struct_log_sink_u_a_r_t___object" prot="public">LogSinkUART_Object</innerclass>
    <innerclass refid="struct_log_sink_u_a_r_t___config" prot="public">LogSinkUART_Config</innerclass>
    <innerclass refid="struct_log_sink_u_a_r_t___instance" prot="public">LogSinkUART_Instance</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_log_sink_u_a_r_t_8h_1ac679e435e04bde56398753bdcec55ff2" prot="public" static="no">
        <name>Log_TI_LOG_SINK_UART_VERSION</name>
        <initializer>0.1.0</initializer>
        <briefdescription>
<para>LogSinkUART version. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/log/LogSinkUART.h" line="361" column="9" bodyfile="source/ti/log/LogSinkUART.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_sink_u_a_r_t_8h_1a2a5cb6dc581c2c08f06259b42389ae96" prot="public" static="no">
        <name>Log_SINK_UART_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer><ref refid="struct_log_sink_u_a_r_t___instance" kindref="compound">LogSinkUART_Instance</ref> LogSinkUART_##name##_Config = {.index = name}</initializer>
        <briefdescription>
<para>Create a LogSinkUART instance called <computeroutput>name</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>NODOC NODOC NODOC </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/log/LogSinkUART.h" line="587" column="9" bodyfile="source/ti/log/LogSinkUART.h" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_sink_u_a_r_t_8h_1a48d312a1edf53bb5574d5f671ab2917a" prot="public" static="no">
        <name>Log_SINK_UART_USE</name>
        <param><defname>name</defname></param>
        <initializer>extern <ref refid="struct_log_sink_u_a_r_t___instance" kindref="compound">LogSinkUART_Instance</ref> LogSinkUART_##name##_Config</initializer>
        <briefdescription>
<para>Use a LogSinkUART instance called <computeroutput>name</computeroutput> when not created in the same file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/log/LogSinkUART.h" line="593" column="9" bodyfile="source/ti/log/LogSinkUART.h" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_sink_u_a_r_t_8h_1a34b70fafc4d748f50abff56317a7d896" prot="public" static="no">
        <name>Log_MODULE_INIT_SINK_UART</name>
        <param><defname>name</defname></param>
        <param><defname>_levels</defname></param>
        <param><defname>printfDelegate</defname></param>
        <param><defname>bufDelegate</defname></param>
        <param><defname>_dynamicLevelsPtr</defname></param>
        <initializer>{                                                                                                                 \
        .sinkConfig = &amp;LogSinkUART_##name##_Config, .printf = printfDelegate, .printf0 = printfDelegate##0,           \
        .printf1 = printfDelegate##1, .printf2 = printfDelegate##2, .printf3 = printfDelegate##3, .buf = bufDelegate, \
        .levels = _levels, .dynamicLevelsPtr = _dynamicLevelsPtr,                                                     \
    }</initializer>
        <briefdescription>
<para>Initialize a LogSinkUART instance called <computeroutput>name</computeroutput> with log <computeroutput>_levels</computeroutput> , printf delegate function <computeroutput>printfDelegate</computeroutput> , buf delegate function <computeroutput>bufDelegate</computeroutput> and dynamic log level <computeroutput>_dynamicLevelsPtr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/log/LogSinkUART.h" line="600" column="9" bodyfile="source/ti/log/LogSinkUART.h" bodystart="600" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_log_sink_u_a_r_t_8h_1ab152d4c3b9cf998c4f85bc70b3c05f89" prot="public" static="no">
        <type><ref refid="struct_log_sink_u_a_r_t___instance" kindref="compound">LogSinkUART_Instance</ref> *</type>
        <definition>typedef LogSinkUART_Instance* LogSinkUART_Handle</definition>
        <argsstring></argsstring>
        <name>LogSinkUART_Handle</name>
        <briefdescription>
<para>A handle for the <ref refid="struct_log_sink_u_a_r_t___instance" kindref="compound">LogSinkUART_Instance</ref> structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/log/LogSinkUART.h" line="422" column="1" bodyfile="source/ti/log/LogSinkUART.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_log_sink_u_a_r_t_8h_1a234596f869caa19cc28c770545aac882" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_log_sink_u_a_r_t___config" kindref="compound">LogSinkUART_Config</ref></type>
        <definition>const LogSinkUART_Config LogSinkUART_config[]</definition>
        <argsstring>[]</argsstring>
        <name>LogSinkUART_config</name>
        <briefdescription>
<para>Array with the configuration of each sink. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/log/LogSinkUART.h" line="404" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_log_sink_u_a_r_t_8h_1aaa81127b20cfa3f88df0f435cc5c932e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogSinkUART_flush</definition>
        <argsstring>(void)</argsstring>
        <name>LogSinkUART_flush</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Flush all the LogSinkUART sinks. </para>        </briefdescription>
        <detaileddescription>
<para>Function to flush each of the LogSinkUART sinks in the order they are added. For each sink it will read its ring buffer and put as much data as possible on the UART interface. The flush can occur in task or interrupt context. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/log/LogSinkUART.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_log_sink_u_a_r_t_8h_1a9c1b1047b094b8b706cd774508d1c514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogSinkUART_init</definition>
        <argsstring>(uint_least8_t index)</argsstring>
        <name>LogSinkUART_init</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Initialize a given LogSinkUART sink. </para>        </briefdescription>
        <detaileddescription>
<para>Function to initialize a given LogSinkUART sink specified by the particular index value. It constructs a ring buffer, sets up the UART2 attributes and opens the given UART peripheral</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical sink number for the LogSinkUART indexed into the LogSinkUART_config table</para></parameterdescription>
</parameteritem>
</parameterlist>
The UART peripheral is set to send only mode, with the following fixed parameters: <programlisting><codeline><highlight class="normal">writeMode<sp/>=<sp/>UART2_Mode_NONBLOCKING;</highlight></codeline>
<codeline><highlight class="normal">dataLength<sp/>=<sp/>UART2_DataLen_8;</highlight></codeline>
<codeline><highlight class="normal">stopBits<sp/>=<sp/>UART2_StopBits_1;</highlight></codeline>
</programlisting></para><para>The baudRate and parityType can be configured from SysConfig. The size of the ring buffer can also be set from the SysConfig. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/log/LogSinkUART.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_log_sink_u_a_r_t_8h_1a1a2c675dc927953a2f5bc6dc1c564ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogSinkUART_finalize</definition>
        <argsstring>(uint_least8_t index)</argsstring>
        <name>LogSinkUART_finalize</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Finalize a given LogSinkUART sink. </para>        </briefdescription>
        <detaileddescription>
<para>Function to finalize a given LogSinkUART sink specified by the particular index value. It cancels any ongoing write operation over the given UART peripheral and closes it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical sink number for the LogSinkUART indexed into the LogSinkUART_config table </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/log/LogSinkUART.h" line="466" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><bold>PRELIMINARY</bold> LogSinkUART interface </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><simplesect kind="warning"><para>These APIs are <bold>PRELIMINARY</bold></para></simplesect>
The LogSinkUART module is a sink that can be used in conjunction with the Log.h API in source/ti/log/ and the logging tools available in tools/log/tiutils. The API defined in this file is made available to the Logging framework and used as a transport layer for Log.h. For more information about the Log API, see the <ref refid="index_1log" kindref="member">Log documentation</ref>.</para><para>To use the UART sink, ensure that the correct library for your device is linked in and include this header file as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/log/LogSinkUART.h&gt;</highlight></codeline>
</programlisting></para><para>This module implements two functions that are required by the Log API:<itemizedlist>
<listitem><para>printf(const Log_Module *handle, uint32_t header, uint32_t headerPtr, uint32_t numArgs, ...);</para></listitem><listitem><para>buf(const Log_Module *handle, uint32_t header, uint32_t headerPtr, uint8_t *data, size_t size);</para></listitem></itemizedlist>
</para><para>Whenever a log statement that uses LogSinkUART as its sink is called, the log module delegates to one of the functions above.</para><para><anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_Overview"/><heading level="1">Overview</heading>
</para><para>LogSinkUART is a sink/transport layer that asynchronously outputs encoded log statements over UART. It uses the UART2 driver to stream data out onto a user-selectable pin, which can be received and processed by a host-side tool. For more information about the host-side tool, see tools/log/tiutils.</para><para>At the log-site the sink separates the generation of the log record from the transportation of the record off the device. Deferring the transportation to a later point of the program execution is done to minimize the runtime intrusion that would be caused by synchronously outputting the log statements through the relatively slow UART. The first part generates and stores the log statements into an intermediate storage synchronously. The second part uses the idle task of the OS, executed when no other tasks or interrupts are running, to move the data stored in the intermediate storage off the device.</para><para>By transmitting messages asynchronously the readout at the host-side is also asynchronous. As a consequence, the receiving of log statements at the host-side can be deferred from their execution in the program.</para><para>This sink requires no special hardware to capture and decode the logs beyond a basic UART-to-USB bridge.</para><para>The data flow at a high level is:<orderedlist>
<listitem><para>Log statement captured at the log site with timestamp</para></listitem><listitem><para>Log data marshalled into a log packet</para></listitem><listitem><para>Log packet moved to ring buffer working as intermediate storage</para></listitem><listitem><para>Intermediate storage flushed via the UART2 driver when nothing else is happening through a function installed in the Idle-loop/task</para></listitem><listitem><para>Data sent out on the UART line</para></listitem><listitem><para>Data received by listening COM port on host</para></listitem><listitem><para>Data decoded by host and fed through remainder of host logging infrastructure</para></listitem><listitem><para>Logs visualised in Wireshark or dumped to console / log file</para></listitem></orderedlist>
</para><para><simplesect kind="note"><para>Throughout this documentation and API the term &quot;packet&quot; is used instead of the term &quot;record&quot;. Both terms are equivalent and can be used interchangeably.</para></simplesect>
<hruler/>
 <anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_Considerations"/><heading level="1">Considerations</heading>
</para><para>When using this sink consider the following:<itemizedlist>
<listitem><para>The number of sinks is limited by the number of UART peripherals in the device.</para></listitem><listitem><para>When a UART instance is consumed for a sink it can not be used for other operations.</para></listitem><listitem><para>When a single UART LogSink instance is used, an optimised printf is used that reduces the footprint of each #Log_printf statement.</para></listitem><listitem><para>Each UART LogSink will create its own Ring Buffer.</para></listitem><listitem><para>If any part of the transmission is lost/not received by the logging-tool, the rest of the data might not be interpreted correctly.</para></listitem><listitem><para>9.54 hours of logging timestamps are available before overflowing in a system where 1 bit = 8 us. The tick period for each device can be read from the multiplier variable in TimestamP&lt;device&gt;.c under kernel/freertos/dpl. If the timestamp overflows it will go back to 0.</para></listitem><listitem><para>The LogSinkUART sinks are flushed in the order they are instantiated. </para></listitem><listitem><para>If performance issues are observed either increase the size of the UART2 ring buffer to increase throughput or increase the size of the intermediate ring buffer size for more log statements. Also note that the device needs to have idle-time to automatically flush data. If the software is always doing something then nothing will ever be output.</para></listitem><listitem><para>SRAM requirements scale with the number of log records to store in between flushing the buffer.</para></listitem><listitem><para>A #Log_printf call has an execution time of 20 us to 27.8 us depending on the number of arguments.</para></listitem><listitem><para>A Log_buf call has a minimum execution time of 32.8 us and an approximate increase of 0.183 us per byte in the buffer.</para></listitem></itemizedlist>
</para><para><hruler/>
 <anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_DesignArchitecture"/><heading level="1">Design Architecture</heading>
</para><para>The LogSinkUART implementation is based on the following architecture.</para><para><heading level="2">Packet Transmission Format</heading>
</para><para>All log packets begin with a 32-bit metadata pointer followed by a 32-bit timestamp. The next fields depend on the type of log statement:<itemizedlist>
<listitem><para>Log_printf: Variable number of 32-bit arguments that range from 0 to 8.</para></listitem><listitem><para>Log_buf: 32-bit field with the size of the buffer being sent followed by the buffer data.</para></listitem></itemizedlist>
</para><para><plantuml>
 skinparam useBetaStyle true

 &lt;style&gt;
 timingDiagram {
     LineColor #065959
 }
 &lt;/style&gt;

 concise &quot;Log_printf packet&quot; as LP
 concise &quot;Log_buf packet&quot; as LB
 hide time-axis

 scale 1 as 50 pixels

 @LP
 0 is Metadata_Pointer #FFCC99: 0:31
 +4 is Timestamp #CC99FF: 32:63
 +4 is VA_Arg_0 #99CCFF: 64:95
 +4 is {-} #99CCFF: ...
 +1 is VA_Arg_n #99CCFF: 32-bits
 +4 is {-}

 @LB
 0 is Metadata_Pointer #FFCC99: 0:31
 +4 is Timestamp #CC99FF: 32:63
 +4 is Buffer_Size #97D077: 64:95
 +4 is Buffer_Data #99CCFF
 +5 is {-}
 </plantuml>
</para><para>If a packet would overflow the ring buffer, a 32-bit overflow packet is placed instead. It is the original metadata pointer modified to be identified as an overflow packet. The host-side tool decodes it and displays an overflow message, indicating that at least that message would have overflowed. When this is observed, it is recommended to either resize the ring buffer or disable some log statements. <simplesect kind="note"><para>If the intermediate ring buffer is full, no new overflow or log packets will be stored.</para></simplesect>
Each log statement used will occupy the following amount of SRAM:</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para>Log statement type </para></entry><entry thead="yes"><para>Log statement size (bytes)  </para></entry></row>
<row>
<entry thead="no"><para>Log_printf </para></entry><entry thead="no"><para>8 + 4 * number_of_arguments </para></entry></row>
<row>
<entry thead="no"><para>Log_buf </para></entry><entry thead="no"><para>12 + buffer_size </para></entry></row>
<row>
<entry thead="no"><para>Overflow </para></entry><entry thead="no"><para>4 </para></entry></row>
</table>
<heading level="2">Packet Framing</heading>
</para><para>The host-side must receive and properly handle a continuous stream of packets. It is able to decode and synchronize packets. If the first 32 bits is not a valid metadata-pointer address, it will left-shift byte-by-byte until it detects a valid one. Once a metadata-pointer address is verified, the host-side tool knows that it is followed by a timestamp. The number of arguments for each frame is extracted from the .out file. This determines the length of the current packet and when the metadata-pointer address from the next packet is expected.</para><para><heading level="2">Flushing the data</heading>
</para><para>A hook function installed in the Idle-loop/task is run when no other tasks or interrupts are running. It flushes as many log packets as possible from the intermediate storage via the UART2 driver set in nonblocking mode. In this mode, <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> will copy as much data into the transmit buffer as space allows and return immediately. The maximum space allowed, and therefore the amount of data sent out every time that the hook function is called, is determined by the size of the TX Ring Buffer.</para><para>The Idle-loop/task will always be run before the power management loop.</para><para>Since each OS has a different implementation of the Idle-loop/task, the installation of the hook function will also be different for each OS. The automatic installation is currently supported for FreeRTOS and TI-RTOS 7 when using SysConfig.</para><para><hruler/>
 <anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_Usage"/><heading level="1">Usage</heading>
</para><para>To use the UART LogSink the application calls the following APIs:<itemizedlist>
<listitem><para><ref refid="_log_sink_u_a_r_t_8h_1a9c1b1047b094b8b706cd774508d1c514" kindref="member">LogSinkUART_init()</ref>: Initialize a UART sink. This function takes as argument an index that describes the sink that has to be initialized.</para></listitem><listitem><para><ref refid="_log_sink_u_a_r_t_8h_1aaa81127b20cfa3f88df0f435cc5c932e" kindref="member">LogSinkUART_flush()</ref>: Function to flush all the LogSinkUART sinks in the order they are added. For each sink it will read data from the ring buffer and put as much as possible on the UART interface.</para></listitem><listitem><para><ref refid="_log_sink_u_a_r_t_8h_1a1a2c675dc927953a2f5bc6dc1c564ed5" kindref="member">LogSinkUART_finalize()</ref>: Finalize a UART sink. This function takes as argument an index that describes the sink that has to be finalized.</para></listitem></itemizedlist>
</para><para>Details on usage are provided in the following subsections.</para><para><anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_Examples"/><heading level="2">Examples</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_initialize" kindref="member">Initializing a UART LogSink</ref></para></listitem><listitem><para><ref refid="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_flush" kindref="member">Flushing UART sinks</ref></para></listitem><listitem><para><ref refid="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_finalize" kindref="member">Finalizing a UART LogSink</ref></para></listitem><listitem><para><ref refid="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_protect" kindref="member">Protect log statements</ref></para></listitem></itemizedlist>
</para><para><anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_initialize"/><heading level="3">Initializing a UART LogSink</heading>
</para><para>If LogSinkUART is enabled through SysConfig, then <ref refid="_log_sink_u_a_r_t_8h_1a9c1b1047b094b8b706cd774508d1c514" kindref="member">LogSinkUART_init()</ref> will be automatically called from <ref refid="_board_8h_1a6c191e6138454022bba4dbcb4278f141" kindref="member">Board_init()</ref>. If SysConfig is not used, the user must initialize the log sink. <ref refid="_log_sink_u_a_r_t_8h_1a9c1b1047b094b8b706cd774508d1c514" kindref="member">LogSinkUART_init()</ref> can also be called after a sink has been finalized with <ref refid="_log_sink_u_a_r_t_8h_1a1a2c675dc927953a2f5bc6dc1c564ed5" kindref="member">LogSinkUART_finalize()</ref>. To initialize a sink, first include the ti_log_config.h library containing the expansion of the sink name. Afterwards, call the initialize function passing as an argument the name of the sink to be initialized.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;ti_log_config.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LogSinkUART_init(sink_name);</highlight></codeline>
</programlisting></para><para><anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_flush"/><heading level="3">Flushing UART sinks</heading>
</para><para><ref refid="_log_sink_u_a_r_t_8h_1aaa81127b20cfa3f88df0f435cc5c932e" kindref="member">LogSinkUART_flush()</ref> will be called automatically in the Idle-loop/task for FreeRTOS and TI-RTOS 7. Despite this, the user can still manually call the function to send out as much data as possible from all the existing ring buffers when desired. The flush function can be called from either a task or interrupt context.</para><para><anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_finalize"/><heading level="3">Finalizing a UART LogSink</heading>
</para><para><ref refid="_log_sink_u_a_r_t_8h_1a1a2c675dc927953a2f5bc6dc1c564ed5" kindref="member">LogSinkUART_finalize()</ref> will cancel all ongoing UART writes and call <ref refid="_u_a_r_t2_8h_1a2a82f370c2f15ececc5b03fbba65bcde" kindref="member">UART2_close()</ref>. All log packets remaining in the intermediate storage will be lost when calling <ref refid="_log_sink_u_a_r_t_8h_1a9c1b1047b094b8b706cd774508d1c514" kindref="member">LogSinkUART_init()</ref> because the ring buffer will be reset. All log statements after a finalize call will also be lost due to the reset of the ring buffer when initializing the sink. To finalize a sink first include the ti_log_config.h library containing the expansion of the sink name. Afterwards, call the finalize function passing as an argument the name of the sink to be finalized.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;ti_log_config.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LogSinkUART_finalize(sink_name);</highlight></codeline>
</programlisting></para><para><anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_protect"/><heading level="3">Protect log statements</heading>
</para><para>To ensure that logs are correctly ordered when put back together on the host, log statements can be called from a context where HWI are disabled. This also ensures that the recorded timestamp is faithful to when the log statement was executed.</para><para>Logs can end up ordered out as a consequence of a log call being preempted by a higher priority task with other log statements. The following example shows how a log statement can be protected to ensure that the execution sequence is maintained in the ordering on the host-side.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/dpl/HwiP.h&gt;</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>key;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">key<sp/>=<sp/>HwiP_disable();</highlight></codeline>
<codeline><highlight class="normal">Log_printf(MyModule,<sp/>Log_DEBUG,<sp/>&quot;The<sp/>answer<sp/>is<sp/>%d&quot;,<sp/>42);</highlight></codeline>
<codeline><highlight class="normal">HwiP_restore(key);</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_log_sink_u_a_r_t_8h_1ti_log_LogSinkUART_Configuration"/><heading level="1">Configuration</heading>
</para><para>In order to use the LogSinkUART APIs, the application is required to provide sink-specific configuration in the ti_log_config.c file. The LogSinkUART interface defines a configuration data structure:</para><para><programlisting><codeline><highlight class="normal">typedef<sp/>struct<sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*object;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><sp/><sp/><sp/>*hwAttrs;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>LogSinkUART_Config;</highlight></codeline>
</programlisting></para><para>The application must declare an array of <ref refid="struct_log_sink_u_a_r_t___config" kindref="compound">LogSinkUART_Config</ref> elements, named <computeroutput>LogSinkUART_config</computeroutput>[]. Each element of <computeroutput>LogSinkUART_config</computeroutput>[] must be populated with pointers to a sink specific object, and hardware attributes. The hardware attributes define properties such as the UART peripheral&apos;s attributes, and a pointer to the intermediate ring buffer and its size. These are automatically assigned through SysConfig. Each element in <computeroutput>LogSinkUART_config</computeroutput>[] corresponds to a UART sink instance, and none of the elements should have NULL pointers.</para><para>The configuration for the UART LogSink is based on the driver&apos;s configuration. Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for driver configuration information.</para><para>To automatically initialize a UART sink when initializing the board, <ref refid="_log_sink_u_a_r_t_8h_1a9c1b1047b094b8b706cd774508d1c514" kindref="member">LogSinkUART_init()</ref> is called inside <ref refid="_board_8h_1a6c191e6138454022bba4dbcb4278f141" kindref="member">Board_init()</ref> in ti_drivers_config.c. To have access to the function and get the expansion of the sink name, include the following libraries:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;ti_log_config.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/log/LogSinkUART.h&gt;</highlight></codeline>
</programlisting> <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023-2024<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>-<sp/>http://www.ti.com</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogSinkUART.h</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;PRELIMINARY&lt;/b&gt;<sp/>LogSinkUART<sp/>interface</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>@warning<sp/>These<sp/>APIs<sp/>are<sp/>&lt;b&gt;PRELIMINARY&lt;/b&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>LogSinkUART<sp/>module<sp/>is<sp/>a<sp/>sink<sp/>that<sp/>can<sp/>be<sp/>used<sp/>in<sp/>conjunction<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>Log.h<sp/>API<sp/>in<sp/>source/ti/log/<sp/>and<sp/>the<sp/>logging<sp/>tools<sp/>available<sp/>in</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>tools/log/tiutils.<sp/>The<sp/>API<sp/>defined<sp/>in<sp/>this<sp/>file<sp/>is<sp/>made<sp/>available<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>Logging<sp/>framework<sp/>and<sp/>used<sp/>as<sp/>a<sp/>transport<sp/>layer<sp/>for<sp/>Log.h.<sp/>For<sp/>more</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>information<sp/>about<sp/>the<sp/>Log<sp/>API,<sp/>see<sp/>the<sp/>@ref<sp/>log<sp/>&quot;Log<sp/>documentation&quot;.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>use<sp/>the<sp/>UART<sp/>sink,<sp/>ensure<sp/>that<sp/>the<sp/>correct<sp/>library<sp/>for<sp/>your</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>device<sp/>is<sp/>linked<sp/>in<sp/>and<sp/>include<sp/>this<sp/>header<sp/>file<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/log/LogSinkUART.h&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>module<sp/>implements<sp/>two<sp/>functions<sp/>that<sp/>are<sp/>required<sp/>by<sp/>the<sp/>Log<sp/>API:</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>printf(const<sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numArgs,<sp/>...);</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>buf(const<sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*data,<sp/>size_t<sp/>size);</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>Whenever<sp/>a<sp/>log<sp/>statement<sp/>that<sp/>uses<sp/>LogSinkUART<sp/>as<sp/>its<sp/>sink<sp/>is<sp/>called,<sp/>the</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>log<sp/>module<sp/>delegates<sp/>to<sp/>one<sp/>of<sp/>the<sp/>functions<sp/>above.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_Overview</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>LogSinkUART<sp/>is<sp/>a<sp/>sink/transport<sp/>layer<sp/>that<sp/>asynchronously<sp/>outputs<sp/>encoded</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>log<sp/>statements<sp/>over<sp/>UART.<sp/>It<sp/>uses<sp/>the<sp/>UART2<sp/>driver<sp/>to<sp/>stream<sp/>data<sp/>out<sp/>onto<sp/>a</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>user-selectable<sp/>pin,<sp/>which<sp/>can<sp/>be<sp/>received<sp/>and<sp/>processed<sp/>by<sp/>a<sp/>host-side</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>tool.<sp/>For<sp/>more<sp/>information<sp/>about<sp/>the<sp/>host-side<sp/>tool,<sp/>see<sp/>tools/log/tiutils.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>At<sp/>the<sp/>log-site<sp/>the<sp/>sink<sp/>separates<sp/>the<sp/>generation<sp/>of<sp/>the<sp/>log<sp/>record<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>transportation<sp/>of<sp/>the<sp/>record<sp/>off<sp/>the<sp/>device.<sp/>Deferring<sp/>the<sp/>transportation<sp/>to</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>later<sp/>point<sp/>of<sp/>the<sp/>program<sp/>execution<sp/>is<sp/>done<sp/>to<sp/>minimize<sp/>the<sp/>runtime</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>intrusion<sp/>that<sp/>would<sp/>be<sp/>caused<sp/>by<sp/>synchronously<sp/>outputting<sp/>the<sp/>log</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>statements<sp/>through<sp/>the<sp/>relatively<sp/>slow<sp/>UART.<sp/>The<sp/>first<sp/>part<sp/>generates<sp/>and</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>stores<sp/>the<sp/>log<sp/>statements<sp/>into<sp/>an<sp/>intermediate<sp/>storage<sp/>synchronously.<sp/>The</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>second<sp/>part<sp/>uses<sp/>the<sp/>idle<sp/>task<sp/>of<sp/>the<sp/>OS,<sp/>executed<sp/>when<sp/>no<sp/>other<sp/>tasks<sp/>or</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>interrupts<sp/>are<sp/>running,<sp/>to<sp/>move<sp/>the<sp/>data<sp/>stored<sp/>in<sp/>the<sp/>intermediate<sp/>storage</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>off<sp/>the<sp/>device.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>By<sp/>transmitting<sp/>messages<sp/>asynchronously<sp/>the<sp/>readout<sp/>at<sp/>the<sp/>host-side<sp/>is</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>also<sp/>asynchronous.<sp/>As<sp/>a<sp/>consequence,<sp/>the<sp/>receiving<sp/>of<sp/>log<sp/>statements<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>host-side<sp/>can<sp/>be<sp/>deferred<sp/>from<sp/>their<sp/>execution<sp/>in<sp/>the<sp/>program.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>sink<sp/>requires<sp/>no<sp/>special<sp/>hardware<sp/>to<sp/>capture<sp/>and<sp/>decode<sp/>the<sp/>logs<sp/>beyond</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>basic<sp/>UART-to-USB<sp/>bridge.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>data<sp/>flow<sp/>at<sp/>a<sp/>high<sp/>level<sp/>is:</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>Log<sp/>statement<sp/>captured<sp/>at<sp/>the<sp/>log<sp/>site<sp/>with<sp/>timestamp</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Log<sp/>data<sp/>marshalled<sp/>into<sp/>a<sp/>log<sp/>packet</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>Log<sp/>packet<sp/>moved<sp/>to<sp/>ring<sp/>buffer<sp/>working<sp/>as<sp/>intermediate<sp/>storage</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>Intermediate<sp/>storage<sp/>flushed<sp/>via<sp/>the<sp/>UART2<sp/>driver<sp/>when<sp/>nothing<sp/>else</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>happening<sp/>through<sp/>a<sp/>function<sp/>installed<sp/>in<sp/>the<sp/>Idle-loop/task</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>5.<sp/>Data<sp/>sent<sp/>out<sp/>on<sp/>the<sp/>UART<sp/>line</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>6.<sp/>Data<sp/>received<sp/>by<sp/>listening<sp/>COM<sp/>port<sp/>on<sp/>host</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>7.<sp/>Data<sp/>decoded<sp/>by<sp/>host<sp/>and<sp/>fed<sp/>through<sp/>remainder<sp/>of<sp/>host<sp/>logging</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infrastructure</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>8.<sp/>Logs<sp/>visualised<sp/>in<sp/>Wireshark<sp/>or<sp/>dumped<sp/>to<sp/>console<sp/>/<sp/>log<sp/>file</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>Throughout<sp/>this<sp/>documentation<sp/>and<sp/>API<sp/>the<sp/>term<sp/>&quot;packet&quot;<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>instead<sp/>of<sp/>the<sp/>term<sp/>&quot;record&quot;.<sp/>Both<sp/>terms<sp/>are<sp/>equivalent<sp/>and<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>interchangeably.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_Considerations</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Considerations</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>using<sp/>this<sp/>sink<sp/>consider<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>The<sp/>number<sp/>of<sp/>sinks<sp/>is<sp/>limited<sp/>by<sp/>the<sp/>number<sp/>of<sp/>UART<sp/>peripherals<sp/>in</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>device.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>When<sp/>a<sp/>UART<sp/>instance<sp/>is<sp/>consumed<sp/>for<sp/>a<sp/>sink<sp/>it<sp/>can<sp/>not<sp/>be<sp/>used<sp/>for</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>operations.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>When<sp/>a<sp/>single<sp/>UART<sp/>LogSink<sp/>instance<sp/>is<sp/>used,<sp/>an<sp/>optimised<sp/>printf<sp/>is</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>that<sp/>reduces<sp/>the<sp/>footprint<sp/>of<sp/>each<sp/>#Log_printf<sp/>statement.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Each<sp/>UART<sp/>LogSink<sp/>will<sp/>create<sp/>its<sp/>own<sp/>Ring<sp/>Buffer.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>If<sp/>any<sp/>part<sp/>of<sp/>the<sp/>transmission<sp/>is<sp/>lost/not<sp/>received<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging-tool,<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>data<sp/>might<sp/>not<sp/>be<sp/>interpreted<sp/>correctly.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>9.54<sp/>hours<sp/>of<sp/>logging<sp/>timestamps<sp/>are<sp/>available<sp/>before<sp/>overflowing<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system<sp/>where<sp/>1<sp/>bit<sp/>=<sp/>8<sp/>us.<sp/>The<sp/>tick<sp/>period<sp/>for<sp/>each<sp/>device<sp/>can<sp/>be<sp/>read</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>the<sp/>multiplier<sp/>variable<sp/>in<sp/>TimestamP&lt;device&gt;.c<sp/>under</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel/freertos/dpl.<sp/>If<sp/>the<sp/>timestamp<sp/>overflows<sp/>it<sp/>will<sp/>go<sp/>back<sp/>to<sp/>0.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>The<sp/>LogSinkUART<sp/>sinks<sp/>are<sp/>flushed<sp/>in<sp/>the<sp/>order<sp/>they<sp/>are<sp/>instantiated. </highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>If<sp/>performance<sp/>issues<sp/>are<sp/>observed<sp/>either<sp/>increase<sp/>the<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART2<sp/>ring<sp/>buffer<sp/>to<sp/>increase<sp/>throughput<sp/>or<sp/>increase<sp/>the<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intermediate<sp/>ring<sp/>buffer<sp/>size<sp/>for<sp/>more<sp/>log<sp/>statements.<sp/>Also<sp/>note<sp/>that</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>device<sp/>needs<sp/>to<sp/>have<sp/>idle-time<sp/>to<sp/>automatically<sp/>flush<sp/>data.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>software<sp/>is<sp/>always<sp/>doing<sp/>something<sp/>then<sp/>nothing<sp/>will<sp/>ever<sp/>be<sp/>output.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>SRAM<sp/>requirements<sp/>scale<sp/>with<sp/>the<sp/>number<sp/>of<sp/>log<sp/>records<sp/>to<sp/>store<sp/>in</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>between<sp/>flushing<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>A<sp/>#Log_printf<sp/>call<sp/>has<sp/>an<sp/>execution<sp/>time<sp/>of<sp/>20<sp/>us<sp/>to<sp/>27.8<sp/>us<sp/>depending</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>the<sp/>number<sp/>of<sp/>arguments.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>A<sp/>Log_buf<sp/>call<sp/>has<sp/>a<sp/>minimum<sp/>execution<sp/>time<sp/>of<sp/>32.8<sp/>us<sp/>and<sp/>an</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>approximate<sp/>increase<sp/>of<sp/>0.183<sp/>us<sp/>per<sp/>byte<sp/>in<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_DesignArchitecture</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Design<sp/>Architecture</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>LogSinkUART<sp/>implementation<sp/>is<sp/>based<sp/>on<sp/>the<sp/>following<sp/>architecture.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Packet<sp/>Transmission<sp/>Format</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>All<sp/>log<sp/>packets<sp/>begin<sp/>with<sp/>a<sp/>32-bit<sp/>metadata<sp/>pointer<sp/>followed<sp/>by<sp/>a<sp/>32-bit</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>timestamp.<sp/>The<sp/>next<sp/>fields<sp/>depend<sp/>on<sp/>the<sp/>type<sp/>of<sp/>log<sp/>statement:</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Log_printf:<sp/>Variable<sp/>number<sp/>of<sp/>32-bit<sp/>arguments<sp/>that<sp/>range<sp/>from<sp/>0<sp/>to</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Log_buf:<sp/>32-bit<sp/>field<sp/>with<sp/>the<sp/>size<sp/>of<sp/>the<sp/>buffer<sp/>being<sp/>sent<sp/>followed</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>the<sp/>buffer<sp/>data.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/>@startuml</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>skinparam<sp/>useBetaStyle<sp/>true</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>&lt;style&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>timingDiagram<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>LineColor<sp/>#065959</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/>&lt;/style&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>concise<sp/>&quot;Log_printf<sp/>packet&quot;<sp/>as<sp/>LP</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>concise<sp/>&quot;Log_buf<sp/>packet&quot;<sp/>as<sp/>LB</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>hide<sp/>time-axis</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>scale<sp/>1<sp/>as<sp/>50<sp/>pixels</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>@LP</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>0<sp/>is<sp/>Metadata_Pointer<sp/>#FFCC99:<sp/>0:31</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>+4<sp/>is<sp/>Timestamp<sp/>#CC99FF:<sp/>32:63</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>+4<sp/>is<sp/>VA_Arg_0<sp/>#99CCFF:<sp/>64:95</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>+4<sp/>is<sp/>{-}<sp/>#99CCFF:<sp/>...</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/>+1<sp/>is<sp/>VA_Arg_n<sp/>#99CCFF:<sp/>32-bits</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>+4<sp/>is<sp/>{-}</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>@LB</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>0<sp/>is<sp/>Metadata_Pointer<sp/>#FFCC99:<sp/>0:31</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/>+4<sp/>is<sp/>Timestamp<sp/>#CC99FF:<sp/>32:63</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/>+4<sp/>is<sp/>Buffer_Size<sp/>#97D077:<sp/>64:95</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/>+4<sp/>is<sp/>Buffer_Data<sp/>#99CCFF</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/>+5<sp/>is<sp/>{-}</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/>@enduml</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>a<sp/>packet<sp/>would<sp/>overflow<sp/>the<sp/>ring<sp/>buffer,<sp/>a<sp/>32-bit<sp/>overflow<sp/>packet<sp/>is</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/>placed<sp/>instead.<sp/>It<sp/>is<sp/>the<sp/>original<sp/>metadata<sp/>pointer<sp/>modified<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/>identified<sp/>as<sp/>an<sp/>overflow<sp/>packet.<sp/>The<sp/>host-side<sp/>tool<sp/>decodes<sp/>it<sp/>and<sp/>displays</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/>an<sp/>overflow<sp/>message,<sp/>indicating<sp/>that<sp/>at<sp/>least<sp/>that<sp/>message<sp/>would<sp/>have</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>overflowed.<sp/>When<sp/>this<sp/>is<sp/>observed,<sp/>it<sp/>is<sp/>recommended<sp/>to<sp/>either<sp/>resize<sp/>the</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/>ring<sp/>buffer<sp/>or<sp/>disable<sp/>some<sp/>log<sp/>statements.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>If<sp/>the<sp/>intermediate<sp/>ring<sp/>buffer<sp/>is<sp/>full,<sp/>no<sp/>new<sp/>overflow<sp/>or<sp/>log</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>packets<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>Each<sp/>log<sp/>statement<sp/>used<sp/>will<sp/>occupy<sp/>the<sp/>following<sp/>amount<sp/>of<sp/>SRAM:</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>Log<sp/>statement<sp/>type<sp/>|<sp/>Log<sp/>statement<sp/>size<sp/>(bytes)<sp/><sp/>|</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/>------------------<sp/>|<sp/>---------------------------<sp/>|</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/>Log_printf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>8<sp/>+<sp/>4<sp/>*<sp/>number_of_arguments<sp/>|</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>Log_buf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>12<sp/>+<sp/>buffer_size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/>Overflow<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Packet<sp/>Framing</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>host-side<sp/>must<sp/>receive<sp/>and<sp/>properly<sp/>handle<sp/>a<sp/>continuous<sp/>stream<sp/>of<sp/>packets.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>is<sp/>able<sp/>to<sp/>decode<sp/>and<sp/>synchronize<sp/>packets.<sp/>If<sp/>the<sp/>first<sp/>32<sp/>bits<sp/>is<sp/>not<sp/>a</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>valid<sp/>metadata-pointer<sp/>address,<sp/>it<sp/>will<sp/>left-shift<sp/>byte-by-byte<sp/>until<sp/>it<sp/>detects</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>valid<sp/>one.<sp/>Once<sp/>a<sp/>metadata-pointer<sp/>address<sp/>is<sp/>verified,<sp/>the<sp/>host-side<sp/>tool</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/>knows<sp/>that<sp/>it<sp/>is<sp/>followed<sp/>by<sp/>a<sp/>timestamp.<sp/>The<sp/>number<sp/>of<sp/>arguments<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/>frame<sp/>is<sp/>extracted<sp/>from<sp/>the<sp/>.out<sp/>file.<sp/>This<sp/>determines<sp/>the<sp/>length<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/>current<sp/>packet<sp/>and<sp/>when<sp/>the<sp/>metadata-pointer<sp/>address<sp/>from<sp/>the<sp/>next<sp/>packet<sp/>is</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/>expected.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Flushing<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>hook<sp/>function<sp/>installed<sp/>in<sp/>the<sp/>Idle-loop/task<sp/>is<sp/>run<sp/>when<sp/>no<sp/>other<sp/>tasks</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/>or<sp/>interrupts<sp/>are<sp/>running.<sp/>It<sp/>flushes<sp/>as<sp/>many<sp/>log<sp/>packets<sp/>as<sp/>possible<sp/>from</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>intermediate<sp/>storage<sp/>via<sp/>the<sp/>UART2<sp/>driver<sp/>set<sp/>in<sp/>nonblocking<sp/>mode.<sp/>In</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>mode,<sp/>UART2_write()<sp/>will<sp/>copy<sp/>as<sp/>much<sp/>data<sp/>into<sp/>the<sp/>transmit<sp/>buffer<sp/>as</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/>space<sp/>allows<sp/>and<sp/>return<sp/>immediately.<sp/>The<sp/>maximum<sp/>space<sp/>allowed,<sp/>and</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/>therefore<sp/>the<sp/>amount<sp/>of<sp/>data<sp/>sent<sp/>out<sp/>every<sp/>time<sp/>that<sp/>the<sp/>hook<sp/>function<sp/>is</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/>called,<sp/>is<sp/>determined<sp/>by<sp/>the<sp/>size<sp/>of<sp/>the<sp/>TX<sp/>Ring<sp/>Buffer.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>Idle-loop/task<sp/>will<sp/>always<sp/>be<sp/>run<sp/>before<sp/>the<sp/>power<sp/>management<sp/>loop.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/>Since<sp/>each<sp/>OS<sp/>has<sp/>a<sp/>different<sp/>implementation<sp/>of<sp/>the<sp/>Idle-loop/task,<sp/>the</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/>installation<sp/>of<sp/>the<sp/>hook<sp/>function<sp/>will<sp/>also<sp/>be<sp/>different<sp/>for<sp/>each<sp/>OS.<sp/>The</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/>automatic<sp/>installation<sp/>is<sp/>currently<sp/>supported<sp/>for<sp/>FreeRTOS<sp/>and<sp/>TI-RTOS<sp/>7</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/>when<sp/>using<sp/>SysConfig.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_Usage</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>use<sp/>the<sp/>UART<sp/>LogSink<sp/>the<sp/>application<sp/>calls<sp/>the<sp/>following<sp/>APIs:</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>LogSinkUART_init():<sp/>Initialize<sp/>a<sp/>UART<sp/>sink.<sp/>This<sp/>function<sp/>takes<sp/>as</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>an<sp/>index<sp/>that<sp/>describes<sp/>the<sp/>sink<sp/>that<sp/>has<sp/>to<sp/>be<sp/>initialized.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>LogSinkUART_flush():<sp/>Function<sp/>to<sp/>flush<sp/>all<sp/>the<sp/>LogSinkUART<sp/>sinks<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>they<sp/>are<sp/>added.<sp/>For<sp/>each<sp/>sink<sp/>it<sp/>will<sp/>read<sp/>data<sp/>from<sp/>the<sp/>ring</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>and<sp/>put<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>on<sp/>the<sp/>UART<sp/>interface.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>LogSinkUART_finalize():<sp/>Finalize<sp/>a<sp/>UART<sp/>sink.<sp/>This<sp/>function<sp/>takes<sp/>as</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>an<sp/>index<sp/>that<sp/>describes<sp/>the<sp/>sink<sp/>that<sp/>has<sp/>to<sp/>be<sp/>finalized.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/>Details<sp/>on<sp/>usage<sp/>are<sp/>provided<sp/>in<sp/>the<sp/>following<sp/>subsections.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_Examples</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Examples<sp/>#</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>@ref<sp/>ti_log_LogSinkUART_initialize<sp/>&quot;Initializing<sp/>a<sp/>UART<sp/>LogSink&quot;</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>@ref<sp/>ti_log_LogSinkUART_flush<sp/>&quot;Flushing<sp/>UART<sp/>sinks&quot;</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>@ref<sp/>ti_log_LogSinkUART_finalize<sp/>&quot;Finalizing<sp/>a<sp/>UART<sp/>LogSink&quot;</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>@ref<sp/>ti_log_LogSinkUART_protect<sp/>&quot;Protect<sp/>log<sp/>statements&quot;</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_initialize</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Initializing<sp/>a<sp/>UART<sp/>LogSink</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>LogSinkUART<sp/>is<sp/>enabled<sp/>through<sp/>SysConfig,<sp/>then<sp/>LogSinkUART_init()<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/>automatically<sp/>called<sp/>from<sp/>Board_init().<sp/>If<sp/>SysConfig<sp/>is<sp/>not<sp/>used,<sp/>the<sp/>user</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/>must<sp/>initialize<sp/>the<sp/>log<sp/>sink.<sp/>LogSinkUART_init()<sp/>can<sp/>also<sp/>be<sp/>called<sp/>after<sp/>a</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/><sp/>sink<sp/>has<sp/>been<sp/>finalized<sp/>with<sp/>LogSinkUART_finalize().<sp/>To<sp/>initialize<sp/>a<sp/>sink,</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/><sp/>first<sp/>include<sp/>the<sp/>ti_log_config.h<sp/>library<sp/>containing<sp/>the<sp/>expansion<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/>sink<sp/>name.<sp/>Afterwards,<sp/>call<sp/>the<sp/>initialize<sp/>function<sp/>passing<sp/>as<sp/>an<sp/>argument</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>name<sp/>of<sp/>the<sp/>sink<sp/>to<sp/>be<sp/>initialized.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&quot;ti_log_config.h&quot;</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/>LogSinkUART_init(sink_name);</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_flush</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Flushing<sp/>UART<sp/>sinks</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/>LogSinkUART_flush()<sp/>will<sp/>be<sp/>called<sp/>automatically<sp/>in<sp/>the<sp/>Idle-loop/task<sp/>for</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/>FreeRTOS<sp/>and<sp/>TI-RTOS<sp/>7.<sp/>Despite<sp/>this,<sp/>the<sp/>user<sp/>can<sp/>still<sp/>manually<sp/>call<sp/>the</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>function<sp/>to<sp/>send<sp/>out<sp/>as<sp/>much<sp/>data<sp/>as<sp/>possible<sp/>from<sp/>all<sp/>the<sp/>existing<sp/>ring</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/>buffers<sp/>when<sp/>desired.<sp/>The<sp/>flush<sp/>function<sp/>can<sp/>be<sp/>called<sp/>from<sp/>either<sp/>a<sp/>task<sp/>or</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/>interrupt<sp/>context.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_finalize</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Finalizing<sp/>a<sp/>UART<sp/>LogSink</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>LogSinkUART_finalize()<sp/>will<sp/>cancel<sp/>all<sp/>ongoing<sp/>UART<sp/>writes<sp/>and<sp/>call</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/>UART2_close().<sp/>All<sp/>log<sp/>packets<sp/>remaining<sp/>in<sp/>the<sp/>intermediate<sp/>storage<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/>lost<sp/>when<sp/>calling<sp/>LogSinkUART_init()<sp/>because<sp/>the<sp/>ring<sp/>buffer<sp/>will<sp/>be<sp/>reset.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/>All<sp/>log<sp/>statements<sp/>after<sp/>a<sp/>finalize<sp/>call<sp/>will<sp/>also<sp/>be<sp/>lost<sp/>due<sp/>to<sp/>the<sp/>reset</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>the<sp/>ring<sp/>buffer<sp/>when<sp/>initializing<sp/>the<sp/>sink.<sp/>To<sp/>finalize<sp/>a<sp/>sink<sp/>first</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/>include<sp/>the<sp/><sp/>ti_log_config.h<sp/>library<sp/>containing<sp/>the<sp/>expansion<sp/>of<sp/>the<sp/>sink</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/>name.<sp/>Afterwards,<sp/>call<sp/>the<sp/>finalize<sp/>function<sp/>passing<sp/>as<sp/>an<sp/><sp/>argument<sp/>the</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/><sp/>name<sp/>of<sp/>the<sp/>sink<sp/>to<sp/>be<sp/>finalized.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&quot;ti_log_config.h&quot;</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/>LogSinkUART_finalize(sink_name);</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_protect</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Protect<sp/>log<sp/>statements</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>ensure<sp/>that<sp/>logs<sp/>are<sp/>correctly<sp/>ordered<sp/>when<sp/>put<sp/>back<sp/>together<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/>host,<sp/>log<sp/>statements<sp/>can<sp/>be<sp/>called<sp/>from<sp/>a<sp/>context<sp/>where<sp/>HWI<sp/>are<sp/>disabled.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>also<sp/>ensures<sp/>that<sp/>the<sp/>recorded<sp/>timestamp<sp/>is<sp/>faithful<sp/>to<sp/>when<sp/>the<sp/>log</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/><sp/>statement<sp/>was<sp/>executed.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/><sp/>Logs<sp/>can<sp/>end<sp/>up<sp/>ordered<sp/>out<sp/>as<sp/>a<sp/>consequence<sp/>of<sp/>a<sp/>log<sp/>call<sp/>being<sp/>preempted</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/><sp/>by<sp/>a<sp/>higher<sp/>priority<sp/>task<sp/>with<sp/>other<sp/>log<sp/>statements.<sp/>The<sp/>following<sp/>example</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/>shows<sp/>how<sp/>a<sp/>log<sp/>statement<sp/>can<sp/>be<sp/>protected<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>execution</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/><sp/>sequence<sp/>is<sp/>maintained<sp/>in<sp/>the<sp/>ordering<sp/>on<sp/>the<sp/>host-side.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/dpl/HwiP.h&gt;</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/><sp/>uint32_t<sp/>key;</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/><sp/>key<sp/>=<sp/>HwiP_disable();</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/><sp/>Log_printf(MyModule,<sp/>Log_DEBUG,<sp/>&quot;The<sp/>answer<sp/>is<sp/>%d&quot;,<sp/>42);</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/><sp/>HwiP_restore(key);</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_log_LogSinkUART_Configuration</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>order<sp/>to<sp/>use<sp/>the<sp/>LogSinkUART<sp/>APIs,<sp/>the<sp/>application<sp/>is<sp/>required<sp/>to<sp/>provide</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/><sp/>sink-specific<sp/>configuration<sp/>in<sp/>the<sp/>ti_log_config.c<sp/>file.<sp/>The<sp/>LogSinkUART</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/><sp/>interface<sp/>defines<sp/>a<sp/>configuration<sp/>data<sp/>structure:</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/><sp/>typedef<sp/>struct<sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*object;</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><sp/><sp/><sp/>*hwAttrs;</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/><sp/>}<sp/>LogSinkUART_Config;</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>application<sp/>must<sp/>declare<sp/>an<sp/>array<sp/>of<sp/>#LogSinkUART_Config<sp/>elements,<sp/>named</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/>@p<sp/>LogSinkUART_config[].<sp/><sp/>Each<sp/>element<sp/>of<sp/>@p<sp/>LogSinkUART_config[]<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/>populated<sp/>with<sp/>pointers<sp/>to<sp/>a<sp/>sink<sp/>specific<sp/>object,<sp/>and<sp/>hardware<sp/>attributes.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>hardware<sp/>attributes<sp/>define<sp/>properties<sp/>such<sp/>as<sp/>the<sp/>UART<sp/>peripheral&apos;s</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/><sp/>attributes,<sp/>and<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>intermediate<sp/>ring<sp/>buffer<sp/>and<sp/>its<sp/>size.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/><sp/>These<sp/>are<sp/>automatically<sp/>assigned<sp/>through<sp/>SysConfig.<sp/>Each<sp/>element<sp/>in</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/>@p<sp/>LogSinkUART_config[]<sp/>corresponds<sp/>to<sp/>a<sp/>UART<sp/>sink<sp/>instance,<sp/>and<sp/>none<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/><sp/>elements<sp/>should<sp/>have<sp/>NULL<sp/>pointers.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>configuration<sp/>for<sp/>the<sp/>UART<sp/>LogSink<sp/>is<sp/>based<sp/>on<sp/>the<sp/>driver&apos;s</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/><sp/>configuration.<sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/><sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section<sp/>for<sp/>driver<sp/>configuration<sp/>information.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>automatically<sp/>initialize<sp/>a<sp/>UART<sp/>sink<sp/>when<sp/>initializing<sp/>the<sp/>board,</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/><sp/>LogSinkUART_init()<sp/>is<sp/>called<sp/>inside<sp/>Board_init()<sp/>in<sp/>ti_drivers_config.c.<sp/>To</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/><sp/>have<sp/>access<sp/>to<sp/>the<sp/>function<sp/>and<sp/>get<sp/>the<sp/>expansion<sp/>of<sp/>the<sp/>sink<sp/>name,<sp/>include</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>following<sp/>libraries:</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&quot;ti_log_config.h&quot;</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/log/LogSinkUART.h&gt;</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/><sp/>============================================================================</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_log_LogSinkUART__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_log_LogSinkUART__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/log/Log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_u_a_r_t2_8h" kindref="compound">ti/drivers/UART2.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_ring_buf_8h" kindref="compound">ti/drivers/utils/RingBuf.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="_log_sink_u_a_r_t_8h_1ac679e435e04bde56398753bdcec55ff2" refkind="member"><highlight class="preprocessor">#define<sp/>Log_TI_LOG_SINK_UART_VERSION<sp/>0.1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="struct_log_sink_u_a_r_t___h_w_attrs" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368" refid="struct_log_sink_u_a_r_t___h_w_attrs_1a84f28916268db1eb9e08df2ff980eb4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_log_sink_u_a_r_t___h_w_attrs_1a84f28916268db1eb9e08df2ff980eb4d" kindref="member">bufPtr</ref>;<sp/></highlight></codeline>
<codeline lineno="369" refid="struct_log_sink_u_a_r_t___h_w_attrs_1ae3b93bec2c6a772e8ebb7b86b9eb72ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_log_sink_u_a_r_t___h_w_attrs_1ae3b93bec2c6a772e8ebb7b86b9eb72ad" kindref="member">bufSize</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370" refid="struct_log_sink_u_a_r_t___h_w_attrs_1a011d6185cd8aab286f087dca917df79b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_log_sink_u_a_r_t___h_w_attrs_1a011d6185cd8aab286f087dca917df79b" kindref="member">baudRate</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371" refid="struct_log_sink_u_a_r_t___h_w_attrs_1a029f1b3ee8aa1050220e73ab2ea9a009" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994d" kindref="member">UART2_Parity</ref><sp/><ref refid="struct_log_sink_u_a_r_t___h_w_attrs_1a029f1b3ee8aa1050220e73ab2ea9a009" kindref="member">parity</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372" refid="struct_log_sink_u_a_r_t___h_w_attrs_1aa5c387defc746ace1ef60cca1f778c6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_log_sink_u_a_r_t___h_w_attrs_1aa5c387defc746ace1ef60cca1f778c6d" kindref="member">uartIndex</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal">}<sp/><ref refid="struct_log_sink_u_a_r_t___h_w_attrs" kindref="compound">LogSinkUART_HWAttrs</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="struct_log_sink_u_a_r_t___object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382" refid="struct_log_sink_u_a_r_t___object_1a6b68cf53699aa4260709d7433786dea7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_u_a_r_t2___config__" kindref="compound">UART2_Handle</ref><sp/><ref refid="struct_log_sink_u_a_r_t___object_1a6b68cf53699aa4260709d7433786dea7" kindref="member">uartHandle</ref>;<sp/></highlight></codeline>
<codeline lineno="383" refid="struct_log_sink_u_a_r_t___object_1a1a132a36fbc3ab0012c2508d5e20e9b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_ring_buf___object" kindref="compound">RingBuf_Object</ref><sp/><ref refid="struct_log_sink_u_a_r_t___object_1a1a132a36fbc3ab0012c2508d5e20e9b3" kindref="member">ringObj</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal">}<sp/><ref refid="struct_log_sink_u_a_r_t___object" kindref="compound">LogSinkUART_Object</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="struct_log_sink_u_a_r_t___config" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396" refid="struct_log_sink_u_a_r_t___config_1aa75b7236c64b4777fbdd2a4f7b99a7b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_log_sink_u_a_r_t___config_1aa75b7236c64b4777fbdd2a4f7b99a7b0" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="398" refid="struct_log_sink_u_a_r_t___config_1a644968aaecd6b5315e1b904d70be1057" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_log_sink_u_a_r_t___config_1a644968aaecd6b5315e1b904d70be1057" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}<sp/><ref refid="struct_log_sink_u_a_r_t___config" kindref="compound">LogSinkUART_Config</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_log_sink_u_a_r_t___config" kindref="compound">LogSinkUART_Config</ref><sp/><ref refid="_log_sink_u_a_r_t_8h_1a234596f869caa19cc28c770545aac882" kindref="member">LogSinkUART_config</ref>[];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="struct_log_sink_u_a_r_t___instance" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416" refid="struct_log_sink_u_a_r_t___instance_1af0abd18298bd9ad07a8ba4c4fbfdd8b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_least8_t<sp/><ref refid="struct_log_sink_u_a_r_t___instance_1af0abd18298bd9ad07a8ba4c4fbfdd8b0" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}<sp/><ref refid="struct_log_sink_u_a_r_t___instance" kindref="compound">LogSinkUART_Instance</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="_log_sink_u_a_r_t_8h_1ab152d4c3b9cf998c4f85bc70b3c05f89" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_log_sink_u_a_r_t___instance" kindref="compound">LogSinkUART_Instance</ref><sp/>*<ref refid="_log_sink_u_a_r_t_8h_1ab152d4c3b9cf998c4f85bc70b3c05f89" kindref="member">LogSinkUART_Handle</ref>;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_log_sink_u_a_r_t_8h_1aaa81127b20cfa3f88df0f435cc5c932e" kindref="member">LogSinkUART_flush</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_log_sink_u_a_r_t_8h_1a9c1b1047b094b8b706cd774508d1c514" kindref="member">LogSinkUART_init</ref>(uint_least8_t<sp/>index);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_log_sink_u_a_r_t_8h_1a1a2c675dc927953a2f5bc6dc1c564ed5" kindref="member">LogSinkUART_finalize</ref>(uint_least8_t<sp/>index);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfSingleton(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>header,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>headerPtr,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numArgs,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfSingleton0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,<sp/>...);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfSingleton1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,<sp/>...);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfSingleton2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,<sp/>...);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfSingleton3(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,<sp/>...);</highlight></codeline>
<codeline lineno="537"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfDepInjection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>header,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>headerPtr,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numArgs,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfDepInjection0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,<sp/>...);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfDepInjection1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,<sp/>...);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfDepInjection2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,<sp/>...);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_printfDepInjection3(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,<sp/>uint32_t<sp/>header,<sp/>uint32_t<sp/>headerPtr,<sp/>...);</highlight></codeline>
<codeline lineno="577"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogSinkUART_bufDepInjection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log_Module<sp/>*handle,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>header,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>headerPtr,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*data,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="587" refid="_log_sink_u_a_r_t_8h_1a2a5cb6dc581c2c08f06259b42389ae96" refkind="member"><highlight class="preprocessor">#define<sp/>Log_SINK_UART_DEFINE(name)<sp/>LogSinkUART_Instance<sp/>LogSinkUART_##name##_Config<sp/>=<sp/>{.index<sp/>=<sp/>name}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="_log_sink_u_a_r_t_8h_1a48d312a1edf53bb5574d5f671ab2917a" refkind="member"><highlight class="preprocessor">#define<sp/>Log_SINK_UART_USE(name)<sp/>extern<sp/>LogSinkUART_Instance<sp/>LogSinkUART_##name##_Config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="_log_sink_u_a_r_t_8h_1a34b70fafc4d748f50abff56317a7d896" refkind="member"><highlight class="preprocessor">#define<sp/>Log_MODULE_INIT_SINK_UART(name,<sp/>_levels,<sp/>printfDelegate,<sp/>bufDelegate,<sp/>_dynamicLevelsPtr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="601"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sinkConfig<sp/>=<sp/>&amp;LogSinkUART_##name##_Config,<sp/>.printf<sp/>=<sp/>printfDelegate,<sp/>.printf0<sp/>=<sp/>printfDelegate##0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.printf1<sp/>=<sp/>printfDelegate##1,<sp/>.printf2<sp/>=<sp/>printfDelegate##2,<sp/>.printf3<sp/>=<sp/>printfDelegate##3,<sp/>.buf<sp/>=<sp/>bufDelegate,<sp/>\</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.levels<sp/>=<sp/>_levels,<sp/>.dynamicLevelsPtr<sp/>=<sp/>_dynamicLevelsPtr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="605"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><ref refid="_log_sink_buf_8h_1a300a302b833729a777222ab1745f5cd4" kindref="member">_Log_DEFINE_LOG_VERSION</ref>(LogSinkUART,<sp/><ref refid="_log_sink_u_a_r_t_8h_1ac679e435e04bde56398753bdcec55ff2" kindref="member">Log_TI_LOG_SINK_UART_VERSION</ref>);</highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_log_LogSinkUART__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/log/LogSinkUART.h"/>
  </compounddef>
</doxygen>
