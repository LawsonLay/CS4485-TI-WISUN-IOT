<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_c_a_n_m_c_a_n_8h" kind="file" language="C++">
    <compoundname>CANMCAN.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="_c_a_n_8h" local="no">ti/drivers/CAN.h</includes>
    <includes refid="_m_c_a_n_8h" local="no">third_party/mcan/MCAN.h</includes>
    <incdepgraph>
      <node id="540">
        <label>stdbool.h</label>
      </node>
      <node id="536">
        <label>stdint.h</label>
      </node>
      <node id="538">
        <label>stddef.h</label>
      </node>
      <node id="535">
        <label>CANMCAN.h</label>
        <link refid="_c_a_n_m_c_a_n_8h"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
      </node>
      <node id="542">
        <label>ti/devices/DeviceFamily.h</label>
      </node>
      <node id="541">
        <label>string.h</label>
      </node>
      <node id="539">
        <label>ti/drivers/utils/StructRingBuf.h</label>
        <link refid="_struct_ring_buf_8h"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="537">
        <label>ti/drivers/CAN.h</label>
        <link refid="_c_a_n_8h"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
      </node>
      <node id="544">
        <label>third_party/mcan/inc/MCAN_reg.h</label>
        <link refid="_m_c_a_n__reg_8h"/>
      </node>
      <node id="543">
        <label>third_party/mcan/MCAN.h</label>
        <link refid="_m_c_a_n_8h"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_c_a_n_m_c_a_n_8h_1a9fa9eeb8bee086761bdc5460ee5ada2d" prot="public" static="no">
        <name>MCAN_INT_SRC_RX_MASK</name>
        <initializer>((uint32_t)<ref refid="_m_c_a_n_8h_1a13f45e6d4aab566194dedceeea4fb95f" kindref="member">MCAN_INT_SRC_RX_FIFO0_NEW_MSG</ref> | (uint32_t)<ref refid="_m_c_a_n_8h_1afcce0925180c36710c36f913688b785f" kindref="member">MCAN_INT_SRC_RX_FIFO1_NEW_MSG</ref> | \
     (uint32_t)<ref refid="_m_c_a_n_8h_1adc579ec34e34726cbd86bd031a92c9d4" kindref="member">MCAN_INT_SRC_DEDICATED_RX_BUFF_MSG</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interrupt mask for all Rx sources (Rx FIFO 0, Rx FIFO 1, and dedicated Rx buffers). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/can/common/CANMCAN.h" line="53" column="9" bodyfile="source/ti/drivers/can/common/CANMCAN.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_c_a_n_m_c_a_n_8h_1a3a9c95a4bb38d6a6d9727b7c51259b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t CANMCAN_setBitTimingRaw</definition>
        <argsstring>(const CAN_BitRateTimingRaw *rawTiming)</argsstring>
        <name>CANMCAN_setBitTimingRaw</name>
        <param>
          <type>const <ref refid="struct_c_a_n___bit_rate_timing_raw" kindref="compound">CAN_BitRateTimingRaw</ref> *</type>
          <declname>rawTiming</declname>
        </param>
        <briefdescription>
<para>Sets the MCAN raw bit timing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rawTiming</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_c_a_n___bit_rate_timing_raw" kindref="compound">CAN_BitRateTimingRaw</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN_STATUS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CAN_STATUS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>if any timing values are invalid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/can/common/CANMCAN.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_m_c_a_n_8h_1a7a9001a7fece88eaf1905d7705ac54cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t CANMCAN_configMsgRam</definition>
        <argsstring>(const CAN_MsgRamConfig *config, uint32_t msgRamSize, bool enableCANFD)</argsstring>
        <name>CANMCAN_configMsgRam</name>
        <param>
          <type>const <ref refid="struct_c_a_n___msg_ram_config" kindref="compound">CAN_MsgRamConfig</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msgRamSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enableCANFD</declname>
        </param>
        <briefdescription>
<para>Configures the MCAN message RAM. </para>        </briefdescription>
        <detaileddescription>
<para>Configures the MCAN message RAM. If CAN FD is enabled, buffers are configured to support a max payload size of 64-bytes. Otherwise, the buffers are configured to support a max payload size of 8-bytes for classic CAN.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_c_a_n___msg_ram_config" kindref="compound">CAN_MsgRamConfig</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgRamSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the message RAM in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enableCANFD</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true if CAN FD is enabled, false otherwise.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN_STATUS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CAN_STATUS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>if the message RAM config is invalid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/can/common/CANMCAN.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_m_c_a_n_8h_1a6891de11459bcc53b1faae69a36c0197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t CANMCAN_getInterruptMask</definition>
        <argsstring>(uint32_t eventMask)</argsstring>
        <name>CANMCAN_getInterruptMask</name>
        <param>
          <type>uint32_t</type>
          <declname>eventMask</declname>
        </param>
        <briefdescription>
<para>Returns the MCAN interrupt mask based on the CAN event mask. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eventMask</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN event mask.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MCAN interrupt mask </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/can/common/CANMCAN.h" line="90" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Common CAN functions for MCAN configuration. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023-2024,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANMCAN.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Common<sp/>CAN<sp/>functions<sp/>for<sp/>MCAN<sp/>configuration</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*******************************************************************************</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_can_common_canmcan__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_can_common_canmcan__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_c_a_n_8h" kindref="compound">ti/drivers/CAN.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_m_c_a_n_8h" kindref="compound">third_party/mcan/MCAN.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="_c_a_n_m_c_a_n_8h_1a9fa9eeb8bee086761bdc5460ee5ada2d" refkind="member"><highlight class="preprocessor">#define<sp/>MCAN_INT_SRC_RX_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((uint32_t)MCAN_INT_SRC_RX_FIFO0_NEW_MSG<sp/>|<sp/>(uint32_t)MCAN_INT_SRC_RX_FIFO1_NEW_MSG<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(uint32_t)MCAN_INT_SRC_DEDICATED_RX_BUFF_MSG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">int_fast16_t<sp/><ref refid="_c_a_n_m_c_a_n_8h_1a3a9c95a4bb38d6a6d9727b7c51259b11" kindref="member">CANMCAN_setBitTimingRaw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n___bit_rate_timing_raw" kindref="compound">CAN_BitRateTimingRaw</ref><sp/>*rawTiming);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">int_fast16_t<sp/><ref refid="_c_a_n_m_c_a_n_8h_1a7a9001a7fece88eaf1905d7705ac54cd" kindref="member">CANMCAN_configMsgRam</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n___msg_ram_config" kindref="compound">CAN_MsgRamConfig</ref><sp/>*config,<sp/>uint32_t<sp/>msgRamSize,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableCANFD);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">uint32_t<sp/><ref refid="_c_a_n_m_c_a_n_8h_1a6891de11459bcc53b1faae69a36c0197" kindref="member">CANMCAN_getInterruptMask</ref>(uint32_t<sp/>eventMask);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_can_common_canmcan__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/can/common/CANMCAN.h"/>
  </compounddef>
</doxygen>
