<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_semaphore_p_8h" kind="file" language="C++">
    <compoundname>SemaphoreP.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includedby refid="_a_d_c_buf_c_c26_x2_8h" local="no">ADCBufCC26X2.h</includedby>
    <includedby refid="_a_d_c_buf_c_c26_x_x_8h" local="no">ADCBufCC26XX.h</includedby>
    <includedby refid="_a_e_s_c_c_m_c_c26_x4_8h" local="no">AESCCMCC26X4.h</includedby>
    <includedby refid="_a_e_s_c_c_m_c_c26_x_x_8h" local="no">AESCCMCC26XX.h</includedby>
    <includedby refid="_a_e_s_e_c_b_c_c26_x_x_8h" local="no">AESECBCC26XX.h</includedby>
    <includedby refid="_a_e_s_g_c_m_c_c26_x4_8h" local="no">AESGCMCC26X4.h</includedby>
    <includedby refid="_a_e_s_g_c_m_c_c26_x_x_8h" local="no">AESGCMCC26XX.h</includedby>
    <includedby refid="_crypto_c_c26_x4__ns_8h" local="no">CryptoCC26X4_ns.h</includedby>
    <includedby refid="_crypto_key_key_store___p_s_a__helpers_8h" local="no">CryptoKeyKeyStore_PSA_helpers.h</includedby>
    <includedby refid="_crypto_resource_c_c26_x_x_8h" local="no">CryptoResourceCC26XX.h</includedby>
    <includedby refid="_p_k_a_resource_c_c26_x_x_8h" local="no">PKAResourceCC26XX.h</includedby>
    <includedby refid="_e_c_d_h_c_c26_x2_8h" local="no">ECDHCC26X2.h</includedby>
    <includedby refid="_e_c_d_s_a_c_c26_x2_8h" local="no">ECDSACC26X2.h</includedby>
    <includedby refid="_i2_s_c_c26_x_x_8h" local="no">I2SCC26XX.h</includedby>
    <includedby refid="_p_d_m_c_c26_x_x_8h" local="no">PDMCC26XX.h</includedby>
    <includedby refid="_p_d_m_c_c26_x_x__util_8h" local="no">PDMCC26XX_util.h</includedby>
    <includedby refid="_s_d_s_p_i_8h" local="no">SDSPI.h</includedby>
    <includedby refid="_s_p_i_c_c26_x2_d_m_a_8h" local="no">SPICC26X2DMA.h</includedby>
    <includedby refid="_s_p_i_c_c26_x4_d_m_a_8h" local="no">SPICC26X4DMA.h</includedby>
    <includedby refid="_timer_c_c26_x_x_8h" local="no">TimerCC26XX.h</includedby>
    <includedby refid="_timer_8h" local="no">Timer.h</includedby>
    <includedby refid="_t_r_n_g_c_c26_x_x_8h" local="no">TRNGCC26XX.h</includedby>
    <includedby refid="_u_a_r_t2_8h" local="no">UART2.h</includedby>
    <includedby refid="_display_dogm1286_8h" local="no">DisplayDogm1286.h</includedby>
    <includedby refid="_display_sharp_8h" local="no">DisplaySharp.h</includedby>
    <includedby refid="_display_uart2_8h" local="no">DisplayUart2.h</includedby>
    <includedby refid="_l_c_d_dogm1286_8h" local="no">LCDDogm1286.h</includedby>
    <incdepgraph>
      <node id="1734">
        <label>stdbool.h</label>
      </node>
      <node id="1732">
        <label>SemaphoreP.h</label>
        <link refid="_semaphore_p_8h"/>
        <childnode refid="1733" relation="include">
        </childnode>
        <childnode refid="1734" relation="include">
        </childnode>
        <childnode refid="1735" relation="include">
        </childnode>
      </node>
      <node id="1733">
        <label>stdint.h</label>
      </node>
      <node id="1735">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1736">
        <label>SemaphoreP.h</label>
        <link refid="_semaphore_p_8h"/>
        <childnode refid="1737" relation="include">
        </childnode>
        <childnode refid="1738" relation="include">
        </childnode>
        <childnode refid="1739" relation="include">
        </childnode>
        <childnode refid="1740" relation="include">
        </childnode>
        <childnode refid="1741" relation="include">
        </childnode>
        <childnode refid="1742" relation="include">
        </childnode>
        <childnode refid="1743" relation="include">
        </childnode>
        <childnode refid="1744" relation="include">
        </childnode>
        <childnode refid="1745" relation="include">
        </childnode>
        <childnode refid="1746" relation="include">
        </childnode>
        <childnode refid="1747" relation="include">
        </childnode>
        <childnode refid="1748" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1750" relation="include">
        </childnode>
        <childnode refid="1751" relation="include">
        </childnode>
        <childnode refid="1752" relation="include">
        </childnode>
        <childnode refid="1753" relation="include">
        </childnode>
        <childnode refid="1754" relation="include">
        </childnode>
        <childnode refid="1755" relation="include">
        </childnode>
        <childnode refid="1756" relation="include">
        </childnode>
        <childnode refid="1757" relation="include">
        </childnode>
        <childnode refid="1759" relation="include">
        </childnode>
        <childnode refid="1762" relation="include">
        </childnode>
        <childnode refid="1767" relation="include">
        </childnode>
        <childnode refid="1768" relation="include">
        </childnode>
        <childnode refid="1766" relation="include">
        </childnode>
        <childnode refid="1769" relation="include">
        </childnode>
      </node>
      <node id="1756">
        <label>TimerCC26XX.h</label>
        <link refid="_timer_c_c26_x_x_8h"/>
      </node>
      <node id="1757">
        <label>Timer.h</label>
        <link refid="_timer_8h"/>
        <childnode refid="1756" relation="include">
        </childnode>
        <childnode refid="1758" relation="include">
        </childnode>
      </node>
      <node id="1759">
        <label>TRNGCC26XX.h</label>
        <link refid="_t_r_n_g_c_c26_x_x_8h"/>
        <childnode refid="1760" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1761" relation="include">
        </childnode>
      </node>
      <node id="1758">
        <label>TimerSupport.h</label>
        <link refid="_timer_support_8h"/>
      </node>
      <node id="1745">
        <label>CryptoKeyKeyStore_PSA_helpers.h</label>
        <link refid="_crypto_key_key_store___p_s_a__helpers_8h"/>
      </node>
      <node id="1743">
        <label>AESGCMCC26XX.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="1753">
        <label>SDSPI.h</label>
        <link refid="_s_d_s_p_i_8h"/>
      </node>
      <node id="1740">
        <label>AESCCMCC26XX.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="1751">
        <label>PDMCC26XX.h</label>
        <link refid="_p_d_m_c_c26_x_x_8h"/>
      </node>
      <node id="1737">
        <label>ADCBufCC26X2.h</label>
        <link refid="_a_d_c_buf_c_c26_x2_8h"/>
      </node>
      <node id="1763">
        <label>UART2CC26X2.h</label>
        <link refid="_u_a_r_t2_c_c26_x2_8h"/>
      </node>
      <node id="1742">
        <label>AESGCMCC26X4.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x4_8h"/>
      </node>
      <node id="1741">
        <label>AESECBCC26XX.h</label>
        <link refid="_a_e_s_e_c_b_c_c26_x_x_8h"/>
      </node>
      <node id="1769">
        <label>LCDDogm1286.h</label>
        <link refid="_l_c_d_dogm1286_8h"/>
        <childnode refid="1767" relation="include">
        </childnode>
      </node>
      <node id="1761">
        <label>RNGCC26XX.h</label>
        <link refid="_r_n_g_c_c26_x_x_8h"/>
      </node>
      <node id="1755">
        <label>SPICC26X4DMA.h</label>
        <link refid="_s_p_i_c_c26_x4_d_m_a_8h"/>
      </node>
      <node id="1747">
        <label>PKAResourceCC26XX.h</label>
        <link refid="_p_k_a_resource_c_c26_x_x_8h"/>
      </node>
      <node id="1739">
        <label>AESCCMCC26X4.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x4_8h"/>
      </node>
      <node id="1750">
        <label>I2SCC26XX.h</label>
        <link refid="_i2_s_c_c26_x_x_8h"/>
      </node>
      <node id="1768">
        <label>DisplaySharp.h</label>
        <link refid="_display_sharp_8h"/>
      </node>
      <node id="1746">
        <label>CryptoResourceCC26XX.h</label>
        <link refid="_crypto_resource_c_c26_x_x_8h"/>
      </node>
      <node id="1764">
        <label>UART2Support.h</label>
        <link refid="_u_a_r_t2_support_8h"/>
      </node>
      <node id="1767">
        <label>DisplayDogm1286.h</label>
        <link refid="_display_dogm1286_8h"/>
      </node>
      <node id="1752">
        <label>PDMCC26XX_util.h</label>
        <link refid="_p_d_m_c_c26_x_x__util_8h"/>
      </node>
      <node id="1738">
        <label>ADCBufCC26XX.h</label>
        <link refid="_a_d_c_buf_c_c26_x_x_8h"/>
      </node>
      <node id="1744">
        <label>CryptoCC26X4_ns.h</label>
        <link refid="_crypto_c_c26_x4__ns_8h"/>
      </node>
      <node id="1766">
        <label>DisplayUart2.h</label>
        <link refid="_display_uart2_8h"/>
      </node>
      <node id="1765">
        <label>LogSinkUART.h</label>
        <link refid="_log_sink_u_a_r_t_8h"/>
      </node>
      <node id="1749">
        <label>ECDSACC26X2.h</label>
        <link refid="_e_c_d_s_a_c_c26_x2_8h"/>
      </node>
      <node id="1748">
        <label>ECDHCC26X2.h</label>
        <link refid="_e_c_d_h_c_c26_x2_8h"/>
      </node>
      <node id="1754">
        <label>SPICC26X2DMA.h</label>
        <link refid="_s_p_i_c_c26_x2_d_m_a_8h"/>
      </node>
      <node id="1762">
        <label>UART2.h</label>
        <link refid="_u_a_r_t2_8h"/>
        <childnode refid="1763" relation="include">
        </childnode>
        <childnode refid="1764" relation="include">
        </childnode>
        <childnode refid="1765" relation="include">
        </childnode>
        <childnode refid="1766" relation="include">
        </childnode>
      </node>
      <node id="1760">
        <label>ECDSACC26X1.h</label>
        <link refid="_e_c_d_s_a_c_c26_x1_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="union_semaphore_p___struct" prot="public">SemaphoreP_Struct</innerclass>
    <innerclass refid="struct_semaphore_p___params" prot="public">SemaphoreP_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_semaphore_p_8h_1a63d5650645bc6b6c982b6904be690f7c" prot="public" static="no">
        <name>SemaphoreP_STRUCT_SIZE</name>
        <initializer>(80)</initializer>
        <briefdescription>
<para>Number of bytes greater than or equal to the size of any RTOS SemaphoreP object. </para>        </briefdescription>
        <detaileddescription>
<para>NoRTOS: 16 BIOS 6.x: 28 BIOS 7.x: 28 FreeRTOS: 80 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="76" column="9" bodyfile="source/ti/drivers/dpl/SemaphoreP.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_semaphore_p_8h_1a6d1991df030b91d441c8bc886739c29d" prot="public" static="no">
        <name>SemaphoreP_WAIT_FOREVER</name>
        <initializer>~(0)</initializer>
        <briefdescription>
<para>Wait forever define. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="93" column="9" bodyfile="source/ti/drivers/dpl/SemaphoreP.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_semaphore_p_8h_1a39cd521223b38fd00a334c57929c67c7" prot="public" static="no">
        <name>SemaphoreP_NO_WAIT</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>No wait define. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="98" column="9" bodyfile="source/ti/drivers/dpl/SemaphoreP.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42" prot="public" static="no">
        <name>SemaphoreP_Status</name>
        <enumvalue id="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42ac0da41b8e53bce919bbbec5aef644d42" prot="public">
          <name>SemaphoreP_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>API completed successfully </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42aaae2b0c8389e227faa6d8198879bd7ab" prot="public">
          <name>SemaphoreP_TIMEOUT</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>API failed because of a timeout </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Status codes for SemaphoreP APIs (for backwards compatibility) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="104" column="1" bodyfile="source/ti/drivers/dpl/SemaphoreP.h" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="enum" id="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ff" prot="public" static="no">
        <name>SemaphoreP_Mode</name>
        <enumvalue id="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ffabcde1f1674c15cf87e3d8b8e8de53091" prot="public">
          <name>SemaphoreP_Mode_COUNTING</name>
          <initializer>= 0x0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ffacf53dfcfc30e664856ba170da10bde91" prot="public">
          <name>SemaphoreP_Mode_BINARY</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Mode of the semaphore. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="124" column="1" bodyfile="source/ti/drivers/dpl/SemaphoreP.h" bodystart="123" bodyend="127"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_semaphore_p_8h_1a0c9392b07e581bb57de35335fadd6c4b" prot="public" static="no">
        <type>union <ref refid="union_semaphore_p___struct" kindref="compound">SemaphoreP_Struct</ref></type>
        <definition>typedef union SemaphoreP_Struct  SemaphoreP_Struct</definition>
        <argsstring></argsstring>
        <name>SemaphoreP_Struct</name>
        <briefdescription>
<para>SemaphoreP structure. </para>        </briefdescription>
        <detaileddescription>
<para>Opaque structure that should be large enough to hold any of the RTOS specific SemaphoreP objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* SemaphoreP_Handle</definition>
        <argsstring></argsstring>
        <name>SemaphoreP_Handle</name>
        <briefdescription>
<para>Opaque client reference to an instance of a SemaphoreP. </para>        </briefdescription>
        <detaileddescription>
<para>A SemaphoreP_Handle returned from the <ref refid="_semaphore_p_8h_1a3fd837348befa046554496e8da2a1fac" kindref="member">SemaphoreP_create</ref> represents that instance and is used in the other instance based functions (e.g. <ref refid="_semaphore_p_8h_1a88ae04fe7807a199d1bf06cea651474a" kindref="member">SemaphoreP_post</ref> or <ref refid="_semaphore_p_8h_1a375d7e0596970995eaa2c2bc77d7acb3" kindref="member">SemaphoreP_pend</ref>, etc.). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="118" column="1" bodyfile="source/ti/drivers/dpl/SemaphoreP.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_semaphore_p_8h_1affec26241628173d10535f83776af852" prot="public" static="no" mutable="no">
        <type><ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref></type>
        <definition>SemaphoreP_Params SemaphoreP_defaultParams</definition>
        <argsstring></argsstring>
        <name>SemaphoreP_defaultParams</name>
        <briefdescription>
<para>Default SemaphoreP instance parameters. </para>        </briefdescription>
        <detaileddescription>
<para>SemaphoreP_defaultParams represents the default parameters that are used when creating or constructing a SemaphoreP instance. <ref refid="_semaphore_p_8h_1a5a2deea3033e8a6aa2564637958efd02" kindref="member">SemaphoreP_Params_init()</ref> will use the contents of this structure for initializing the <ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref> instance.</para><para>SemaphoreP_defaultParams is exposed to the application for the purpose of allowing the application to change the default parameters for all SemaphoreP instances created thereafter. The main intent for allowing the default parameters to be changed is for setting a semaphore&apos;s callback function to <ref refid="_power_8h_1a873219012923300f3b3b958b951a4ea1" kindref="member">Power_idleFunc()</ref>, so that the SOC can enter low power mode when pending on a semaphore. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="159" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_semaphore_p_8h_1ac52ac240122975e1beba4c8242570109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" kindref="member">SemaphoreP_Handle</ref></type>
        <definition>SemaphoreP_Handle SemaphoreP_construct</definition>
        <argsstring>(SemaphoreP_Struct *handle, unsigned int count, SemaphoreP_Params *params)</argsstring>
        <name>SemaphoreP_construct</name>
        <param>
          <type><ref refid="union_semaphore_p___struct" kindref="compound">SemaphoreP_Struct</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_semaphore_p_8h_1ae7d738029d34bcfd73d28677c5c3ab39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" kindref="member">SemaphoreP_Handle</ref></type>
        <definition>SemaphoreP_Handle SemaphoreP_constructBinary</definition>
        <argsstring>(SemaphoreP_Struct *handle, unsigned int count)</argsstring>
        <name>SemaphoreP_constructBinary</name>
        <param>
          <type><ref refid="union_semaphore_p___struct" kindref="compound">SemaphoreP_Struct</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_semaphore_p_8h_1a52829e796d3921dc7d5676c7358433f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SemaphoreP_destruct</definition>
        <argsstring>(SemaphoreP_Struct *semP)</argsstring>
        <name>SemaphoreP_destruct</name>
        <param>
          <type><ref refid="union_semaphore_p___struct" kindref="compound">SemaphoreP_Struct</ref> *</type>
          <declname>semP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_semaphore_p_8h_1a3fd837348befa046554496e8da2a1fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" kindref="member">SemaphoreP_Handle</ref></type>
        <definition>SemaphoreP_Handle SemaphoreP_create</definition>
        <argsstring>(unsigned int count, SemaphoreP_Params *params)</argsstring>
        <name>SemaphoreP_create</name>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to create a semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial count of the semaphore. For binary semaphores, only values of 0 or 1 are valid.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. NULL denotes to use the default parameters (SemaphoreP default parameters as noted in <ref refid="_semaphore_p_8h_1a5a2deea3033e8a6aa2564637958efd02" kindref="member">SemaphoreP_Params_init</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SemaphoreP_Handle on success or a NULL on an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_semaphore_p_8h_1a16f027d115a88677dabec5a4f897c499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" kindref="member">SemaphoreP_Handle</ref></type>
        <definition>SemaphoreP_Handle SemaphoreP_createBinary</definition>
        <argsstring>(unsigned int count)</argsstring>
        <name>SemaphoreP_createBinary</name>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Function to create a binary semaphore. </para>        </briefdescription>
        <detaileddescription>
<para>This can be used instead of <ref refid="_semaphore_p_8h_1a3fd837348befa046554496e8da2a1fac" kindref="member">SemaphoreP_create()</ref> to create a binary semaphore.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial count of the binary semaphore. Only values of 0 or 1 are valid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SemaphoreP_Handle on success or a NULL on an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_semaphore_p_8h_1a79944db10033eb5288f5c458064d9f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" kindref="member">SemaphoreP_Handle</ref></type>
        <definition>SemaphoreP_Handle SemaphoreP_createBinaryCallback</definition>
        <argsstring>(unsigned int count, void(*callback)(void))</argsstring>
        <name>SemaphoreP_createBinaryCallback</name>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void(*)(void)</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Function to create a binary semaphore. </para>        </briefdescription>
        <detaileddescription>
<para>This can be used instead of <ref refid="_semaphore_p_8h_1a3fd837348befa046554496e8da2a1fac" kindref="member">SemaphoreP_create()</ref> to create a binary semaphore.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial count of the binary semaphore. Only values of 0 or 1 are valid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback while pending for semaphore post</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SemaphoreP_Handle on success or a NULL on an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_semaphore_p_8h_1a6f9c7a008f868969af5bb64bc896c771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SemaphoreP_delete</definition>
        <argsstring>(SemaphoreP_Handle handle)</argsstring>
        <name>SemaphoreP_delete</name>
        <param>
          <type><ref refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" kindref="member">SemaphoreP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to delete a semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A SemaphoreP_Handle returned from <ref refid="_semaphore_p_8h_1a3fd837348befa046554496e8da2a1fac" kindref="member">SemaphoreP_create</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_semaphore_p_8h_1a5a2deea3033e8a6aa2564637958efd02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SemaphoreP_Params_init</definition>
        <argsstring>(SemaphoreP_Params *params)</argsstring>
        <name>SemaphoreP_Params_init</name>
        <param>
          <type><ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize params structure to default values. </para>        </briefdescription>
        <detaileddescription>
<para>The default parameters are:<itemizedlist>
<listitem><para>mode: SemaphoreP_Mode_COUNTING</para></listitem><listitem><para>name: NULL</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_semaphore_p_8h_1a375d7e0596970995eaa2c2bc77d7acb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42" kindref="member">SemaphoreP_Status</ref></type>
        <definition>SemaphoreP_Status SemaphoreP_pend</definition>
        <argsstring>(SemaphoreP_Handle handle, uint32_t timeout)</argsstring>
        <name>SemaphoreP_pend</name>
        <param>
          <type><ref refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" kindref="member">SemaphoreP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Function to pend (wait) on a semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A SemaphoreP_Handle returned from <ref refid="_semaphore_p_8h_1a3fd837348befa046554496e8da2a1fac" kindref="member">SemaphoreP_create</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout (in ClockP ticks) to wait for the semaphore to be posted (signalled).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status of the functions<itemizedlist>
<listitem><para>SemaphoreP_OK: Obtained the semaphore</para></listitem><listitem><para>SemaphoreP_TIMEOUT: Timed out. Semaphore was not obtained. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_semaphore_p_8h_1a88ae04fe7807a199d1bf06cea651474a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SemaphoreP_post</definition>
        <argsstring>(SemaphoreP_Handle handle)</argsstring>
        <name>SemaphoreP_post</name>
        <param>
          <type><ref refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" kindref="member">SemaphoreP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to post (signal) a semaphore from task of ISR context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A SemaphoreP_Handle returned from <ref refid="_semaphore_p_8h_1a3fd837348befa046554496e8da2a1fac" kindref="member">SemaphoreP_create</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/SemaphoreP.h" line="250" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Semaphore module for the RTOS Porting Interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>Semaphores can be counting semaphores or binary semaphores. Counting semaphores keep track of the number of times the semaphore has been posted with post functions. This is useful, for example, if you have a group of resources that are shared between tasks. Such tasks might call pend() to see if a resource is available before using one. A count of zero for a counting semaphore denotes that it is not available. A positive count denotes how many times a SemaphoreP_pend can be called before it is blocked (or returns SemaphoreP_TIMEOUT).</para><para>Binary semaphores can have only two states: available (count = 1) and unavailable (count = 0). They can be used to share a single resource between tasks. They can also be used for a basic signalling mechanism, where the semaphore can be posted multiple times. Binary semaphores do not keep track of the count; they simply track whether the semaphore has been posted or not. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2023,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor">#ifndef<sp/>ti_dpl_SemaphoreP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_dpl_SemaphoreP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="_semaphore_p_8h_1a63d5650645bc6b6c982b6904be690f7c" refkind="member"><highlight class="preprocessor">#define<sp/>SemaphoreP_STRUCT_SIZE<sp/>(80)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="union_semaphore_p___struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_semaphore_p___struct" kindref="compound">SemaphoreP_Struct</ref></highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86" refid="union_semaphore_p___struct_1a8cae1722d25910c79959419defb2de7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="union_semaphore_p___struct_1a8cae1722d25910c79959419defb2de7f" kindref="member">dummy</ref>;<sp/></highlight></codeline>
<codeline lineno="87" refid="union_semaphore_p___struct_1ae5a45f303228e7f68b475e5c4dd0ad3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="union_semaphore_p___struct_1ae5a45f303228e7f68b475e5c4dd0ad3c" kindref="member">data</ref>[<ref refid="_semaphore_p_8h_1a63d5650645bc6b6c982b6904be690f7c" kindref="member">SemaphoreP_STRUCT_SIZE</ref>];</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}<sp/><ref refid="_semaphore_p_8h_1a0c9392b07e581bb57de35335fadd6c4b" kindref="member">SemaphoreP_Struct</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="_semaphore_p_8h_1a6d1991df030b91d441c8bc886739c29d" refkind="member"><highlight class="preprocessor">#define<sp/>SemaphoreP_WAIT_FOREVER<sp/>~(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="_semaphore_p_8h_1a39cd521223b38fd00a334c57929c67c7" refkind="member"><highlight class="preprocessor">#define<sp/>SemaphoreP_NO_WAIT<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106" refid="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42ac0da41b8e53bce919bbbec5aef644d42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42ac0da41b8e53bce919bbbec5aef644d42" kindref="member">SemaphoreP_OK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="108" refid="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42aaae2b0c8389e227faa6d8198879bd7ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42aaae2b0c8389e227faa6d8198879bd7ab" kindref="member">SemaphoreP_TIMEOUT</ref><sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/><ref refid="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42" kindref="member">SemaphoreP_Status</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_semaphore_p_8h_1a7f34865f33e666455692544e5f12d1f2" kindref="member">SemaphoreP_Handle</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ff" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125" refid="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ffabcde1f1674c15cf87e3d8b8e8de53091" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ffabcde1f1674c15cf87e3d8b8e8de53091" kindref="member">SemaphoreP_Mode_COUNTING</ref><sp/>=<sp/>0x0,</highlight></codeline>
<codeline lineno="126" refid="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ffacf53dfcfc30e664856ba170da10bde91" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ffacf53dfcfc30e664856ba170da10bde91" kindref="member">SemaphoreP_Mode_BINARY</ref><sp/><sp/><sp/>=<sp/>0x1</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}<sp/><ref refid="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ff" kindref="member">SemaphoreP_Mode</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="struct_semaphore_p___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140" refid="struct_semaphore_p___params_1a4d12bb8c19485dd4d4fe2616a41a9948" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_semaphore_p_8h_1add3b3b8c066d33d0067fac18e839f8ff" kindref="member">SemaphoreP_Mode</ref><sp/><ref refid="struct_semaphore_p___params_1a4d12bb8c19485dd4d4fe2616a41a9948" kindref="member">mode</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141" refid="struct_semaphore_p___params_1a72c5bad1e9109e8052446ff9d670a4cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*callback)(void);<sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}<sp/><ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref><sp/><ref refid="_semaphore_p_8h_1affec26241628173d10535f83776af852" kindref="member">SemaphoreP_defaultParams</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>SemaphoreP<sp/>construct<sp/>APIs<sp/>can<sp/>only<sp/>be<sp/>used<sp/>if<sp/>one<sp/>of<sp/>the<sp/>OS&apos;s</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>defined.<sp/><sp/>For<sp/>FreeRTOS,<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>also</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>has<sp/>to<sp/>be<sp/>set<sp/>to<sp/>1<sp/>in<sp/>FreeRTOSConfig.h.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SemaphoreP_Handle<sp/><ref refid="_semaphore_p_8h_1ac52ac240122975e1beba4c8242570109" kindref="member">SemaphoreP_construct</ref>(<ref refid="union_semaphore_p___struct" kindref="compound">SemaphoreP_Struct</ref><sp/>*handle,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/><ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SemaphoreP_Handle<sp/><ref refid="_semaphore_p_8h_1ae7d738029d34bcfd73d28677c5c3ab39" kindref="member">SemaphoreP_constructBinary</ref>(<ref refid="union_semaphore_p___struct" kindref="compound">SemaphoreP_Struct</ref><sp/>*handle,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_semaphore_p_8h_1a52829e796d3921dc7d5676c7358433f4" kindref="member">SemaphoreP_destruct</ref>(<ref refid="union_semaphore_p___struct" kindref="compound">SemaphoreP_Struct</ref><sp/>*semP);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SemaphoreP_Handle<sp/><ref refid="_semaphore_p_8h_1a3fd837348befa046554496e8da2a1fac" kindref="member">SemaphoreP_create</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/><ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SemaphoreP_Handle<sp/><ref refid="_semaphore_p_8h_1a16f027d115a88677dabec5a4f897c499" kindref="member">SemaphoreP_createBinary</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SemaphoreP_Handle<sp/><ref refid="_semaphore_p_8h_1a79944db10033eb5288f5c458064d9f14" kindref="member">SemaphoreP_createBinaryCallback</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_semaphore_p_8h_1a6f9c7a008f868969af5bb64bc896c771" kindref="member">SemaphoreP_delete</ref>(SemaphoreP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_semaphore_p_8h_1a5a2deea3033e8a6aa2564637958efd02" kindref="member">SemaphoreP_Params_init</ref>(<ref refid="struct_semaphore_p___params" kindref="compound">SemaphoreP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_semaphore_p_8h_1a5d4aebe0ebff4aaadba07d853ae4ee42" kindref="member">SemaphoreP_Status</ref><sp/><ref refid="_semaphore_p_8h_1a375d7e0596970995eaa2c2bc77d7acb3" kindref="member">SemaphoreP_pend</ref>(SemaphoreP_Handle<sp/>handle,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_semaphore_p_8h_1a88ae04fe7807a199d1bf06cea651474a" kindref="member">SemaphoreP_post</ref>(SemaphoreP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_dpl_SemaphoreP__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/dpl/SemaphoreP.h"/>
  </compounddef>
</doxygen>
