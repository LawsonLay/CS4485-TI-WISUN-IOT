<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_message_queue_p_8h" kind="file" language="C++">
    <compoundname>MessageQueueP.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">ti/devices/DeviceFamily.h</includes>
    <incdepgraph>
      <node id="1427">
        <label>stdbool.h</label>
      </node>
      <node id="1426">
        <label>stdint.h</label>
      </node>
      <node id="1425">
        <label>MessageQueueP.h</label>
        <link refid="_message_queue_p_8h"/>
        <childnode refid="1426" relation="include">
        </childnode>
        <childnode refid="1427" relation="include">
        </childnode>
        <childnode refid="1428" relation="include">
        </childnode>
        <childnode refid="1429" relation="include">
        </childnode>
      </node>
      <node id="1428">
        <label>stddef.h</label>
      </node>
      <node id="1429">
        <label>ti/devices/DeviceFamily.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="union_message_queue_p___struct" prot="public">MessageQueueP_Struct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_message_queue_p_8h_1a6b23df3028b0fa3351bc78cce162bed7" prot="public" static="no">
        <name>MessageQueueP_STRUCT_SIZE</name>
        <initializer>(104)</initializer>
        <briefdescription>
<para>Number of bytes greater than or equal to the size of any RTOS Queue/Mailbox data structure. </para>        </briefdescription>
        <detaileddescription>
<para>TI-RTOS7: 104 FreeRTOS: 80 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="66" column="9" bodyfile="source/ti/drivers/dpl/MessageQueueP.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_message_queue_p_8h_1ae89373bfd99f534afcdfee4708ad173e" prot="public" static="no">
        <name>MessageQueueP_BUFFER_SIZE</name>
        <param><defname>msgSize</defname></param>
        <param><defname>msgCount</defname></param>
        <initializer>((msgCount) * ((msgSize) + 8))</initializer>
        <briefdescription>
<para>Required number of bytes of a statically allocated message queue buffer. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is defined to support the user in configuring the size of a message queue buffer. A pointer to this user defined buffer is one of the arguments of the <ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct()</ref> function. The macro gives the minimal number of bytes required for the message queue. Please note the following for devices supporting TI-RTOS7:<itemizedlist>
<listitem><para>The macro takes into account an eight byte message header which is only required by TI-RTOS and not by FreeRTOS. For user applications only targeting FreeRTOS, SRAM usage can be limited by setting the buffer size to (msgCount * msgSize) instead of using this macro. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="85" column="13" bodyfile="source/ti/drivers/dpl/MessageQueueP.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_message_queue_p_8h_1a7392896aa9ef396bf8d0058ca6d44a18" prot="public" static="no">
        <name>MessageQueueP_WAIT_FOREVER</name>
        <initializer>~(0)</initializer>
        <briefdescription>
<para>Wait forever define. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="104" column="9" bodyfile="source/ti/drivers/dpl/MessageQueueP.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_message_queue_p_8h_1a847fdcb217054f3644d7b9bf4ecad5c0" prot="public" static="no">
        <name>MessageQueueP_NO_WAIT</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>No wait define. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="109" column="9" bodyfile="source/ti/drivers/dpl/MessageQueueP.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" prot="public" static="no">
        <name>MessageQueueP_Status</name>
        <enumvalue id="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ab1acc59dd44150ba675f0061692b451c" prot="public">
          <name>MessageQueueP_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>API completed successfully </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ae8af2c49070707e2f9869dd8fad7dfa9" prot="public">
          <name>MessageQueueP_TIMEOUT</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>API failed because of a timeout </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Status codes for MessageQueueP APIs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="115" column="1" bodyfile="source/ti/drivers/dpl/MessageQueueP.h" bodystart="114" bodyend="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_message_queue_p_8h_1a5d277db3da15b97abe8531e26c5bdd06" prot="public" static="no">
        <type>union <ref refid="union_message_queue_p___struct" kindref="compound">MessageQueueP_Struct</ref></type>
        <definition>typedef union MessageQueueP_Struct  MessageQueueP_Struct</definition>
        <argsstring></argsstring>
        <name>MessageQueueP_Struct</name>
        <briefdescription>
<para>MessageQueueP structure. </para>        </briefdescription>
        <detaileddescription>
<para>Opaque structure that should be large enough to hold any of the RTOS specific MessageQueueP objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* MessageQueueP_Handle</definition>
        <argsstring></argsstring>
        <name>MessageQueueP_Handle</name>
        <briefdescription>
<para>Opaque client reference to an instance of a MessageQueueP. </para>        </briefdescription>
        <detaileddescription>
<para>A MessageQueueP_Handle returned from <ref refid="_message_queue_p_8h_1a7158ccab7f730769818300c5653790a9" kindref="member">MessageQueueP_create()</ref> or <ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct()</ref> represents that instance. It is then is used in the other instance based functions (e.g. <ref refid="_message_queue_p_8h_1a4617a8c3b5e06b4ae31583cf15f0181d" kindref="member">MessageQueueP_pend()</ref>, <ref refid="_message_queue_p_8h_1a0ffc5103d6ac82ef2d3a9ca44fbfcb03" kindref="member">MessageQueueP_post()</ref>, etc.). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="130" column="1" bodyfile="source/ti/drivers/dpl/MessageQueueP.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_message_queue_p_8h_1a7158ccab7f730769818300c5653790a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
        <definition>MessageQueueP_Handle MessageQueueP_create</definition>
        <argsstring>(size_t msgSize, size_t msgCount)</argsstring>
        <name>MessageQueueP_create</name>
        <param>
          <type>size_t</type>
          <declname>msgSize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>msgCount</declname>
        </param>
        <briefdescription>
<para>Create a MessageQueueP, allocating memory on the heap. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_message_queue_p_8h_1a7158ccab7f730769818300c5653790a9" kindref="member">MessageQueueP_create</ref> creates a new message queue object. <ref refid="_message_queue_p_8h_1a7158ccab7f730769818300c5653790a9" kindref="member">MessageQueueP_create</ref> returns the handle of the new message queue object or NULL if the message queue could not be created.</para><para>The message queue object will be allocated on the heap - make sure you have a sufficiently large heap.</para><para><simplesect kind="note"><para>This API cannot be called from interrupt contexts.</para></simplesect>
For FreeRTOS, configSUPPORT_DYNAMIC_ALLOCATION has to be set to 1 in FreeRTOSConfig.h. See &apos;Configuration with FreeRTOS&apos; in the Core SDK User&apos;s Guide for how to do this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, required to hold each item in the message queue </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of items the message queue can hold at any one time</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>MessageQueueP</parametername>
</parameternamelist>
<parameterdescription>
<para>handle (NULL on failure) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
        <definition>MessageQueueP_Handle MessageQueueP_construct</definition>
        <argsstring>(MessageQueueP_Struct *queueStruct, size_t msgSize, size_t msgCount, void *msgBuf)</argsstring>
        <name>MessageQueueP_construct</name>
        <param>
          <type><ref refid="union_message_queue_p___struct" kindref="compound">MessageQueueP_Struct</ref> *</type>
          <declname>queueStruct</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>msgSize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>msgCount</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>msgBuf</declname>
        </param>
        <briefdescription>
<para>Construct a MessageQueueP from statically allocated memory. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct</ref> creates a new message queue object. <ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct</ref> returns the handle of the new message queue object or NULL if the message queue could not be created.</para><para>To use <ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct</ref> <emphasis>msgBuf</emphasis> must point to a valid preallocated memory array that is at least large enough to hold the maximum number of items that can be in the message queue at any one time.<itemizedlist>
<listitem><para>When used with FreeRTOS the array size must be at least ( <emphasis>msgCount</emphasis> * <emphasis>msgSize</emphasis>) bytes.</para></listitem><listitem><para>When used with TI-RTOS the array size must be at least ( <emphasis>msgCount</emphasis> * ( <emphasis>msgSize</emphasis> + 8)) bytes.</para></listitem><listitem><para>Since the buffer must be a aligned properly, it may be necessary to &apos;round up&apos; the total size of the buffer to the next multiple of the alignment for odd sized messages.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>This API cannot be called from interrupt contexts.</para></simplesect>
For FreeRTOS, configSUPPORT_STATIC_ALLOCATION has to be set to 1 in FreeRTOSConfig.h. See &apos;Configuration with FreeRTOS&apos; in the Core SDK User&apos;s Guide for how to do this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queueStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>Must point to a variable that holds the message queue&apos;s data structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, required to hold each item in the message queue </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of items the message queue can hold at any one time </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to variable that holds the message queue&apos;s data buffer</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>MessageQueueP</parametername>
</parameternamelist>
<parameterdescription>
<para>handle (NULL on failure) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_message_queue_p_8h_1abf1ded67a5b083c291ea93e89024b9d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MessageQueueP_delete</definition>
        <argsstring>(MessageQueueP_Handle handle)</argsstring>
        <name>MessageQueueP_delete</name>
        <param>
          <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Delete a MessageQueueP. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_message_queue_p_8h_1abf1ded67a5b083c291ea93e89024b9d6" kindref="member">MessageQueueP_delete</ref> finalizes and frees this previously allocated message queue object, setting the referenced handle to NULL. This function should be used when the message queue was created by the <ref refid="_message_queue_p_8h_1a7158ccab7f730769818300c5653790a9" kindref="member">MessageQueueP_create()</ref> function.</para><para><simplesect kind="note"><para>This API cannot be called from interrupt contexts.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the message queue to be deleted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_message_queue_p_8h_1a3b8d2ef3fbb2543061d5110548079331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MessageQueueP_destruct</definition>
        <argsstring>(MessageQueueP_Handle handle)</argsstring>
        <name>MessageQueueP_destruct</name>
        <param>
          <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Destruct a MessageQueueP. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_message_queue_p_8h_1a3b8d2ef3fbb2543061d5110548079331" kindref="member">MessageQueueP_destruct</ref> finalizes the message queue object inside the provided structure. This function should be used when the message queue was constructed by the <ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct()</ref> function.</para><para><simplesect kind="note"><para>This API cannot be called from interrupt contexts.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the message queue to be destructed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_message_queue_p_8h_1a4617a8c3b5e06b4ae31583cf15f0181d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" kindref="member">MessageQueueP_Status</ref></type>
        <definition>MessageQueueP_Status MessageQueueP_pend</definition>
        <argsstring>(MessageQueueP_Handle handle, void *message, uint32_t timeout)</argsstring>
        <name>MessageQueueP_pend</name>
        <param>
          <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receive an item from a message queue. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_message_queue_p_8h_1a4617a8c3b5e06b4ae31583cf15f0181d" kindref="member">MessageQueueP_pend</ref> receives an item from the provided message queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the message queue from which the item is to be received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer into which the received item will be copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum duration in system clock ticks a task should block waiting for an item to be received. When no wait or wait forever options are wanted the <ref refid="_message_queue_p_8h_1a847fdcb217054f3644d7b9bf4ecad5c0" kindref="member">MessageQueueP_NO_WAIT</ref> and <ref refid="_message_queue_p_8h_1a7392896aa9ef396bf8d0058ca6d44a18" kindref="member">MessageQueueP_WAIT_FOREVER</ref> defines can be used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Status</parametername>
</parameternamelist>
<parameterdescription>
<para>of the function<itemizedlist>
<listitem><para><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ab1acc59dd44150ba675f0061692b451c" kindref="member">MessageQueueP_OK</ref>: Item recieved</para></listitem><listitem><para><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ae8af2c49070707e2f9869dd8fad7dfa9" kindref="member">MessageQueueP_TIMEOUT</ref>: Timed out. Item was not recieved. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_message_queue_p_8h_1a7727296e87a5c5110ce0d03ff73b148b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" kindref="member">MessageQueueP_Status</ref></type>
        <definition>MessageQueueP_Status MessageQueueP_peek</definition>
        <argsstring>(MessageQueueP_Handle handle, void *message, uint32_t timeout)</argsstring>
        <name>MessageQueueP_peek</name>
        <param>
          <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receive an item from a message queue without removing the item from the queue. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_message_queue_p_8h_1a7727296e87a5c5110ce0d03ff73b148b" kindref="member">MessageQueueP_peek</ref> receives an item from the provided message queue without removing the item from the queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the message queue from which the item is to be received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer into which the received item will be copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum duraton in system clock ticks a task should block waiting for an item to be received. When no wait or wait forever options are wanted the <ref refid="_message_queue_p_8h_1a847fdcb217054f3644d7b9bf4ecad5c0" kindref="member">MessageQueueP_NO_WAIT</ref> and <ref refid="_message_queue_p_8h_1a7392896aa9ef396bf8d0058ca6d44a18" kindref="member">MessageQueueP_WAIT_FOREVER</ref> defines can be used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Status</parametername>
</parameternamelist>
<parameterdescription>
<para>of the function<itemizedlist>
<listitem><para><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ab1acc59dd44150ba675f0061692b451c" kindref="member">MessageQueueP_OK</ref>: Item recieved</para></listitem><listitem><para><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ae8af2c49070707e2f9869dd8fad7dfa9" kindref="member">MessageQueueP_TIMEOUT</ref>: Timed out. Item was not recieved. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_message_queue_p_8h_1a0ffc5103d6ac82ef2d3a9ca44fbfcb03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" kindref="member">MessageQueueP_Status</ref></type>
        <definition>MessageQueueP_Status MessageQueueP_post</definition>
        <argsstring>(MessageQueueP_Handle handle, const void *message, uint32_t timeout)</argsstring>
        <name>MessageQueueP_post</name>
        <param>
          <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Post an item on a message queue. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_message_queue_p_8h_1a0ffc5103d6ac82ef2d3a9ca44fbfcb03" kindref="member">MessageQueueP_post</ref> posts an item on the provided message queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the message queue to which the item is to be posted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer from which the item to be posted is copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum duraton in system clock ticks a task should block waiting for an item to be posted. When no wait or wait forever options are wanted the <ref refid="_message_queue_p_8h_1a847fdcb217054f3644d7b9bf4ecad5c0" kindref="member">MessageQueueP_NO_WAIT</ref> and <ref refid="_message_queue_p_8h_1a7392896aa9ef396bf8d0058ca6d44a18" kindref="member">MessageQueueP_WAIT_FOREVER</ref> defines can be used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Status</parametername>
</parameternamelist>
<parameterdescription>
<para>of the function<itemizedlist>
<listitem><para><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ab1acc59dd44150ba675f0061692b451c" kindref="member">MessageQueueP_OK</ref>: Item posted</para></listitem><listitem><para><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ae8af2c49070707e2f9869dd8fad7dfa9" kindref="member">MessageQueueP_TIMEOUT</ref>: Timed out. Item was not posted. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_message_queue_p_8h_1a03281c13a3cbe5b1893832ceafc5e7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" kindref="member">MessageQueueP_Status</ref></type>
        <definition>MessageQueueP_Status MessageQueueP_postFront</definition>
        <argsstring>(MessageQueueP_Handle handle, const void *message, uint32_t timeout)</argsstring>
        <name>MessageQueueP_postFront</name>
        <param>
          <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Post an item in the front of a message queue. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_message_queue_p_8h_1a03281c13a3cbe5b1893832ceafc5e7de" kindref="member">MessageQueueP_postFront</ref> posts an item in the front of the provided message queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the message queue to which the item is to be posted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer from which the item to be posted is copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum duraton in system clock ticks a task should block waiting for an item to be posted. When no wait or wait forever options are wanted the <ref refid="_message_queue_p_8h_1a847fdcb217054f3644d7b9bf4ecad5c0" kindref="member">MessageQueueP_NO_WAIT</ref> and <ref refid="_message_queue_p_8h_1a7392896aa9ef396bf8d0058ca6d44a18" kindref="member">MessageQueueP_WAIT_FOREVER</ref> defines can be used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Status</parametername>
</parameternamelist>
<parameterdescription>
<para>of the function<itemizedlist>
<listitem><para><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ab1acc59dd44150ba675f0061692b451c" kindref="member">MessageQueueP_OK</ref>: Item posted</para></listitem><listitem><para><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ae8af2c49070707e2f9869dd8fad7dfa9" kindref="member">MessageQueueP_TIMEOUT</ref>: Timed out. Item was not posted. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_message_queue_p_8h_1a6774e75a83a6775bf2435a5d0720bf43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t MessageQueueP_getPendingCount</definition>
        <argsstring>(MessageQueueP_Handle handle)</argsstring>
        <name>MessageQueueP_getPendingCount</name>
        <param>
          <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Get the number of messages stored in a message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of messages in the specified message queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A MessageQueueP_Handle returned from <ref refid="_message_queue_p_8h_1a7158ccab7f730769818300c5653790a9" kindref="member">MessageQueueP_create()</ref> or <ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>of stored messages in the specified message queue </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_message_queue_p_8h_1a7dc4f36cf1130bbc5c5b83e1610cda45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t MessageQueueP_getFreeCount</definition>
        <argsstring>(MessageQueueP_Handle handle)</argsstring>
        <name>MessageQueueP_getFreeCount</name>
        <param>
          <type><ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Get the number of free spaces in a message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of free spaces in the specified message queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A MessageQueueP_Handle returned from <ref refid="_message_queue_p_8h_1a7158ccab7f730769818300c5653790a9" kindref="member">MessageQueueP_create()</ref> or <ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>of free spaces in the specified message queue </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/MessageQueueP.h" line="308" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>MessageQueue module for the RTOS Porting Interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>MessageQueueP objects are RTOS message queues backed by OS-specific queue or mailbox objects.</para><para>Message queues can be used for intertask communication. They support sending messages between tasks, and between interrupts and tasks. Message queues can either be allocated statically with <ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct()</ref> or dynamically with <ref refid="_message_queue_p_8h_1a7158ccab7f730769818300c5653790a9" kindref="member">MessageQueueP_create()</ref>. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023-2024,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor">#ifndef<sp/>ti_dpl_MessageQueueP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_dpl_MessageQueueP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/devices/DeviceFamily.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="_message_queue_p_8h_1a6b23df3028b0fa3351bc78cce162bed7" refkind="member"><highlight class="preprocessor">#define<sp/>MessageQueueP_STRUCT_SIZE<sp/>(104)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor">#if<sp/>((DeviceFamily_PARENT<sp/>==<sp/>DeviceFamily_PARENT_CC13X0_CC26X0)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(DeviceFamily_PARENT<sp/>==<sp/>DeviceFamily_PARENT_CC13X2_CC26X2)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(DeviceFamily_PARENT<sp/>==<sp/>DeviceFamily_PARENT_CC13X1_CC26X1)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(DeviceFamily_PARENT<sp/>==<sp/>DeviceFamily_PARENT_CC13X4_CC26X3_CC26X4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="_message_queue_p_8h_1ae89373bfd99f534afcdfee4708ad173e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MessageQueueP_BUFFER_SIZE(msgSize,<sp/>msgCount)<sp/>((msgCount)<sp/>*<sp/>((msgSize)<sp/>+<sp/>8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MessageQueueP_BUFFER_SIZE(msgSize,<sp/>msgCount)<sp/>((msgCount)<sp/>*<sp/>(msgSize))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="union_message_queue_p___struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_message_queue_p___struct" kindref="compound">MessageQueueP_Struct</ref></highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97" refid="union_message_queue_p___struct_1a5ca5a8479868103f04287bfe852414ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="union_message_queue_p___struct_1a5ca5a8479868103f04287bfe852414ca" kindref="member">dummy</ref>;<sp/></highlight></codeline>
<codeline lineno="98" refid="union_message_queue_p___struct_1a0fcae4848aa3c5bfe09fbc5fe6e8a423" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="union_message_queue_p___struct_1a0fcae4848aa3c5bfe09fbc5fe6e8a423" kindref="member">data</ref>[<ref refid="_message_queue_p_8h_1a6b23df3028b0fa3351bc78cce162bed7" kindref="member">MessageQueueP_STRUCT_SIZE</ref>];</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}<sp/><ref refid="_message_queue_p_8h_1a5d277db3da15b97abe8531e26c5bdd06" kindref="member">MessageQueueP_Struct</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="_message_queue_p_8h_1a7392896aa9ef396bf8d0058ca6d44a18" refkind="member"><highlight class="preprocessor">#define<sp/>MessageQueueP_WAIT_FOREVER<sp/>~(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="_message_queue_p_8h_1a847fdcb217054f3644d7b9bf4ecad5c0" refkind="member"><highlight class="preprocessor">#define<sp/>MessageQueueP_NO_WAIT<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117" refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ab1acc59dd44150ba675f0061692b451c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ab1acc59dd44150ba675f0061692b451c" kindref="member">MessageQueueP_OK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="119" refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ae8af2c49070707e2f9869dd8fad7dfa9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941ae8af2c49070707e2f9869dd8fad7dfa9" kindref="member">MessageQueueP_TIMEOUT</ref><sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" kindref="member">MessageQueueP_Status</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_message_queue_p_8h_1aff6fd0c582c36e4048ad49c5a3c53260" kindref="member">MessageQueueP_Handle</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>MessageQueueP_Handle<sp/><ref refid="_message_queue_p_8h_1a7158ccab7f730769818300c5653790a9" kindref="member">MessageQueueP_create</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msgSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msgCount);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">MessageQueueP_Handle<sp/><ref refid="_message_queue_p_8h_1ac41578c38b89f8acff5e53668cba7c8a" kindref="member">MessageQueueP_construct</ref>(<ref refid="union_message_queue_p___struct" kindref="compound">MessageQueueP_Struct</ref><sp/>*queueStruct,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msgSize,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msgCount,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*msgBuf);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_message_queue_p_8h_1abf1ded67a5b083c291ea93e89024b9d6" kindref="member">MessageQueueP_delete</ref>(MessageQueueP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_message_queue_p_8h_1a3b8d2ef3fbb2543061d5110548079331" kindref="member">MessageQueueP_destruct</ref>(MessageQueueP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" kindref="member">MessageQueueP_Status</ref><sp/><ref refid="_message_queue_p_8h_1a4617a8c3b5e06b4ae31583cf15f0181d" kindref="member">MessageQueueP_pend</ref>(MessageQueueP_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*message,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" kindref="member">MessageQueueP_Status</ref><sp/><ref refid="_message_queue_p_8h_1a7727296e87a5c5110ce0d03ff73b148b" kindref="member">MessageQueueP_peek</ref>(MessageQueueP_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*message,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" kindref="member">MessageQueueP_Status</ref><sp/><ref refid="_message_queue_p_8h_1a0ffc5103d6ac82ef2d3a9ca44fbfcb03" kindref="member">MessageQueueP_post</ref>(MessageQueueP_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*message,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_message_queue_p_8h_1a59425e8ef830dddb3040118285284941" kindref="member">MessageQueueP_Status</ref><sp/><ref refid="_message_queue_p_8h_1a03281c13a3cbe5b1893832ceafc5e7de" kindref="member">MessageQueueP_postFront</ref>(MessageQueueP_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*message,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_message_queue_p_8h_1a6774e75a83a6775bf2435a5d0720bf43" kindref="member">MessageQueueP_getPendingCount</ref>(MessageQueueP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_message_queue_p_8h_1a7dc4f36cf1130bbc5c5b83e1610cda45" kindref="member">MessageQueueP_getFreeCount</ref>(MessageQueueP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_dpl_MessageQueueP__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/dpl/MessageQueueP.h"/>
  </compounddef>
</doxygen>
