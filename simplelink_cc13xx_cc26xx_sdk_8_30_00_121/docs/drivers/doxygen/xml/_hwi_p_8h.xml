<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_hwi_p_8h" kind="file" language="C++">
    <compoundname>HwiP.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includedby refid="_a_d_c_buf_c_c26_x2_8h" local="no">ADCBufCC26X2.h</includedby>
    <includedby refid="_a_d_c_buf_c_c26_x_x_8h" local="no">ADCBufCC26XX.h</includedby>
    <includedby refid="_a_e_s_c_c_m_c_c26_x4_8h" local="no">AESCCMCC26X4.h</includedby>
    <includedby refid="_a_e_s_c_c_m_c_c26_x_x_8h" local="no">AESCCMCC26XX.h</includedby>
    <includedby refid="_a_e_s_e_c_b_c_c26_x_x_8h" local="no">AESECBCC26XX.h</includedby>
    <includedby refid="_a_e_s_g_c_m_c_c26_x4_8h" local="no">AESGCMCC26X4.h</includedby>
    <includedby refid="_a_e_s_g_c_m_c_c26_x_x_8h" local="no">AESGCMCC26XX.h</includedby>
    <includedby refid="_crypto_resource_c_c26_x_x_8h" local="no">CryptoResourceCC26XX.h</includedby>
    <includedby refid="_e_c_d_h_c_c26_x2_8h" local="no">ECDHCC26X2.h</includedby>
    <includedby refid="_e_c_d_s_a_c_c26_x2_8h" local="no">ECDSACC26X2.h</includedby>
    <includedby refid="_i2_s_c_c26_x_x_8h" local="no">I2SCC26XX.h</includedby>
    <includedby refid="_p_d_m_c_c26_x_x_8h" local="no">PDMCC26XX.h</includedby>
    <includedby refid="_p_d_m_c_c26_x_x__util_8h" local="no">PDMCC26XX_util.h</includedby>
    <includedby refid="_power_c_c26_x2_8h" local="no">PowerCC26X2.h</includedby>
    <includedby refid="_power_c_c26_x_x_8h" local="no">PowerCC26XX.h</includedby>
    <includedby refid="_s_p_i_c_c26_x2_d_m_a_8h" local="no">SPICC26X2DMA.h</includedby>
    <includedby refid="_s_p_i_c_c26_x4_d_m_a_8h" local="no">SPICC26X4DMA.h</includedby>
    <includedby refid="_g_p_timer_c_c26_x_x_8h" local="no">GPTimerCC26XX.h</includedby>
    <includedby refid="_timer_8h" local="no">Timer.h</includedby>
    <includedby refid="_t_r_n_g_c_c26_x_x_8h" local="no">TRNGCC26XX.h</includedby>
    <includedby refid="_u_a_r_t2_8h" local="no">UART2.h</includedby>
    <includedby refid="_watchdog_c_c26_x4_8h" local="no">WatchdogCC26X4.h</includedby>
    <includedby refid="_watchdog_c_c26_x_x_8h" local="no">WatchdogCC26XX.h</includedby>
    <incdepgraph>
      <node id="1205">
        <label>stdbool.h</label>
      </node>
      <node id="1204">
        <label>stdint.h</label>
      </node>
      <node id="1206">
        <label>stddef.h</label>
      </node>
      <node id="1203">
        <label>HwiP.h</label>
        <link refid="_hwi_p_8h"/>
        <childnode refid="1204" relation="include">
        </childnode>
        <childnode refid="1205" relation="include">
        </childnode>
        <childnode refid="1206" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1232">
        <label>TimerCC26XX.h</label>
        <link refid="_timer_c_c26_x_x_8h"/>
      </node>
      <node id="1231">
        <label>Timer.h</label>
        <link refid="_timer_8h"/>
        <childnode refid="1232" relation="include">
        </childnode>
        <childnode refid="1233" relation="include">
        </childnode>
      </node>
      <node id="1234">
        <label>TRNGCC26XX.h</label>
        <link refid="_t_r_n_g_c_c26_x_x_8h"/>
        <childnode refid="1235" relation="include">
        </childnode>
        <childnode refid="1217" relation="include">
        </childnode>
        <childnode refid="1236" relation="include">
        </childnode>
      </node>
      <node id="1241">
        <label>GPTimerCC26XX.h</label>
        <link refid="_g_p_timer_c_c26_x_x_8h"/>
        <childnode refid="1208" relation="include">
        </childnode>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1242" relation="include">
        </childnode>
        <childnode refid="1232" relation="include">
        </childnode>
      </node>
      <node id="1233">
        <label>TimerSupport.h</label>
        <link refid="_timer_support_8h"/>
      </node>
      <node id="1214">
        <label>AESGCMCC26XX.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="1230">
        <label>Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="1223" relation="include">
        </childnode>
        <childnode refid="1208" relation="include">
        </childnode>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1210" relation="include">
        </childnode>
        <childnode refid="1211" relation="include">
        </childnode>
        <childnode refid="1212" relation="include">
        </childnode>
        <childnode refid="1213" relation="include">
        </childnode>
        <childnode refid="1214" relation="include">
        </childnode>
        <childnode refid="1224" relation="include">
        </childnode>
        <childnode refid="1225" relation="include">
        </childnode>
        <childnode refid="1216" relation="include">
        </childnode>
        <childnode refid="1217" relation="include">
        </childnode>
        <childnode refid="1229" relation="include">
        </childnode>
        <childnode refid="1218" relation="include">
        </childnode>
        <childnode refid="1219" relation="include">
        </childnode>
        <childnode refid="1220" relation="include">
        </childnode>
        <childnode refid="1221" relation="include">
        </childnode>
        <childnode refid="1222" relation="include">
        </childnode>
        <childnode refid="1226" relation="include">
        </childnode>
        <childnode refid="1227" relation="include">
        </childnode>
        <childnode refid="1231" relation="include">
        </childnode>
        <childnode refid="1234" relation="include">
        </childnode>
        <childnode refid="1237" relation="include">
        </childnode>
      </node>
      <node id="1224">
        <label>DACCC26X2.h</label>
        <link refid="_d_a_c_c_c26_x2_8h"/>
      </node>
      <node id="1211">
        <label>AESCCMCC26XX.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="1219">
        <label>PDMCC26XX.h</label>
        <link refid="_p_d_m_c_c26_x_x_8h"/>
      </node>
      <node id="1208">
        <label>ADCBufCC26X2.h</label>
        <link refid="_a_d_c_buf_c_c26_x2_8h"/>
      </node>
      <node id="1207">
        <label>HwiP.h</label>
        <link refid="_hwi_p_8h"/>
        <childnode refid="1208" relation="include">
        </childnode>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1210" relation="include">
        </childnode>
        <childnode refid="1211" relation="include">
        </childnode>
        <childnode refid="1212" relation="include">
        </childnode>
        <childnode refid="1213" relation="include">
        </childnode>
        <childnode refid="1214" relation="include">
        </childnode>
        <childnode refid="1215" relation="include">
        </childnode>
        <childnode refid="1216" relation="include">
        </childnode>
        <childnode refid="1217" relation="include">
        </childnode>
        <childnode refid="1218" relation="include">
        </childnode>
        <childnode refid="1219" relation="include">
        </childnode>
        <childnode refid="1220" relation="include">
        </childnode>
        <childnode refid="1221" relation="include">
        </childnode>
        <childnode refid="1222" relation="include">
        </childnode>
        <childnode refid="1226" relation="include">
        </childnode>
        <childnode refid="1227" relation="include">
        </childnode>
        <childnode refid="1241" relation="include">
        </childnode>
        <childnode refid="1231" relation="include">
        </childnode>
        <childnode refid="1234" relation="include">
        </childnode>
        <childnode refid="1237" relation="include">
        </childnode>
        <childnode refid="1243" relation="include">
        </childnode>
        <childnode refid="1244" relation="include">
        </childnode>
      </node>
      <node id="1228">
        <label>UART2CC26X2.h</label>
        <link refid="_u_a_r_t2_c_c26_x2_8h"/>
      </node>
      <node id="1213">
        <label>AESGCMCC26X4.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x4_8h"/>
      </node>
      <node id="1212">
        <label>AESECBCC26XX.h</label>
        <link refid="_a_e_s_e_c_b_c_c26_x_x_8h"/>
      </node>
      <node id="1236">
        <label>RNGCC26XX.h</label>
        <link refid="_r_n_g_c_c26_x_x_8h"/>
      </node>
      <node id="1227">
        <label>SPICC26X4DMA.h</label>
        <link refid="_s_p_i_c_c26_x4_d_m_a_8h"/>
      </node>
      <node id="1244">
        <label>WatchdogCC26XX.h</label>
        <link refid="_watchdog_c_c26_x_x_8h"/>
      </node>
      <node id="1210">
        <label>AESCCMCC26X4.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x4_8h"/>
      </node>
      <node id="1218">
        <label>I2SCC26XX.h</label>
        <link refid="_i2_s_c_c26_x_x_8h"/>
      </node>
      <node id="1215">
        <label>CryptoResourceCC26XX.h</label>
        <link refid="_crypto_resource_c_c26_x_x_8h"/>
      </node>
      <node id="1238">
        <label>UART2Support.h</label>
        <link refid="_u_a_r_t2_support_8h"/>
      </node>
      <node id="1225">
        <label>UDMACC26XX.h</label>
        <link refid="_u_d_m_a_c_c26_x_x_8h"/>
        <childnode refid="1208" relation="include">
        </childnode>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1226" relation="include">
        </childnode>
        <childnode refid="1227" relation="include">
        </childnode>
        <childnode refid="1228" relation="include">
        </childnode>
      </node>
      <node id="1220">
        <label>PDMCC26XX_util.h</label>
        <link refid="_p_d_m_c_c26_x_x__util_8h"/>
      </node>
      <node id="1209">
        <label>ADCBufCC26XX.h</label>
        <link refid="_a_d_c_buf_c_c26_x_x_8h"/>
      </node>
      <node id="1229">
        <label>I2CCC26XX.h</label>
        <link refid="_i2_c_c_c26_x_x_8h"/>
      </node>
      <node id="1242">
        <label>PWMTimerCC26XX.h</label>
        <link refid="_p_w_m_timer_c_c26_x_x_8h"/>
      </node>
      <node id="1240">
        <label>DisplayUart2.h</label>
        <link refid="_display_uart2_8h"/>
      </node>
      <node id="1239">
        <label>LogSinkUART.h</label>
        <link refid="_log_sink_u_a_r_t_8h"/>
      </node>
      <node id="1217">
        <label>ECDSACC26X2.h</label>
        <link refid="_e_c_d_s_a_c_c26_x2_8h"/>
      </node>
      <node id="1221">
        <label>PowerCC26X2.h</label>
        <link refid="_power_c_c26_x2_8h"/>
        <childnode refid="1208" relation="include">
        </childnode>
        <childnode refid="1222" relation="include">
        </childnode>
      </node>
      <node id="1216">
        <label>ECDHCC26X2.h</label>
        <link refid="_e_c_d_h_c_c26_x2_8h"/>
      </node>
      <node id="1226">
        <label>SPICC26X2DMA.h</label>
        <link refid="_s_p_i_c_c26_x2_d_m_a_8h"/>
      </node>
      <node id="1223">
        <label>ADCCC26XX.h</label>
        <link refid="_a_d_c_c_c26_x_x_8h"/>
      </node>
      <node id="1243">
        <label>WatchdogCC26X4.h</label>
        <link refid="_watchdog_c_c26_x4_8h"/>
      </node>
      <node id="1222">
        <label>PowerCC26XX.h</label>
        <link refid="_power_c_c26_x_x_8h"/>
        <childnode refid="1223" relation="include">
        </childnode>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1224" relation="include">
        </childnode>
        <childnode refid="1225" relation="include">
        </childnode>
        <childnode refid="1229" relation="include">
        </childnode>
        <childnode refid="1219" relation="include">
        </childnode>
        <childnode refid="1220" relation="include">
        </childnode>
        <childnode refid="1221" relation="include">
        </childnode>
        <childnode refid="1230" relation="include">
        </childnode>
        <childnode refid="1226" relation="include">
        </childnode>
        <childnode refid="1227" relation="include">
        </childnode>
      </node>
      <node id="1237">
        <label>UART2.h</label>
        <link refid="_u_a_r_t2_8h"/>
        <childnode refid="1228" relation="include">
        </childnode>
        <childnode refid="1238" relation="include">
        </childnode>
        <childnode refid="1239" relation="include">
        </childnode>
        <childnode refid="1240" relation="include">
        </childnode>
      </node>
      <node id="1235">
        <label>ECDSACC26X1.h</label>
        <link refid="_e_c_d_s_a_c_c26_x1_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="union_hwi_p___struct" prot="public">HwiP_Struct</innerclass>
    <innerclass refid="struct_hwi_p___params" prot="public">HwiP_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_hwi_p_8h_1a1fca150e7b36e480b092e0d9cbbb8721" prot="public" static="no">
        <name>HwiP_STRUCT_SIZE</name>
        <initializer>(28)</initializer>
        <briefdescription>
<para>Number of bytes greater than or equal to the size of any RTOS HwiP object. </para>        </briefdescription>
        <detaileddescription>
<para>NoRTOS: 12 FreeRTOS: 12 BIOS 6.x: 28 BIOS 7.x: 20 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="158" column="9" bodyfile="source/ti/drivers/dpl/HwiP.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_hwi_p_8h_1a8f508a9a62c31a942ffc9438f53dd258" prot="public" static="no">
        <name>HwiP_Status</name>
        <enumvalue id="_hwi_p_8h_1a8f508a9a62c31a942ffc9438f53dd258a96e82ebb87c2c36bba1fdd072fcec2f9" prot="public">
          <name>HwiP_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_hwi_p_8h_1a8f508a9a62c31a942ffc9438f53dd258aa0988bb08bdcf17a219385320e200000" prot="public">
          <name>HwiP_FAILURE</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Status codes for HwiP APIs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="183" column="1" bodyfile="source/ti/drivers/dpl/HwiP.h" bodystart="182" bodyend="186"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_hwi_p_8h_1a3ba69ca21548025e8d8babedd7ae2ea1" prot="public" static="no">
        <type>union <ref refid="union_hwi_p___struct" kindref="compound">HwiP_Struct</ref></type>
        <definition>typedef union HwiP_Struct  HwiP_Struct</definition>
        <argsstring></argsstring>
        <name>HwiP_Struct</name>
        <briefdescription>
<para>HwiP structure. </para>        </briefdescription>
        <detaileddescription>
<para>Opaque structure that should be large enough to hold any of the RTOS specific HwiP objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_hwi_p_8h_1a7dd325ff62af296374efc6d317f5e368" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* HwiP_Handle</definition>
        <argsstring></argsstring>
        <name>HwiP_Handle</name>
        <briefdescription>
<para>Opaque client reference to an instance of a HwiP. </para>        </briefdescription>
        <detaileddescription>
<para>A HwiP_Handle returned from the <ref refid="_hwi_p_8h_1a3d80df47f0bdcbb6e562ee7b96a40af5" kindref="member">HwiP_create()</ref> represents that instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="177" column="1" bodyfile="source/ti/drivers/dpl/HwiP.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_hwi_p_8h_1a53a36fe33e22847927ceddbb63fb50c7" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* HwiP_Fxn) (uintptr_t arg)</definition>
        <argsstring>)(uintptr_t arg)</argsstring>
        <name>HwiP_Fxn</name>
        <briefdescription>
<para>Prototype for the entry function for a hardware interrupt. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="191" column="1" bodyfile="source/ti/drivers/dpl/HwiP.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_hwi_p_8h_1acf51aa03ae02e5ce35e714c032a38f3f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HwiP_swiPIntNum</definition>
        <argsstring></argsstring>
        <name>HwiP_swiPIntNum</name>
        <briefdescription>
<para>Interrupt number posted by SwiP. </para>        </briefdescription>
        <detaileddescription>
<para>The SwiP module needs its scheduler to run at key points in SwiP processing. This is accomplished via an interrupt that is configured at the lowest possible interrupt priority level and is plugged with the SwiP scheduler. This interrupt must be the <emphasis>only</emphasis> interrupt at that lowest priority. SwiP will post this interrupt whenever its scheduler needs to run.</para><para>The default value for your device should suffice, but if a different interrupt is needed to be used for SwiP scheduling then HwiP_swiPIntNum can be assigned with this interrupt (early on, before HwiPs are created and before any SwiP gets posted). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="230" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_hwi_p_8h_1a9392b32717002e9447bd84181f323adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_hwi_p_8h_1a7dd325ff62af296374efc6d317f5e368" kindref="member">HwiP_Handle</ref></type>
        <definition>HwiP_Handle HwiP_construct</definition>
        <argsstring>(HwiP_Struct *hwiP, int interruptNum, HwiP_Fxn hwiFxn, HwiP_Params *params)</argsstring>
        <name>HwiP_construct</name>
        <param>
          <type><ref refid="union_hwi_p___struct" kindref="compound">HwiP_Struct</ref> *</type>
          <declname>hwiP</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interruptNum</declname>
        </param>
        <param>
          <type><ref refid="_hwi_p_8h_1a53a36fe33e22847927ceddbb63fb50c7" kindref="member">HwiP_Fxn</ref></type>
          <declname>hwiFxn</declname>
        </param>
        <param>
          <type><ref refid="struct_hwi_p___params" kindref="compound">HwiP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to construct a hardware interrupt object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hwiP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="union_hwi_p___struct" kindref="compound">HwiP_Struct</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interruptNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt Vector Id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hwiFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>entry function of the hardware interrupt</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. NULL denotes to use the default parameters. The HwiP default parameters are noted in <ref refid="_hwi_p_8h_1a33f02161b1837b41f08ba064f1001045" kindref="member">HwiP_Params_init()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A HwiP_Handle on success or a NULL on an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1ad55b2c5937f748d643f8c3ffdeeabea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_destruct</definition>
        <argsstring>(HwiP_Struct *hwiP)</argsstring>
        <name>HwiP_destruct</name>
        <param>
          <type><ref refid="union_hwi_p___struct" kindref="compound">HwiP_Struct</ref> *</type>
          <declname>hwiP</declname>
        </param>
        <briefdescription>
<para>Function to destruct a hardware interrupt object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hwiP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="union_hwi_p___struct" kindref="compound">HwiP_Struct</ref> object that was passed to <ref refid="_hwi_p_8h_1a9392b32717002e9447bd84181f323adb" kindref="member">HwiP_construct()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1afe8d9c04a4f255f272ca690b25d59c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_clearInterrupt</definition>
        <argsstring>(int interruptNum)</argsstring>
        <name>HwiP_clearInterrupt</name>
        <param>
          <type>int</type>
          <declname>interruptNum</declname>
        </param>
        <briefdescription>
<para>Function to clear a single interrupt. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interruptNum</parametername>
</parameternamelist>
<parameterdescription>
<para>interrupt number to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a3d80df47f0bdcbb6e562ee7b96a40af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_hwi_p_8h_1a7dd325ff62af296374efc6d317f5e368" kindref="member">HwiP_Handle</ref></type>
        <definition>HwiP_Handle HwiP_create</definition>
        <argsstring>(int interruptNum, HwiP_Fxn hwiFxn, HwiP_Params *params)</argsstring>
        <name>HwiP_create</name>
        <param>
          <type>int</type>
          <declname>interruptNum</declname>
        </param>
        <param>
          <type><ref refid="_hwi_p_8h_1a53a36fe33e22847927ceddbb63fb50c7" kindref="member">HwiP_Fxn</ref></type>
          <declname>hwiFxn</declname>
        </param>
        <param>
          <type><ref refid="struct_hwi_p___params" kindref="compound">HwiP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to create an interrupt on CortexM devices. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function may not be available on all implementations</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interruptNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt Vector Id</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hwiFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>entry function of the hardware interrupt</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. NULL denotes to use the default parameters. The HwiP default parameters are noted in <ref refid="_hwi_p_8h_1a33f02161b1837b41f08ba064f1001045" kindref="member">HwiP_Params_init()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A HwiP_Handle on success or a NULL on an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1ab2e1c500e845723be6cd6e4caa58d6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_delete</definition>
        <argsstring>(HwiP_Handle handle)</argsstring>
        <name>HwiP_delete</name>
        <param>
          <type><ref refid="_hwi_p_8h_1a7dd325ff62af296374efc6d317f5e368" kindref="member">HwiP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to delete an interrupt on CortexM devices. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function may not be available on all implementations</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>returned from the HwiP_create call</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1aac47ffab62f7d25d736b58e40be17425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t HwiP_disable</definition>
        <argsstring>(void)</argsstring>
        <name>HwiP_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to disable interrupts to enter a critical region. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be called multiple times, but must unwound in the reverse order. For example <programlisting><codeline><highlight class="normal">uintptr_t<sp/>key1,<sp/>key2;</highlight></codeline>
<codeline><highlight class="normal">key1<sp/>=<sp/>HwiP_disable();</highlight></codeline>
<codeline><highlight class="normal">key2<sp/>=<sp/>HwiP_disable();</highlight></codeline>
<codeline><highlight class="normal">HwiP_restore(key2);</highlight></codeline>
<codeline><highlight class="normal">HwiP_restore(key1);</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>A key that must be passed to <ref refid="_hwi_p_8h_1a979cdfbd9993f6c5eedef8570efbd62e" kindref="member">HwiP_restore()</ref> to re-enable interrupts. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a89a0a63fd819bbcb31064a60fc901629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_enable</definition>
        <argsstring>(void)</argsstring>
        <name>HwiP_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to enable interrupts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a2ab29f4a0e277d336338900c07151325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_disableInterrupt</definition>
        <argsstring>(int interruptNum)</argsstring>
        <name>HwiP_disableInterrupt</name>
        <param>
          <type>int</type>
          <declname>interruptNum</declname>
        </param>
        <briefdescription>
<para>Function to disable a single interrupt. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interruptNum</parametername>
</parameternamelist>
<parameterdescription>
<para>interrupt number to disable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a31f70cf8be574453b13dd9bfa4c8da26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_enableInterrupt</definition>
        <argsstring>(int interruptNum)</argsstring>
        <name>HwiP_enableInterrupt</name>
        <param>
          <type>int</type>
          <declname>interruptNum</declname>
        </param>
        <briefdescription>
<para>Function to enable a single interrupt. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interruptNum</parametername>
</parameternamelist>
<parameterdescription>
<para>interrupt number to enable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a06403da6ca0ed381d658fd4d54a3d294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool HwiP_inISR</definition>
        <argsstring>(void)</argsstring>
        <name>HwiP_inISR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to return a status based on whether it is in an interrupt context. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status: indicating whether the function was called in an ISR (true) or at thread level (false). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a90a13fc52abcff27467ca5b5ff8a6f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool HwiP_interruptsEnabled</definition>
        <argsstring>(void)</argsstring>
        <name>HwiP_interruptsEnabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to determine whether interrupts are currently enabled. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current state of interrupts.<itemizedlist>
<listitem><para>true Interrupts are currently enabled.</para></listitem><listitem><para>false Interrupts are currently disabled. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a33f02161b1837b41f08ba064f1001045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_Params_init</definition>
        <argsstring>(HwiP_Params *params)</argsstring>
        <name>HwiP_Params_init</name>
        <param>
          <type><ref refid="struct_hwi_p___params" kindref="compound">HwiP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize params structure to default values. </para>        </briefdescription>
        <detaileddescription>
<para>The default parameters are:<itemizedlist>
<listitem><para>arg: 0</para></listitem><listitem><para>priority: ~0</para></listitem><listitem><para>enableInt: true</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1ab8ab58bc06face6a1ca248352a22e1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_plug</definition>
        <argsstring>(int interruptNum, void *fxn)</argsstring>
        <name>HwiP_plug</name>
        <param>
          <type>int</type>
          <declname>interruptNum</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>fxn</declname>
        </param>
        <briefdescription>
<para>Function to plug an interrupt vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interruptNum</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of interrupt to plug </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fxn</parametername>
</parameternamelist>
<parameterdescription>
<para>ISR that services plugged interrupt </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1ad5c7a6c3ab2aa85b95ccf4209b897e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_post</definition>
        <argsstring>(int interruptNum)</argsstring>
        <name>HwiP_post</name>
        <param>
          <type>int</type>
          <declname>interruptNum</declname>
        </param>
        <briefdescription>
<para>Function to generate an interrupt. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interruptNum</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of interrupt to generate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a979cdfbd9993f6c5eedef8570efbd62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_restore</definition>
        <argsstring>(uintptr_t key)</argsstring>
        <name>HwiP_restore</name>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Function to restore interrupts to exit a critical region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>return from HwiP_disable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a5a74ad3ab90f488c0cb580ae77bef0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_setFunc</definition>
        <argsstring>(HwiP_Handle hwiP, HwiP_Fxn fxn, uintptr_t arg)</argsstring>
        <name>HwiP_setFunc</name>
        <param>
          <type><ref refid="_hwi_p_8h_1a7dd325ff62af296374efc6d317f5e368" kindref="member">HwiP_Handle</ref></type>
          <declname>hwiP</declname>
        </param>
        <param>
          <type><ref refid="_hwi_p_8h_1a53a36fe33e22847927ceddbb63fb50c7" kindref="member">HwiP_Fxn</ref></type>
          <declname>fxn</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function to overwrite HwiP function and arg. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hwiP</parametername>
</parameternamelist>
<parameterdescription>
<para>handle returned from the HwiP_create or construct call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fxn</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to ISR function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>argument to ISR function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1a1f317ac19a959dd999d7d99c83d1fbfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_setPriority</definition>
        <argsstring>(int interruptNum, uint32_t priority)</argsstring>
        <name>HwiP_setPriority</name>
        <param>
          <type>int</type>
          <declname>interruptNum</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Function to set the priority of a hardware interrupt. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interruptNum</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the interrupt to change </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>new priority </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_hwi_p_8h_1aa8920bde45f82b923fa5d4dd3b0b9fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HwiP_dispatchInterrupt</definition>
        <argsstring>(int interruptNum)</argsstring>
        <name>HwiP_dispatchInterrupt</name>
        <param>
          <type>int</type>
          <declname>interruptNum</declname>
        </param>
        <briefdescription>
<para>Function to call the HW ISR function registered by <ref refid="_hwi_p_8h_1a9392b32717002e9447bd84181f323adb" kindref="member">HwiP_construct()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function may not be available on all implementations</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interruptNum</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt Vector Id </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/HwiP.h" line="404" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware Interrupt module for the RTOS Porting Interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>The <ref refid="_hwi_p_8h_1aac47ffab62f7d25d736b58e40be17425" kindref="member">HwiP_disable()</ref>/<ref refid="_hwi_p_8h_1a979cdfbd9993f6c5eedef8570efbd62e" kindref="member">HwiP_restore()</ref> APIs can be called recursively. The order of the <ref refid="_hwi_p_8h_1a979cdfbd9993f6c5eedef8570efbd62e" kindref="member">HwiP_restore()</ref> calls, must be in reversed order. For example: <programlisting><codeline><highlight class="normal">uintptr_t<sp/>key1,<sp/>key2;</highlight></codeline>
<codeline><highlight class="normal">key1<sp/>=<sp/>HwiP_disable();</highlight></codeline>
<codeline><highlight class="normal">key2<sp/>=<sp/>HwiP_disable();</highlight></codeline>
<codeline><highlight class="normal">HwiP_restore(key2);</highlight></codeline>
<codeline><highlight class="normal">HwiP_restore(key1);</highlight></codeline>
</programlisting></para><para><anchor id="_hwi_p_8h_1ti_drivers_HwiP_Cross_Platform_Considerations"/><heading level="2">Cross-platform Considerations</heading>
</para><para>The following sections highlight some important items to consider when using the HwiP DPL. Due to the nature and intention of different operating systems, the HwiP DPL implementation may differ depending on the underlying platform and operating system.</para><para><heading level="3">Arm Cortex-M Interrupt Priorities</heading>
</para><para>On Arm Cortex-M platforms, the highest logical interrupt priority has the lowest numerical value. That is, 0 is the highest interrupt priority (interrupt level 0 has the highest urgency). The number of interrupt priorities is given by the number of interrupt priority bits implemented, which is vendor-specific.</para><para>For example:</para><para><table rows="5" cols="4"><row>
<entry thead="yes"><para>Device Family </para></entry><entry thead="yes"><para>Architecture </para></entry><entry thead="yes"><para>Priority Bits </para></entry><entry thead="yes"><para>Priority Levels  </para></entry></row>
<row>
<entry thead="no"><para>CC23X0 </para></entry><entry thead="no"><para>Armv6-m </para></entry><entry thead="no"><para>2 </para></entry><entry thead="no"><para>4 (0-3) </para></entry></row>
<row>
<entry thead="no"><para>CC13X2_CC26X2 </para></entry><entry thead="no"><para>Armv7-m </para></entry><entry thead="no"><para>3 </para></entry><entry thead="no"><para>8 (0-7) </para></entry></row>
<row>
<entry thead="no"><para>CC13X4_CC26X4 </para></entry><entry thead="no"><para>Armv8-m </para></entry><entry thead="no"><para>3 </para></entry><entry thead="no"><para>8 (0-7) </para></entry></row>
<row>
<entry thead="no"><para>CC27XX </para></entry><entry thead="no"><para>Armv8-m </para></entry><entry thead="no"><para>4 </para></entry><entry thead="no"><para>16 (0-15) </para></entry></row>
</table>
On Arm Cortex-M platforms, interrupt priority values are stored in the most significant bits of the 8-bit interrupt priority registers. For example, with 3 interrupt priority bits implemented, interrupt priority level 2 (0b010) is represented in the interrupt priority registers as 0b010 &lt;&lt; (8-3) = 0x40. This is automatically handled by SysConfig, but may cause some confusion, for example, when inspecting the raw value of the <ref refid="struct_hwi_p___params_1ac4977525e0bda265e8bbe2980dc16eda" kindref="member">HwiP_Params.priority</ref> field or the Cortex-M interrupt priority registers.</para><para>See <ulink url="http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html">http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html</ulink> for more details.</para><para>Arm Cortex-M devices may support 2 methods for masking interrupts<itemizedlist>
<listitem><para><computeroutput>PRIMASK</computeroutput> disables all interrupt levels indiscriminately (with the exception of non-maskable interrupts).</para></listitem><listitem><para><computeroutput>BASEPRI</computeroutput> disables interrupts with priority equal to or lower than a certain level. Software can set <computeroutput>BASEPRI</computeroutput> to a priority level between 1 (second highest priority) and the maximum supported priority level (lowest priority). This means that interrupt priority level 0 cannot be masked using <computeroutput>BASEPRI</computeroutput>.</para></listitem></itemizedlist>
</para><para>The table gives an overview of what interrupt masking controls the different Arm platforms support:</para><para><table rows="4" cols="3"><row>
<entry thead="yes"><para>Architecture </para></entry><entry thead="yes"><para>PRIMASK </para></entry><entry thead="yes"><para>BASEPRI  </para></entry></row>
<row>
<entry thead="no"><para>Armv6-m </para></entry><entry thead="no"><para>Yes </para></entry><entry thead="no"><para>No </para></entry></row>
<row>
<entry thead="no"><para>Armv7-m </para></entry><entry thead="no"><para>Yes </para></entry><entry thead="no"><para>Yes </para></entry></row>
<row>
<entry thead="no"><para>Armv8-m </para></entry><entry thead="no"><para>Yes </para></entry><entry thead="no"><para>Yes </para></entry></row>
</table>
<heading level="3">FreeRTOS</heading>
</para><para>On Cortex-M platforms that support <computeroutput>BASEPRI</computeroutput>, the FreeRTOS kernel does not completely disable interrupts even inside critical sections. This is achieved by these FreeRTOS configurations:</para><para><itemizedlist>
<listitem><para><computeroutput>configMAX_SYSCALL_INTERRUPT_PRIORITY</computeroutput> defines the highest logical priority at which FreeRTOS kernel API calls can be made.</para></listitem><listitem><para><computeroutput>configKERNEL_INTERRUPT_PRIORITY</computeroutput> sets the priority of the FreeRTOS kernel itself, usually the lowest logical priority possible.</para></listitem></itemizedlist>
</para><para>This permits a fully nested model where higher-priority interrupts can preempt lower-priority ones. However, interrupts that require FreeRTOS API calls must adhere to the <computeroutput>configMAX_SYSCALL_INTERRUPT_PRIORITY</computeroutput> limit to avoid corrupting kernel data.</para><para>See <ulink url="https://www.freertos.org/a00110.html#kernel_priority">https://www.freertos.org/a00110.html#kernel_priority</ulink> for more details.</para><para><itemizedlist>
<listitem><para><ref refid="_hwi_p_8h_1aac47ffab62f7d25d736b58e40be17425" kindref="member">HwiP_disable()</ref>: sets <computeroutput>BASEPRI</computeroutput> to <computeroutput>configMAX_SYSCALL_INTERRUPT_PRIORITY</computeroutput>. Returns original <computeroutput>BASEPRI</computeroutput>.</para></listitem><listitem><para><ref refid="_hwi_p_8h_1a979cdfbd9993f6c5eedef8570efbd62e" kindref="member">HwiP_restore()</ref> sets <computeroutput>BASEPRI</computeroutput> to 0 (no interrupts are masked).</para></listitem></itemizedlist>
</para><para><heading level="3">TI-RTOS</heading>
</para><para>TI-RTOS behaves similar to FreeRTOS, meaning that on Cortex-M platforms that support <computeroutput>BASEPRI</computeroutput>, the TI-RTOS kernel does not completely disable interrupts even inside critical sections.</para><para><itemizedlist>
<listitem><para><ref refid="_hwi_p_8h_1aac47ffab62f7d25d736b58e40be17425" kindref="member">HwiP_disable()</ref> sets <computeroutput>BASEPRI</computeroutput> to <computeroutput>Hwi_disablePriority</computeroutput>. Returns original <computeroutput>BASEPRI</computeroutput>.</para></listitem><listitem><para><ref refid="_hwi_p_8h_1a979cdfbd9993f6c5eedef8570efbd62e" kindref="member">HwiP_restore()</ref> sets <computeroutput>BASEPRI</computeroutput> to the provided argument value.</para></listitem></itemizedlist>
</para><para>See TI-RTOS Hwi documentation for more details.</para><para><heading level="3">NoRTOS</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_hwi_p_8h_1aac47ffab62f7d25d736b58e40be17425" kindref="member">HwiP_disable()</ref> disables all interrupt levels indiscriminately.</para></listitem><listitem><para><ref refid="_hwi_p_8h_1a979cdfbd9993f6c5eedef8570efbd62e" kindref="member">HwiP_restore()</ref> globally enables all interrupts. <hruler/>
 </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2024,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor">#ifndef<sp/>ti_dpl_HwiP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_dpl_HwiP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="_hwi_p_8h_1a1fca150e7b36e480b092e0d9cbbb8721" refkind="member"><highlight class="preprocessor">#define<sp/>HwiP_STRUCT_SIZE<sp/>(28)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="union_hwi_p___struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_hwi_p___struct" kindref="compound">HwiP_Struct</ref></highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168" refid="union_hwi_p___struct_1acdf8b27219abbf8d5698a7cb96b794a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="union_hwi_p___struct_1acdf8b27219abbf8d5698a7cb96b794a6" kindref="member">dummy</ref>;<sp/></highlight></codeline>
<codeline lineno="169" refid="union_hwi_p___struct_1a330d1854e14ba439452eccb3b32e70bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="union_hwi_p___struct_1a330d1854e14ba439452eccb3b32e70bf" kindref="member">data</ref>[<ref refid="_hwi_p_8h_1a1fca150e7b36e480b092e0d9cbbb8721" kindref="member">HwiP_STRUCT_SIZE</ref>];</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}<sp/><ref refid="_hwi_p_8h_1a3ba69ca21548025e8d8babedd7ae2ea1" kindref="member">HwiP_Struct</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="_hwi_p_8h_1a7dd325ff62af296374efc6d317f5e368" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_hwi_p_8h_1a7dd325ff62af296374efc6d317f5e368" kindref="member">HwiP_Handle</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="_hwi_p_8h_1a8f508a9a62c31a942ffc9438f53dd258" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184" refid="_hwi_p_8h_1a8f508a9a62c31a942ffc9438f53dd258a96e82ebb87c2c36bba1fdd072fcec2f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_hwi_p_8h_1a8f508a9a62c31a942ffc9438f53dd258a96e82ebb87c2c36bba1fdd072fcec2f9" kindref="member">HwiP_OK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="185" refid="_hwi_p_8h_1a8f508a9a62c31a942ffc9438f53dd258aa0988bb08bdcf17a219385320e200000" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_hwi_p_8h_1a8f508a9a62c31a942ffc9438f53dd258aa0988bb08bdcf17a219385320e200000" kindref="member">HwiP_FAILURE</ref><sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}<sp/><ref refid="_hwi_p_8h_1a8f508a9a62c31a942ffc9438f53dd258" kindref="member">HwiP_Status</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="_hwi_p_8h_1a53a36fe33e22847927ceddbb63fb50c7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_hwi_p_8h_1a53a36fe33e22847927ceddbb63fb50c7" kindref="member">HwiP_Fxn</ref>)(uintptr_t<sp/>arg);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="struct_hwi_p___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207" refid="struct_hwi_p___params_1ae59e7df38314177a3817f11cfad0ce26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="struct_hwi_p___params_1ae59e7df38314177a3817f11cfad0ce26" kindref="member">arg</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208" refid="struct_hwi_p___params_1ac4977525e0bda265e8bbe2980dc16eda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_hwi_p___params_1ac4977525e0bda265e8bbe2980dc16eda" kindref="member">priority</ref>;<sp/></highlight></codeline>
<codeline lineno="212" refid="struct_hwi_p___params_1a4dd33f09396ea13d919586b291e0c9f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_hwi_p___params_1a4dd33f09396ea13d919586b291e0c9f8" kindref="member">enableInt</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><ref refid="struct_hwi_p___params" kindref="compound">HwiP_Params</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1acf51aa03ae02e5ce35e714c032a38f3f" kindref="member">HwiP_swiPIntNum</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>HwiP_Handle<sp/><ref refid="_hwi_p_8h_1a9392b32717002e9447bd84181f323adb" kindref="member">HwiP_construct</ref>(<ref refid="union_hwi_p___struct" kindref="compound">HwiP_Struct</ref><sp/>*hwiP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum,<sp/><ref refid="_hwi_p_8h_1a53a36fe33e22847927ceddbb63fb50c7" kindref="member">HwiP_Fxn</ref><sp/>hwiFxn,<sp/><ref refid="struct_hwi_p___params" kindref="compound">HwiP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1ad55b2c5937f748d643f8c3ffdeeabea2" kindref="member">HwiP_destruct</ref>(<ref refid="union_hwi_p___struct" kindref="compound">HwiP_Struct</ref><sp/>*hwiP);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1afe8d9c04a4f255f272ca690b25d59c7e" kindref="member">HwiP_clearInterrupt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>HwiP_Handle<sp/><ref refid="_hwi_p_8h_1a3d80df47f0bdcbb6e562ee7b96a40af5" kindref="member">HwiP_create</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum,<sp/><ref refid="_hwi_p_8h_1a53a36fe33e22847927ceddbb63fb50c7" kindref="member">HwiP_Fxn</ref><sp/>hwiFxn,<sp/><ref refid="struct_hwi_p___params" kindref="compound">HwiP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1ab2e1c500e845723be6cd6e4caa58d6d7" kindref="member">HwiP_delete</ref>(HwiP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uintptr_t<sp/><ref refid="_hwi_p_8h_1aac47ffab62f7d25d736b58e40be17425" kindref="member">HwiP_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1a89a0a63fd819bbcb31064a60fc901629" kindref="member">HwiP_enable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1a2ab29f4a0e277d336338900c07151325" kindref="member">HwiP_disableInterrupt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1a31f70cf8be574453b13dd9bfa4c8da26" kindref="member">HwiP_enableInterrupt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1a06403da6ca0ed381d658fd4d54a3d294" kindref="member">HwiP_inISR</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1a90a13fc52abcff27467ca5b5ff8a6f27" kindref="member">HwiP_interruptsEnabled</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1a33f02161b1837b41f08ba064f1001045" kindref="member">HwiP_Params_init</ref>(<ref refid="struct_hwi_p___params" kindref="compound">HwiP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1ab8ab58bc06face6a1ca248352a22e1d0" kindref="member">HwiP_plug</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fxn);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1ad5c7a6c3ab2aa85b95ccf4209b897e2a" kindref="member">HwiP_post</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1a979cdfbd9993f6c5eedef8570efbd62e" kindref="member">HwiP_restore</ref>(uintptr_t<sp/>key);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1a5a74ad3ab90f488c0cb580ae77bef0d0" kindref="member">HwiP_setFunc</ref>(HwiP_Handle<sp/>hwiP,<sp/><ref refid="_hwi_p_8h_1a53a36fe33e22847927ceddbb63fb50c7" kindref="member">HwiP_Fxn</ref><sp/>fxn,<sp/>uintptr_t<sp/>arg);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1a1f317ac19a959dd999d7d99c83d1fbfa" kindref="member">HwiP_setPriority</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum,<sp/>uint32_t<sp/>priority);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_hwi_p_8h_1aa8920bde45f82b923fa5d4dd3b0b9fb1" kindref="member">HwiP_dispatchInterrupt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_dpl_HwiP__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/dpl/HwiP.h"/>
  </compounddef>
</doxygen>
