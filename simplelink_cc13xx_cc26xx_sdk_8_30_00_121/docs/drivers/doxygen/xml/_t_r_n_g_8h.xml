<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_t_r_n_g_8h" kind="file" language="C++">
    <compoundname>TRNG.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_crypto_key_8h" local="no">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</includes>
    <includedby refid="_e_c_d_s_a_c_c26_x1_8h" local="no">ECDSACC26X1.h</includedby>
    <includedby refid="_e_c_d_s_a_c_c26_x2_8h" local="no">ECDSACC26X2.h</includedby>
    <includedby refid="_r_n_g_c_c26_x_x_8h" local="no">RNGCC26XX.h</includedby>
    <includedby refid="_t_r_n_g_c_c26_x4__ns_8h" local="no">TRNGCC26X4_ns.h</includedby>
    <includedby refid="_t_r_n_g_c_c26_x4__s_8h" local="no">TRNGCC26X4_s.h</includedby>
    <includedby refid="_t_r_n_g_c_c26_x_x_8h" local="no">TRNGCC26XX.h</includedby>
    <incdepgraph>
      <node id="2039">
        <label>stdbool.h</label>
      </node>
      <node id="2041">
        <label>stdint.h</label>
      </node>
      <node id="2038">
        <label>TRNG.h</label>
        <link refid="_t_r_n_g_8h"/>
        <childnode refid="2039" relation="include">
        </childnode>
        <childnode refid="2040" relation="include">
        </childnode>
        <childnode refid="2041" relation="include">
        </childnode>
        <childnode refid="2042" relation="include">
        </childnode>
      </node>
      <node id="2040">
        <label>stddef.h</label>
      </node>
      <node id="2042">
        <label>ti/drivers/cryptoutils/cryptokey/CryptoKey.h</label>
        <link refid="_crypto_key_8h"/>
        <childnode refid="2041" relation="include">
        </childnode>
        <childnode refid="2039" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2049">
        <label>TRNGCC26XX.h</label>
        <link refid="_t_r_n_g_c_c26_x_x_8h"/>
        <childnode refid="2044" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
      </node>
      <node id="2043">
        <label>TRNG.h</label>
        <link refid="_t_r_n_g_8h"/>
        <childnode refid="2044" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
        <childnode refid="2047" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2049" relation="include">
        </childnode>
      </node>
      <node id="2047">
        <label>TRNGCC26X4_ns.h</label>
        <link refid="_t_r_n_g_c_c26_x4__ns_8h"/>
      </node>
      <node id="2046">
        <label>RNGCC26XX.h</label>
        <link refid="_r_n_g_c_c26_x_x_8h"/>
      </node>
      <node id="2045">
        <label>ECDSACC26X2.h</label>
        <link refid="_e_c_d_s_a_c_c26_x2_8h"/>
      </node>
      <node id="2048">
        <label>TRNGCC26X4_s.h</label>
        <link refid="_t_r_n_g_c_c26_x4__s_8h"/>
        <childnode refid="2047" relation="include">
        </childnode>
      </node>
      <node id="2044">
        <label>ECDSACC26X1.h</label>
        <link refid="_e_c_d_s_a_c_c26_x1_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_t_r_n_g___config" prot="public">TRNG_Config</innerclass>
    <innerclass refid="struct_t_r_n_g___params" prot="public">TRNG_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_t_r_n_g_8h_1ab873e919841a0770ee602b8b9a3cd9a3" prot="public" static="no">
        <name>TRNG_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common TRNG status code reservation offset. TRNG driver implementations should offset status codes with TRNG_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>TRNGXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>TRNG_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TRNGXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>TRNG_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TRNGXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>TRNG_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="394" column="9" bodyfile="source/ti/drivers/TRNG.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_t_r_n_g_8h_1ada01c2ca6b7043d067d07410e7c0d8bc" prot="public" static="no">
        <name>TRNG_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return TRNG_STATUS_SUCCESS if the function was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="402" column="9" bodyfile="source/ti/drivers/TRNG.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_t_r_n_g_8h_1a80cc550c12f937e36cf602accc843766" prot="public" static="no">
        <name>TRNG_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return TRNG_STATUS_ERROR if the function was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="410" column="9" bodyfile="source/ti/drivers/TRNG.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_t_r_n_g_8h_1a9df04d8cca579f5607e90928c045bf5a" prot="public" static="no">
        <name>TRNG_STATUS_RESOURCE_UNAVAILABLE</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned if the hardware or software resource is currently unavailable. </para>        </briefdescription>
        <detaileddescription>
<para>TRNG driver implementations may have hardware or software limitations on how many clients can simultaneously perform operations. This status code is returned if the mutual exclusion mechanism signals that an operation cannot currently be performed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="420" column="9" bodyfile="source/ti/drivers/TRNG.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_t_r_n_g_8h_1ad91b7c30222145751dfde298fd4f0931" prot="public" static="no">
        <name>TRNG_STATUS_INVALID_INPUTS</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>Operation failed due to invalid inputs. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return TRNG_STATUS_INVALID_INPUTS if input validation fails. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="427" column="9" bodyfile="source/ti/drivers/TRNG.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_t_r_n_g_8h_1a1d2b8471f683ab8eee0cb486923e0d74" prot="public" static="no">
        <name>TRNG_STATUS_CANCELED</name>
        <initializer>(-4)</initializer>
        <briefdescription>
<para>The ongoing operation was canceled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="432" column="9" bodyfile="source/ti/drivers/TRNG.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_t_r_n_g_8h_1ab3cec1fd6f36154d815d6cbbd9b75980" prot="public" static="no">
        <name>TRNG_STATUS_KEYSTORE_ERROR</name>
        <initializer>(-5)</initializer>
        <briefdescription>
<para>Importing generated key into KeyStore failed. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return TRNG_STATUS_KEYSTORE_ERROR if the <ref refid="_crypto_key_key_store___p_s_a_8h_1aa9425eeaa708cf28b9101c34a152ec36" kindref="member">KeyStore_PSA_importKey()</ref> did not return KEYSTORE_PSA_STATUS_SUCCESS </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="440" column="9" bodyfile="source/ti/drivers/TRNG.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944" prot="public" static="no">
        <name>TRNG_ReturnBehavior</name>
        <enumvalue id="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ae008580d6d7344764d9bfca00008a3e9" prot="public">
          <name>TRNG_RETURN_BEHAVIOR_CALLBACK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will return immediately while the TRNG operation goes on in the background. The registered callback function is called after the operation completes. The context the callback function is called (task, HWI, SWI) is implementation-dependent. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ad188b4caad4b0c035728edfdb1e8e622" prot="public">
          <name>TRNG_RETURN_BEHAVIOR_BLOCKING</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will block while TRNG operation goes on in the background. TRNG operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944a45fe5c71066635f6f2bde444fe2bbc5b" prot="public">
          <name>TRNG_RETURN_BEHAVIOR_POLLING</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will continuously poll a flag while TRNG operation goes on in the background. TRNG operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The way in which TRNG function calls return after generating the requested entropy. </para>        </briefdescription>
        <detaileddescription>
<para>Not all TRNG operations exhibit the specified return behavior. Functions that do not require significant computation and cannot offload that computation to a background thread behave like regular functions. Which functions exhibit the specified return behavior is not implementation dependent. Specifically, a software-backed implementation run on the same CPU as the application will emulate the return behavior while not actually offloading the computation to the background thread.</para><para>TRNG functions exhibiting the specified return behavior have restrictions on the context from which they may be called.</para><para><table rows="4" cols="4"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Task </para></entry><entry thead="yes"><para>Hwi </para></entry><entry thead="yes"><para>Swi  </para></entry></row>
<row>
<entry thead="no"><para>TRNG_RETURN_BEHAVIOR_CALLBACK </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
<row>
<entry thead="no"><para>TRNG_RETURN_BEHAVIOR_BLOCKING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>TRNG_RETURN_BEHAVIOR_POLLING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="489" column="1" bodyfile="source/ti/drivers/TRNG.h" bodystart="488" bodyend="504"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" prot="public" static="no">
        <type><ref refid="struct_t_r_n_g___config" kindref="compound">TRNG_Config</ref> *</type>
        <definition>typedef TRNG_Config* TRNG_Handle</definition>
        <argsstring></argsstring>
        <name>TRNG_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="465" column="1" bodyfile="source/ti/drivers/TRNG.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_t_r_n_g_8h_1aca5783fdcaae4122d32c20acc50624ca" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* TRNG_CryptoKeyCallbackFxn) (TRNG_Handle handle, int_fast16_t returnValue, CryptoKey *entropy)</definition>
        <argsstring>)(TRNG_Handle handle, int_fast16_t returnValue, CryptoKey *entropy)</argsstring>
        <name>TRNG_CryptoKeyCallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used by the TRNG driver when <ref refid="_t_r_n_g_8h_1a5e16c78c037c0793d7126c2cce7f007d" kindref="member">TRNG_generateKey()</ref> is called with <ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ae008580d6d7344764d9bfca00008a3e9" kindref="member">TRNG_RETURN_BEHAVIOR_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This will replace <ref refid="_t_r_n_g_8h_1a602fd3db9db486b24efbe71e9a841887" kindref="member">TRNG_CallbackFxn</ref>, which is currently deprecated.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the client that started the TRNG operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Return status code describing the outcome of the operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entropy</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> that describes the location the generated entropy will be copied to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="519" column="1" bodyfile="source/ti/drivers/TRNG.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_t_r_n_g_8h_1a3b6ab900da9a5ac5e2524836d63ef50b" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* TRNG_RandomBytesCallbackFxn) (TRNG_Handle handle, int_fast16_t returnValue, uint8_t *randomBytes, size_t randomBytesSize)</definition>
        <argsstring>)(TRNG_Handle handle, int_fast16_t returnValue, uint8_t *randomBytes, size_t randomBytesSize)</argsstring>
        <name>TRNG_RandomBytesCallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used by the TRNG driver when <ref refid="_t_r_n_g_8h_1ac671624bdf54d57adf1f403e4be1a778" kindref="member">TRNG_getRandomBytes()</ref> is called with <ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ae008580d6d7344764d9bfca00008a3e9" kindref="member">TRNG_RETURN_BEHAVIOR_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the client that started the TRNG operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Return status code describing the outcome of the operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>randomBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array that stores the random bytes output by this function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>randomBytesSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the random data required. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="534" column="1" bodyfile="source/ti/drivers/TRNG.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_t_r_n_g_8h_1a602fd3db9db486b24efbe71e9a841887" prot="public" static="no">
        <type><ref refid="_t_r_n_g_8h_1aca5783fdcaae4122d32c20acc50624ca" kindref="member">TRNG_CryptoKeyCallbackFxn</ref></type>
        <definition>typedef TRNG_CryptoKeyCallbackFxn TRNG_CallbackFxn</definition>
        <argsstring></argsstring>
        <name>TRNG_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used by the TRNG driver when used in <ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ae008580d6d7344764d9bfca00008a3e9" kindref="member">TRNG_RETURN_BEHAVIOR_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000012"><xreftitle>Deprecated</xreftitle><xrefdescription><para><ref refid="_t_r_n_g_8h_1a602fd3db9db486b24efbe71e9a841887" kindref="member">TRNG_CallbackFxn</ref> will be replaced by <ref refid="_t_r_n_g_8h_1aca5783fdcaae4122d32c20acc50624ca" kindref="member">TRNG_CryptoKeyCallbackFxn</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="545" column="1" bodyfile="source/ti/drivers/TRNG.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_t_r_n_g_8h_1a145efe92a31bca6c39f57619faf895d2" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref></type>
        <definition>const TRNG_Params TRNG_defaultParams</definition>
        <argsstring></argsstring>
        <name>TRNG_defaultParams</name>
        <briefdescription>
<para>Default <ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_t_r_n_g_8h_1a53b7f36d914ed9bcc1b11f58633c06da" kindref="member">TRNG_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="579" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_t_r_n_g_8h_1a0f5e55c289bb677e686c687fc92de9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TRNG_init</definition>
        <argsstring>(void)</argsstring>
        <name>TRNG_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initializes the TRNG module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The TRNG_config structure must exist and be persistent before this function can be called. This function must also be called before any other TRNG driver APIs. This function call does not modify any peripheral registers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_t_r_n_g_8h_1a53b7f36d914ed9bcc1b11f58633c06da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TRNG_Params_init</definition>
        <argsstring>(TRNG_Params *params)</argsstring>
        <name>TRNG_Params_init</name>
        <param>
          <type><ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to <ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Default values are: <linebreak/>
 returnBehavior = TRNG_RETURN_BEHAVIOR_BLOCKING <linebreak/>
 cryptoKeyCallbackFxn = NULL <linebreak/>
 randomBytesCallbackFxn = NULL <linebreak/>
 timeout = SemaphoreP_WAIT_FOREVER <linebreak/>
 custom = NULL <linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref></type>
        <definition>TRNG_Handle TRNG_open</definition>
        <argsstring>(uint_least8_t index, TRNG_Params *params)</argsstring>
        <name>TRNG_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function opens a given TRNG peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>TRNG controller has been initialized using <ref refid="_t_r_n_g_8h_1a0f5e55c289bb677e686c687fc92de9a4" kindref="member">TRNG_init()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the TRNG indexed into the TRNG_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter block, if NULL it will use default values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A TRNG_Handle on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_t_r_n_g_8h_1a0f5e55c289bb677e686c687fc92de9a4" kindref="member">TRNG_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_t_r_n_g_8h_1a13b2fd9b511f35defafc5e316beacc2e" kindref="member">TRNG_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_t_r_n_g_8h_1a13b2fd9b511f35defafc5e316beacc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TRNG_close</definition>
        <argsstring>(TRNG_Handle handle)</argsstring>
        <name>TRNG_close</name>
        <param>
          <type><ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a TRNG peripheral specified by the TRNG handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A TRNG handle returned from <ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="634" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_t_r_n_g_8h_1a3afd5042c7bb40f654e546ed5cc70246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t TRNG_generateEntropy</definition>
        <argsstring>(TRNG_Handle handle, CryptoKey *entropy)</argsstring>
        <name>TRNG_generateEntropy</name>
        <param>
          <type><ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>entropy</declname>
        </param>
        <briefdescription>
<para>Generate random bytes and output to the given <computeroutput><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref></computeroutput> object. </para>        </briefdescription>
        <detaileddescription>
<para>For devices other than CC27XX, Generates a random bitstream of the size defined in the <computeroutput>entropy</computeroutput> <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in the range 0 &lt;= <computeroutput>entropy</computeroutput> buffer &lt; 2 ^ (entropy length * 8). The entropy will be generated and stored according to the storage requirements defined in the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>.</para><para>For CC27XX devices, Leverages the HSM to generate raw entropy. The requested amount cannot be zero and has to be between 1-256 Bytes. For larger amounts, the amount has to be a multiple of 256 bytes and up to 64KB.</para><para><xrefsect id="deprecated_1_deprecated000013"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function has been replaced by a pair of new functions. See <ref refid="_t_r_n_g_8h_1a5e16c78c037c0793d7126c2cce7f007d" kindref="member">TRNG_generateKey()</ref> and <ref refid="_t_r_n_g_8h_1ac671624bdf54d57adf1f403e4be1a778" kindref="member">TRNG_getRandomBytes()</ref>.</para></xrefdescription></xrefsect></para><para><simplesect kind="pre"><para><ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A TRNG handle returned from <ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entropy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref></computeroutput> object that should already be initialized to hold a plaintext key, provided with the length and the address of the plaintext key-material where the generated entropy will be populated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1ada01c2ca6b7043d067d07410e7c0d8bc" kindref="member">TRNG_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1a80cc550c12f937e36cf602accc843766" kindref="member">TRNG_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1a9df04d8cca579f5607e90928c045bf5a" kindref="member">TRNG_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1ad91b7c30222145751dfde298fd4f0931" kindref="member">TRNG_STATUS_INVALID_INPUTS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Inputs provided are not valid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="664" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_t_r_n_g_8h_1a5e16c78c037c0793d7126c2cce7f007d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t TRNG_generateKey</definition>
        <argsstring>(TRNG_Handle handle, CryptoKey *entropy)</argsstring>
        <name>TRNG_generateKey</name>
        <param>
          <type><ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>entropy</declname>
        </param>
        <briefdescription>
<para>Generate random bytes and output to the given <computeroutput><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref></computeroutput> object. </para>        </briefdescription>
        <detaileddescription>
<para>Generates a random bitstream of the size defined in the <computeroutput>entropy</computeroutput> <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in the range 0 &lt;= <computeroutput>entropy</computeroutput> buffer &lt; 2 ^ (entropy length * 8). The entropy will be generated and stored according to the storage requirements defined in the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>.</para><para><simplesect kind="note"><para>This function replaces <ref refid="_t_r_n_g_8h_1a3afd5042c7bb40f654e546ed5cc70246" kindref="member">TRNG_generateEntropy()</ref>. See <ref refid="_t_r_n_g_8h_1ac671624bdf54d57adf1f403e4be1a778" kindref="member">TRNG_getRandomBytes()</ref> to output random bytes to an array instead.</para></simplesect>
<simplesect kind="attention"><para>When called with <ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ae008580d6d7344764d9bfca00008a3e9" kindref="member">TRNG_RETURN_BEHAVIOR_CALLBACK</ref>, provide a callback function of type <ref refid="_t_r_n_g_8h_1aca5783fdcaae4122d32c20acc50624ca" kindref="member">TRNG_CryptoKeyCallbackFxn</ref>.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A TRNG handle returned from <ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entropy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref></computeroutput> object that should already be initialized to hold a plaintext key, provided with the length and the address of the plaintext key-material where the generated entropy will be populated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1ada01c2ca6b7043d067d07410e7c0d8bc" kindref="member">TRNG_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1a80cc550c12f937e36cf602accc843766" kindref="member">TRNG_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1a9df04d8cca579f5607e90928c045bf5a" kindref="member">TRNG_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1ad91b7c30222145751dfde298fd4f0931" kindref="member">TRNG_STATUS_INVALID_INPUTS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Inputs provided are not valid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_t_r_n_g_8h_1ac671624bdf54d57adf1f403e4be1a778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t TRNG_getRandomBytes</definition>
        <argsstring>(TRNG_Handle handle, void *randomBytes, size_t randomBytesSize)</argsstring>
        <name>TRNG_getRandomBytes</name>
        <param>
          <type><ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>randomBytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>randomBytesSize</declname>
        </param>
        <briefdescription>
<para>Generate random bytes and output to the given array. </para>        </briefdescription>
        <detaileddescription>
<para>Generates random bytes of size given by <computeroutput>randomBytesSize</computeroutput> and stores it in the array pointed at by <computeroutput>randomBytes</computeroutput>. The user shall be responsible for allocating <computeroutput>randomBytesSize</computeroutput> long memory starting at the address pointed at by <computeroutput>randomBytes</computeroutput>.</para><para><simplesect kind="attention"><para>When called with <ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ae008580d6d7344764d9bfca00008a3e9" kindref="member">TRNG_RETURN_BEHAVIOR_CALLBACK</ref>, provide a callback function of type <ref refid="_t_r_n_g_8h_1a3b6ab900da9a5ac5e2524836d63ef50b" kindref="member">TRNG_RandomBytesCallbackFxn</ref>.</para></simplesect>
<simplesect kind="note"><para>See <ref refid="_t_r_n_g_8h_1a5e16c78c037c0793d7126c2cce7f007d" kindref="member">TRNG_generateKey()</ref> to output random bytes to a <computeroutput><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref></computeroutput> instead.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A TRNG handle returned from <ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>randomBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array that stores the random bytes output by this function. For CC27XX devices, randomBytes must be 32-bit aligned.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>randomBytesSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the random data required. For CC27XX devices, randomBytesSize must be 32-bit multiple.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1ada01c2ca6b7043d067d07410e7c0d8bc" kindref="member">TRNG_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1a80cc550c12f937e36cf602accc843766" kindref="member">TRNG_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1a9df04d8cca579f5607e90928c045bf5a" kindref="member">TRNG_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1ad91b7c30222145751dfde298fd4f0931" kindref="member">TRNG_STATUS_INVALID_INPUTS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Inputs provided are not valid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="723" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_t_r_n_g_8h_1a6e64ed78ddcf7149a347be2a2d60df1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref></type>
        <definition>TRNG_Handle TRNG_construct</definition>
        <argsstring>(TRNG_Config *config, const TRNG_Params *params)</argsstring>
        <name>TRNG_construct</name>
        <param>
          <type><ref refid="struct_t_r_n_g___config" kindref="compound">TRNG_Config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const <ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Constructs a new TRNG object. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref>, <ref refid="_t_r_n_g_8h_1a6e64ed78ddcf7149a347be2a2d60df1b" kindref="member">TRNG_construct()</ref> does not require the hwAttrs and object to be allocated in a <ref refid="struct_t_r_n_g___config" kindref="compound">TRNG_Config</ref> array that is indexed into. Instead, the <ref refid="struct_t_r_n_g___config" kindref="compound">TRNG_Config</ref>, hwAttrs, and object can be allocated at any location. This allows for relatively simple run-time allocation of temporary driver instances on the stack or the heap. The drawback is that this makes it more difficult to write device-agnostic code. If you use an ifdef with DeviceFamily, you can choose the correct object and hwAttrs to allocate. That compilation unit will be tied to the device it was compiled for at this point. To change devices, recompilation of the application with a different DeviceFamily setting is necessary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_t_r_n_g___config" kindref="compound">TRNG_Config</ref> describing the location of the object and hwAttrs.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref> to configure the driver instance.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a <ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref> on success or NULL on failure.</para></simplesect>
<simplesect kind="pre"><para>The object struct <computeroutput>config</computeroutput> points to must be zeroed out prior to calling this function. Otherwise, unexpected behavior may ensue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_t_r_n_g_8h_1a10aefaa0cff3d97b483d8b37dfc3b043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t TRNG_cancelOperation</definition>
        <argsstring>(TRNG_Handle handle)</argsstring>
        <name>TRNG_cancelOperation</name>
        <param>
          <type><ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Aborts an ongoing TRNG operation and clears internal buffers. </para>        </briefdescription>
        <detaileddescription>
<para>Aborts an operation to generate random bytes/entropy. The operation will terminate as though an error occurred and the status code of the operation will be <ref refid="_t_r_n_g_8h_1a1d2b8471f683ab8eee0cb486923e0d74" kindref="member">TRNG_STATUS_CANCELED</ref> in this case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref> returned from <ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_t_r_n_g_8h_1ada01c2ca6b7043d067d07410e7c0d8bc" kindref="member">TRNG_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled or there was no operation in progress to be canceled. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/TRNG.h" line="762" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>TRNG driver header. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_t_r_n_g_8h_1ti_drivers_TRNG_Overview"/><heading level="1">Overview</heading>
</para><para>The True Random Number Generator (TRNG) module generates random data of variable lengths from a source of entropy. The output is suitable for applications requiring cryptographically random data such as keying material for private or symmetric keys.</para><para><anchor id="_t_r_n_g_8h_1ti_drivers_TRNG_Usage"/><heading level="1">Usage</heading>
</para><para><heading level="2">Before starting a TRNG operation</heading>
</para><para>Before starting a TRNG operation, the application must do the following:<itemizedlist>
<listitem><para>Call <ref refid="_t_r_n_g_8h_1a0f5e55c289bb677e686c687fc92de9a4" kindref="member">TRNG_init()</ref> to initialize the driver.</para></listitem><listitem><para>Call <ref refid="_t_r_n_g_8h_1a53b7f36d914ed9bcc1b11f58633c06da" kindref="member">TRNG_Params_init()</ref> to initialize the <ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref> to default values.</para></listitem><listitem><para>Modify the <ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref> as desired.</para></listitem><listitem><para>Call <ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open()</ref> to open an instance of the driver.</para></listitem><listitem><para>Option 1: Use <ref refid="_t_r_n_g_8h_1a5e16c78c037c0793d7126c2cce7f007d" kindref="member">TRNG_generateKey()</ref> that writes random bytes to a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. <linebreak/>
 Initialize a blank <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. These opaque data structures are representations of keying material and its storage. Depending on how the keying material is stored (RAM or flash, key store), the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> must be initialized differently. The TRNG API can handle all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. However, not all device-specific implementations support all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. Devices without a key store will not support CryptoKeys with keying material stored in a key store for example. All devices support plaintext CryptoKeys.</para></listitem><listitem><para>Option 2: Use <ref refid="_t_r_n_g_8h_1ac671624bdf54d57adf1f403e4be1a778" kindref="member">TRNG_getRandomBytes()</ref> that writes random bytes to a buffer. <linebreak/>
 Allocate memory sufficient to hold the number of bytes of random data requested.</para></listitem></itemizedlist>
</para><para><heading level="2">TRNG operations</heading>
</para><para><ref refid="_t_r_n_g_8h_1a5e16c78c037c0793d7126c2cce7f007d" kindref="member">TRNG_generateKey()</ref> provides the most basic functionality. Use it to generate key-material of a specified size. An example use-case would be generating a symmetric key for AES encryption and / or authentication. If entropy data is needed for anything other than a key-material, use <ref refid="_t_r_n_g_8h_1ac671624bdf54d57adf1f403e4be1a778" kindref="member">TRNG_getRandomBytes()</ref> that writes random bytes from the entropy source to a buffer/array.</para><para>For CC27XX, the CRNG is the default configuration for the NRBG engine. Use TRNGLPF3HSM_switchNrbgMode() to switch between CRNG and TRNG configurations.</para><para>For CC27XX devices only, the TRNG driver accepts two types of cryptoKey encoding:<itemizedlist>
<listitem><para>CryptoKey_BLANK_PLAINTEXT</para></listitem><listitem><para>CryptoKey_BLANK_PLAINTEXT_HSM</para></listitem></itemizedlist>
</para><para>To generate an ECC private key, you should use rejection sampling to ensure that the keying material is in the interval [1, n - 1]. The ECDH public key generation APIs will reject private keys that are outside of this interval. This information may be used to generate keying material until a suitable key is generated. For most curves, it is improbable to generate a random number outside of this interval because n is a large number close to the maximum number that would fit in the k-byte keying material array. An example of how to do this is given below.</para><para><heading level="2">TRNG Driver Limitation for CC27XX devices</heading>
</para><para>For CC27XX devices, the underlying HSM engine for which the driver gets its source of entropy and random numbers from, you have the ability to configure the NRBG (Non-deterministic Random Bits Generator) engine which is part of the HSM in either CRNG or TRNG modes. Please refer to the device specific header file for a definition of both methods.</para><para>In addition, the size of random data requested must be a 32-bit multiple. The appropriate error code, TRNG_STATUS_INVALID_INPUT_SIZE, will be returned to the user in the case this rule is not adhered to and the input size is not a multiple of 4 bytes, (32-bits).</para><para>For example, in the case you are requesting a 521-bit (66 bytes) key for a SEC_P_521 related asymmetric key operations, the user must provide a buffer and a input size that rounds up to the next (32-bit) aligned byte (68 Bytes) and therefore, adheres to the above limitation.</para><para><heading level="2">After the TRNG operation completes</heading>
</para><para>After the TRNG operation completes, the application should either start another operation or close the driver by calling <ref refid="_t_r_n_g_8h_1a13b2fd9b511f35defafc5e316beacc2e" kindref="member">TRNG_close()</ref>.</para><para><anchor id="_t_r_n_g_8h_1ti_drivers_TRNG_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_t_r_n_g_8h_1ti_drivers_TRNG_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>TRNG<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>TRNG<sp/>channel<sp/>index</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TRNG_INSTANCE<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>KEY_LENGTH_BYTES<sp/>16</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>TRNG_open(TRNG_INSTANCE,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initBlankKey(&amp;entropyKey,<sp/>entropyBuffer,<sp/>KEY_LENGTH_BYTES);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>TRNG_generateKey(handle,<sp/>&amp;entropyKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_close(handle);</highlight></codeline>
</programlisting></para><para><anchor id="_t_r_n_g_8h_1ti_drivers_TRNG_Examples"/><heading level="2">Examples</heading>
</para><para><heading level="3">TRNG force a reseed (for CC27XX devices only)</heading>
</para><para>This example code for reseeding the DRBG engine is only applicable for CC27XX devices. Other devices and their corresponding SDKs do not have this API.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>KEY_LENGTH_BYTES<sp/>16</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>result;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>randomBytesArray[RANDOM_BYTES_SIZE]<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!handle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>TRNGLPF3HSM_reseedDRBG(handle);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_close(handle);</highlight></codeline>
</programlisting></para><para><heading level="3">TRNG switch NRBG engine (for CC27XX devices only)</heading>
</para><para>!!!!!!!!!!!!! WARNING !!!!!!!!!!!!! This example code is only applicable for CC27XX devices. Other devices and their corresponding SDKs do not have this API.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>KEY_LENGTH_BYTES<sp/>16</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>result;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>randomBytesArray[RANDOM_BYTES_SIZE]<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>driver<sp/>is<sp/>initialized<sp/>with<sp/>CRNG<sp/>configuration<sp/>by<sp/>default.</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!handle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>TRNGLPF3HSM_switchNrbgMode(handle,<sp/>TRNG_MODE_TRNG);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_close(handle);</highlight></codeline>
</programlisting></para><para><heading level="3">Generate symmetric encryption key</heading>
</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>KEY_LENGTH_BYTES<sp/>16</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>result;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>entropyKey;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>entropyBuffer[KEY_LENGTH_BYTES]<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!handle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initBlankKey(&amp;entropyKey,<sp/>entropyBuffer,<sp/>KEY_LENGTH_BYTES);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>TRNG_generateKey(handle,<sp/>&amp;entropyKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_close(handle);</highlight></codeline>
</programlisting></para><para><heading level="3">Generate ECC private and public key using rejection sampling</heading>
</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/ECDH.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/ecc/ECCParams.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_Handle<sp/>trngHandle;</highlight></codeline>
<codeline><highlight class="normal">ECDH_Handle<sp/>ecdhHandle;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>privateKey;</highlight></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>publicKey;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>trngResult;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>ecdhResult;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>privateKeyingMaterial[32];</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>publicKeyingMaterial[64];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ECDH_OperationGeneratePublicKey<sp/>genPubKeyOperation;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">trngHandle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!trngHandle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ecdhHandle<sp/>=<sp/>ECDH_open(0,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!ecdhHandle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Repeatedly<sp/>generate<sp/>random<sp/>numbers<sp/>until<sp/>they<sp/>are<sp/>in<sp/>the<sp/>range<sp/>[1,<sp/>n<sp/>-<sp/>1].</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>NIST-P256<sp/>order<sp/>is<sp/>so<sp/>close<sp/>to<sp/>2^256,<sp/>the<sp/>probability<sp/>of<sp/>needing</highlight></codeline>
<codeline><highlight class="normal">//<sp/>to<sp/>generate<sp/>more<sp/>than<sp/>one<sp/>random<sp/>number<sp/>is<sp/>incredibly<sp/>low<sp/>but<sp/>not<sp/>non-zero.</highlight></codeline>
<codeline><highlight class="normal">do<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initBlankKey(&amp;privateKey,<sp/>privateKeyingMaterial,<sp/>ECCParams_NISTP256.length);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initBlankKey(&amp;publicKey,<sp/>publicKeyingMaterial,<sp/>2<sp/>*<sp/>ECCParams_NISTP256.length);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>trngResult<sp/>=<sp/>TRNG_generateKey(trngHandle,<sp/>&amp;privateKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(trngResult<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ECDH_OperationGeneratePublicKey_init(&amp;genPubKeyOperation);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>genPubKeyOperation.curve<sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>genPubKeyOperation.myPrivateKey<sp/>=<sp/>&amp;privateKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>genPubKeyOperation.myPublicKey<sp/>=<sp/>&amp;publicKey;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ecdhResult<sp/>=<sp/>ECDH_generatePublicKey(ecdhHandle,<sp/>&amp;genPubKeyOperation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>while(ecdhResult<sp/>==<sp/>ECDH_STATUS_PRIVATE_KEY_LARGER_EQUAL_ORDER<sp/>||<sp/>ecdhResult<sp/>==<sp/>ECDH_STATUS_PRIVATE_KEY_ZERO);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_close(trngHandle);</highlight></codeline>
<codeline><highlight class="normal">ECDH_close(ecdhHandle);</highlight></codeline>
</programlisting></para><para><heading level="3">Generate random bytes to a user provided buffer</heading>
</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>RANDOM_BYTES_SIZE<sp/>16</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>result;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>randomBytesArray[RANDOM_BYTES_SIZE]<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!handle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TRNG_close(handle);</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018-2024,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRNG.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>TRNG<sp/>driver<sp/>header</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_TRNG_Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>True<sp/>Random<sp/>Number<sp/>Generator<sp/>(TRNG)<sp/>module<sp/>generates<sp/>random<sp/>data<sp/>of<sp/>variable</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>lengths<sp/>from<sp/>a<sp/>source<sp/>of<sp/>entropy.<sp/>The<sp/>output<sp/>is<sp/>suitable<sp/>for<sp/>applications</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>requiring<sp/>cryptographically<sp/>random<sp/>data<sp/>such<sp/>as<sp/>keying<sp/>material<sp/>for</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>private<sp/>or<sp/>symmetric<sp/>keys.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_TRNG_Usage</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage<sp/>#</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Before<sp/>starting<sp/>a<sp/>TRNG<sp/>operation<sp/>#</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>Before<sp/>starting<sp/>a<sp/>TRNG<sp/>operation,<sp/>the<sp/>application<sp/>must<sp/>do<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>TRNG_init()<sp/>to<sp/>initialize<sp/>the<sp/>driver.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>TRNG_Params_init()<sp/>to<sp/>initialize<sp/>the<sp/>TRNG_Params<sp/>to<sp/>default<sp/>values.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Modify<sp/>the<sp/>TRNG_Params<sp/>as<sp/>desired.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>TRNG_open()<sp/>to<sp/>open<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>driver.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Option<sp/>1:<sp/>Use<sp/>TRNG_generateKey()<sp/>that<sp/>writes<sp/>random<sp/>bytes<sp/>to<sp/>a<sp/>CryptoKey.<sp/>&lt;br&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialize<sp/>a<sp/>blank<sp/>CryptoKey.<sp/>These<sp/>opaque<sp/>data<sp/>structures<sp/>are<sp/>representations</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>keying<sp/>material<sp/>and<sp/>its<sp/>storage.<sp/>Depending<sp/>on<sp/>how<sp/>the<sp/>keying<sp/>material</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>stored<sp/>(RAM<sp/>or<sp/>flash,<sp/>key<sp/>store),<sp/>the<sp/>CryptoKey<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialized<sp/>differently.<sp/>The<sp/>TRNG<sp/>API<sp/>can<sp/>handle<sp/>all<sp/>types<sp/>of<sp/>CryptoKey.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>However,<sp/>not<sp/>all<sp/>device-specific<sp/>implementations<sp/>support<sp/>all<sp/>types<sp/>of<sp/>CryptoKey.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Devices<sp/>without<sp/>a<sp/>key<sp/>store<sp/>will<sp/>not<sp/>support<sp/>CryptoKeys<sp/>with<sp/>keying<sp/>material</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stored<sp/>in<sp/>a<sp/>key<sp/>store<sp/>for<sp/>example.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>All<sp/>devices<sp/>support<sp/>plaintext<sp/>CryptoKeys.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Option<sp/>2:<sp/>Use<sp/>TRNG_getRandomBytes()<sp/>that<sp/>writes<sp/>random<sp/>bytes<sp/>to<sp/>a<sp/>buffer.<sp/>&lt;br&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Allocate<sp/>memory<sp/>sufficient<sp/>to<sp/>hold<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>of<sp/>random<sp/>data<sp/>requested.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>TRNG<sp/>operations<sp/>#</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_generateKey()<sp/>provides<sp/>the<sp/>most<sp/>basic<sp/>functionality.<sp/>Use<sp/>it<sp/>to</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>generate<sp/>key-material<sp/>of<sp/>a<sp/>specified<sp/>size.<sp/>An<sp/>example<sp/>use-case<sp/>would<sp/>be<sp/>generating</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>symmetric<sp/>key<sp/>for<sp/>AES<sp/>encryption<sp/>and<sp/>/<sp/>or<sp/>authentication.<sp/>If<sp/>entropy<sp/>data<sp/>is<sp/>needed</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>anything<sp/>other<sp/>than<sp/>a<sp/>key-material,<sp/>use<sp/>TRNG_getRandomBytes()<sp/>that</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>writes<sp/>random<sp/>bytes<sp/>from<sp/>the<sp/>entropy<sp/>source<sp/>to<sp/>a<sp/>buffer/array.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>CC27XX,<sp/>the<sp/>CRNG<sp/>is<sp/>the<sp/>default<sp/>configuration<sp/>for<sp/>the<sp/>NRBG<sp/>engine.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>Use<sp/>TRNGLPF3HSM_switchNrbgMode()<sp/>to<sp/>switch<sp/>between<sp/>CRNG<sp/>and<sp/>TRNG<sp/>configurations.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>CC27XX<sp/>devices<sp/>only,<sp/>the<sp/>TRNG<sp/>driver<sp/>accepts<sp/>two<sp/>types<sp/>of<sp/>cryptoKey<sp/>encoding:</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>CryptoKey_BLANK_PLAINTEXT</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>CryptoKey_BLANK_PLAINTEXT_HSM</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>generate<sp/>an<sp/>ECC<sp/>private<sp/>key,<sp/>you<sp/>should<sp/>use<sp/>rejection<sp/>sampling<sp/>to<sp/>ensure</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>that<sp/>the<sp/>keying<sp/>material<sp/>is<sp/>in<sp/>the<sp/>interval<sp/>[1,<sp/>n<sp/>-<sp/>1].<sp/>The<sp/>ECDH<sp/>public<sp/>key</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>generation<sp/>APIs<sp/>will<sp/>reject<sp/>private<sp/>keys<sp/>that<sp/>are<sp/>outside<sp/>of<sp/>this<sp/>interval.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>information<sp/>may<sp/>be<sp/>used<sp/>to<sp/>generate<sp/>keying<sp/>material<sp/>until<sp/>a<sp/>suitable</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>key<sp/>is<sp/>generated.<sp/>For<sp/>most<sp/>curves,<sp/>it<sp/>is<sp/>improbable<sp/>to<sp/>generate<sp/>a<sp/>random<sp/>number</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>outside<sp/>of<sp/>this<sp/>interval<sp/>because<sp/>n<sp/>is<sp/>a<sp/>large<sp/>number<sp/>close<sp/>to<sp/>the<sp/>maximum</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>number<sp/>that<sp/>would<sp/>fit<sp/>in<sp/>the<sp/>k-byte<sp/>keying<sp/>material<sp/>array.<sp/>An<sp/>example</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>how<sp/>to<sp/>do<sp/>this<sp/>is<sp/>given<sp/>below.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>TRNG<sp/>Driver<sp/>Limitation<sp/>for<sp/>CC27XX<sp/>devices<sp/>#</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>CC27XX<sp/>devices,<sp/>the<sp/>underlying<sp/>HSM<sp/>engine<sp/>for<sp/>which<sp/>the<sp/>driver<sp/>gets<sp/>its<sp/>source<sp/>of</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>entropy<sp/>and<sp/>random<sp/>numbers<sp/>from,<sp/>you<sp/>have<sp/>the<sp/>ability<sp/>to<sp/>configure<sp/>the<sp/>NRBG</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>(Non-deterministic<sp/>Random<sp/>Bits<sp/>Generator)<sp/>engine<sp/>which<sp/>is<sp/>part<sp/>of<sp/>the<sp/>HSM<sp/>in<sp/>either</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>CRNG<sp/>or<sp/>TRNG<sp/>modes.<sp/>Please<sp/>refer<sp/>to<sp/>the<sp/>device<sp/>specific<sp/>header<sp/>file<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>definition<sp/>of<sp/>both<sp/>methods.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>addition,<sp/>the<sp/>size<sp/>of<sp/>random<sp/>data<sp/>requested<sp/>must<sp/>be<sp/>a<sp/>32-bit<sp/>multiple.<sp/>The</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>appropriate<sp/>error<sp/>code,<sp/>TRNG_STATUS_INVALID_INPUT_SIZE,<sp/>will<sp/>be<sp/>returned<sp/>to<sp/>the<sp/>user<sp/>in</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>case<sp/>this<sp/>rule<sp/>is<sp/>not<sp/>adhered<sp/>to<sp/>and<sp/>the<sp/>input<sp/>size<sp/>is<sp/>not<sp/>a<sp/>multiple<sp/>of<sp/>4<sp/>bytes,<sp/>(32-bits).</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>example,<sp/>in<sp/>the<sp/>case<sp/>you<sp/>are<sp/>requesting<sp/>a<sp/>521-bit<sp/>(66<sp/>bytes)<sp/>key<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>SEC_P_521<sp/>related<sp/>asymmetric<sp/>key<sp/>operations,<sp/>the<sp/>user<sp/>must<sp/>provide<sp/>a<sp/>buffer<sp/>and<sp/>a<sp/>input<sp/>size</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>that<sp/>rounds<sp/>up<sp/>to<sp/>the<sp/>next<sp/>(32-bit)<sp/>aligned<sp/>byte<sp/>(68<sp/>Bytes)<sp/>and<sp/>therefore,</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>adheres<sp/>to<sp/>the<sp/>above<sp/>limitation.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>After<sp/>the<sp/>TRNG<sp/>operation<sp/>completes<sp/>#</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>After<sp/>the<sp/>TRNG<sp/>operation<sp/>completes,<sp/>the<sp/>application<sp/>should<sp/>either<sp/>start<sp/>another<sp/>operation</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>or<sp/>close<sp/>the<sp/>driver<sp/>by<sp/>calling<sp/>TRNG_close().</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_TRNG_Synopsis</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_TRNG_Synopsis_Code</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>TRNG<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Define<sp/>name<sp/>for<sp/>TRNG<sp/>channel<sp/>index</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>TRNG_INSTANCE<sp/>0</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>KEY_LENGTH_BYTES<sp/>16</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_init();</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>TRNG_open(TRNG_INSTANCE,<sp/>NULL);</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>CryptoKeyPlaintext_initBlankKey(&amp;entropyKey,<sp/>entropyBuffer,<sp/>KEY_LENGTH_BYTES);</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>TRNG_generateKey(handle,<sp/>&amp;entropyKey);</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_close(handle);</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_TRNG_Examples</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Examples</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>###<sp/>TRNG<sp/>force<sp/>a<sp/>reseed<sp/>(for<sp/>CC27XX<sp/>devices<sp/>only)<sp/>#</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>This<sp/>example<sp/>code<sp/>for<sp/>reseeding<sp/>the<sp/>DRBG<sp/>engine<sp/>is<sp/>only<sp/>applicable<sp/>for<sp/>CC27XX</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>devices.<sp/>Other<sp/>devices<sp/>and<sp/>their<sp/>corresponding<sp/>SDKs<sp/>do<sp/>not<sp/>have<sp/>this<sp/>API.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>KEY_LENGTH_BYTES<sp/>16</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>result;</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>randomBytesArray[RANDOM_BYTES_SIZE]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(!handle)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>TRNGLPF3HSM_reseedDRBG(handle);</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_close(handle);</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>###<sp/>TRNG<sp/>switch<sp/>NRBG<sp/>engine<sp/>(for<sp/>CC27XX<sp/>devices<sp/>only)<sp/>#</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>!!!!!!!!!!!!!<sp/>WARNING<sp/>!!!!!!!!!!!!!</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>This<sp/>example<sp/>code<sp/>is<sp/>only<sp/>applicable<sp/>for<sp/>CC27XX<sp/>devices.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>Other<sp/>devices<sp/>and<sp/>their<sp/>corresponding<sp/>SDKs<sp/>do<sp/>not<sp/>have<sp/>this<sp/>API.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>KEY_LENGTH_BYTES<sp/>16</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>result;</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>randomBytesArray[RANDOM_BYTES_SIZE]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>The<sp/>driver<sp/>is<sp/>initialized<sp/>with<sp/>CRNG<sp/>configuration<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(!handle)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>TRNGLPF3HSM_switchNrbgMode(handle,<sp/>TRNG_MODE_TRNG);</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_close(handle);</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Generate<sp/>symmetric<sp/>encryption<sp/>key<sp/>#</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>KEY_LENGTH_BYTES<sp/>16</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>result;</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/>CryptoKey<sp/>entropyKey;</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>entropyBuffer[KEY_LENGTH_BYTES]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(!handle)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/>CryptoKeyPlaintext_initBlankKey(&amp;entropyKey,<sp/>entropyBuffer,<sp/>KEY_LENGTH_BYTES);</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>TRNG_generateKey(handle,<sp/>&amp;entropyKey);</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_close(handle);</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Generate<sp/>ECC<sp/>private<sp/>and<sp/>public<sp/>key<sp/>using<sp/>rejection<sp/>sampling<sp/>#</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/ECDH.h&gt;</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/cryptoutils/ecc/ECCParams.h&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_Handle<sp/>trngHandle;</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/>ECDH_Handle<sp/>ecdhHandle;</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/><sp/>CryptoKey<sp/>privateKey;</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/><sp/>CryptoKey<sp/>publicKey;</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>trngResult;</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>ecdhResult;</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>privateKeyingMaterial[32];</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>publicKeyingMaterial[64];</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/><sp/>ECDH_OperationGeneratePublicKey<sp/>genPubKeyOperation;</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/><sp/>trngHandle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(!trngHandle)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/>ecdhHandle<sp/>=<sp/>ECDH_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(!ecdhHandle)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Repeatedly<sp/>generate<sp/>random<sp/>numbers<sp/>until<sp/>they<sp/>are<sp/>in<sp/>the<sp/>range<sp/>[1,<sp/>n<sp/>-<sp/>1].</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Since<sp/>the<sp/>NIST-P256<sp/>order<sp/>is<sp/>so<sp/>close<sp/>to<sp/>2^256,<sp/>the<sp/>probability<sp/>of<sp/>needing</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>to<sp/>generate<sp/>more<sp/>than<sp/>one<sp/>random<sp/>number<sp/>is<sp/>incredibly<sp/>low<sp/>but<sp/>not<sp/>non-zero.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/><sp/>do<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initBlankKey(&amp;privateKey,<sp/>privateKeyingMaterial,<sp/>ECCParams_NISTP256.length);</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initBlankKey(&amp;publicKey,<sp/>publicKeyingMaterial,<sp/>2<sp/>*<sp/>ECCParams_NISTP256.length);</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>trngResult<sp/>=<sp/>TRNG_generateKey(trngHandle,<sp/>&amp;privateKey);</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(trngResult<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ECDH_OperationGeneratePublicKey_init(&amp;genPubKeyOperation);</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>genPubKeyOperation.curve<sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>genPubKeyOperation.myPrivateKey<sp/>=<sp/>&amp;privateKey;</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>genPubKeyOperation.myPublicKey<sp/>=<sp/>&amp;publicKey;</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ecdhResult<sp/>=<sp/>ECDH_generatePublicKey(ecdhHandle,<sp/>&amp;genPubKeyOperation);</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/><sp/>}<sp/>while(ecdhResult<sp/>==<sp/>ECDH_STATUS_PRIVATE_KEY_LARGER_EQUAL_ORDER<sp/>||<sp/>ecdhResult<sp/>==<sp/>ECDH_STATUS_PRIVATE_KEY_ZERO);</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_close(trngHandle);</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/><sp/>ECDH_close(ecdhHandle);</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Generate<sp/>random<sp/>bytes<sp/>to<sp/>a<sp/>user<sp/>provided<sp/>buffer<sp/>#</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/TRNG.h&gt;</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>RANDOM_BYTES_SIZE<sp/>16</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>result;</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>randomBytesArray[RANDOM_BYTES_SIZE]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>TRNG_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(!handle)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>TRNG_getRandomBytes(handle,<sp/>randomBytesArray,<sp/>RANDOM_BYTES_SIZE);</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(result<sp/>!=<sp/>TRNG_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/><sp/>TRNG_close(handle);</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_TRNG__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_TRNG__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_crypto_key_8h" kindref="compound">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="_t_r_n_g_8h_1ab873e919841a0770ee602b8b9a3cd9a3" refkind="member"><highlight class="preprocessor">#define<sp/>TRNG_STATUS_RESERVED<sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="_t_r_n_g_8h_1ada01c2ca6b7043d067d07410e7c0d8bc" refkind="member"><highlight class="preprocessor">#define<sp/>TRNG_STATUS_SUCCESS<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="_t_r_n_g_8h_1a80cc550c12f937e36cf602accc843766" refkind="member"><highlight class="preprocessor">#define<sp/>TRNG_STATUS_ERROR<sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="_t_r_n_g_8h_1a9df04d8cca579f5607e90928c045bf5a" refkind="member"><highlight class="preprocessor">#define<sp/>TRNG_STATUS_RESOURCE_UNAVAILABLE<sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="_t_r_n_g_8h_1ad91b7c30222145751dfde298fd4f0931" refkind="member"><highlight class="preprocessor">#define<sp/>TRNG_STATUS_INVALID_INPUTS<sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="_t_r_n_g_8h_1a1d2b8471f683ab8eee0cb486923e0d74" refkind="member"><highlight class="preprocessor">#define<sp/>TRNG_STATUS_CANCELED<sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="_t_r_n_g_8h_1ab3cec1fd6f36154d815d6cbbd9b75980" refkind="member"><highlight class="preprocessor">#define<sp/>TRNG_STATUS_KEYSTORE_ERROR<sp/>(-5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="struct_t_r_n_g___config" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456" refid="struct_t_r_n_g___config_1a727d3498e892ce603992faf979ba4e80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_t_r_n_g___config_1a727d3498e892ce603992faf979ba4e80" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="459" refid="struct_t_r_n_g___config_1abfbdd16990fc3515d7642465672a7f6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_t_r_n_g___config_1abfbdd16990fc3515d7642465672a7f6b" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}<sp/><ref refid="struct_t_r_n_g___config" kindref="compound">TRNG_Config</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_t_r_n_g___config" kindref="compound">TRNG_Config</ref><sp/>*<ref refid="_t_r_n_g_8h_1a4adf751507cdd181131bd0ed63d38f64" kindref="member">TRNG_Handle</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490" refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ae008580d6d7344764d9bfca00008a3e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ae008580d6d7344764d9bfca00008a3e9" kindref="member">TRNG_RETURN_BEHAVIOR_CALLBACK</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="496" refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ad188b4caad4b0c035728edfdb1e8e622" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944ad188b4caad4b0c035728edfdb1e8e622" kindref="member">TRNG_RETURN_BEHAVIOR_BLOCKING</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="500" refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944a45fe5c71066635f6f2bde444fe2bbc5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944a45fe5c71066635f6f2bde444fe2bbc5b" kindref="member">TRNG_RETURN_BEHAVIOR_POLLING</ref><sp/><sp/>=<sp/>4,<sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal">}<sp/><ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944" kindref="member">TRNG_ReturnBehavior</ref>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="_t_r_n_g_8h_1aca5783fdcaae4122d32c20acc50624ca" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_t_r_n_g_8h_1aca5783fdcaae4122d32c20acc50624ca" kindref="member">TRNG_CryptoKeyCallbackFxn</ref>)(TRNG_Handle<sp/>handle,<sp/>int_fast16_t<sp/>returnValue,<sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*entropy);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="_t_r_n_g_8h_1a3b6ab900da9a5ac5e2524836d63ef50b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_t_r_n_g_8h_1a3b6ab900da9a5ac5e2524836d63ef50b" kindref="member">TRNG_RandomBytesCallbackFxn</ref>)(TRNG_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnValue,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*randomBytes,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>randomBytesSize);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="_t_r_n_g_8h_1a602fd3db9db486b24efbe71e9a841887" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_t_r_n_g_8h_1aca5783fdcaae4122d32c20acc50624ca" kindref="member">TRNG_CryptoKeyCallbackFxn</ref><sp/><ref refid="_t_r_n_g_8h_1a602fd3db9db486b24efbe71e9a841887" kindref="member">TRNG_CallbackFxn</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="struct_t_r_n_g___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561" refid="struct_t_r_n_g___params_1acf65c71f5b682d34aee78a772c39765e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_t_r_n_g_8h_1a43aba3552e575a554fa531509c27e944" kindref="member">TRNG_ReturnBehavior</ref><sp/><ref refid="struct_t_r_n_g___params_1acf65c71f5b682d34aee78a772c39765e" kindref="member">returnBehavior</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="562" refid="struct_t_r_n_g___params_1a3451da25837350f655b5418e12b54304" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_t_r_n_g_8h_1aca5783fdcaae4122d32c20acc50624ca" kindref="member">TRNG_CryptoKeyCallbackFxn</ref><sp/><ref refid="struct_t_r_n_g___params_1a3451da25837350f655b5418e12b54304" kindref="member">cryptoKeyCallbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="565" refid="struct_t_r_n_g___params_1a765557c6c923d9abc07bf11272e8a637" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_t_r_n_g_8h_1a3b6ab900da9a5ac5e2524836d63ef50b" kindref="member">TRNG_RandomBytesCallbackFxn</ref><sp/><ref refid="struct_t_r_n_g___params_1a765557c6c923d9abc07bf11272e8a637" kindref="member">randomBytesCallbackFxn</ref>;<sp/></highlight></codeline>
<codeline lineno="568" refid="struct_t_r_n_g___params_1a66b27173e274d714d5f7801f906e417c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_t_r_n_g___params_1a66b27173e274d714d5f7801f906e417c" kindref="member">timeout</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571" refid="struct_t_r_n_g___params_1a6c4dfcffcd1b6d08d9bb77bf7309bfd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_t_r_n_g___params_1a6c4dfcffcd1b6d08d9bb77bf7309bfd5" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="572"><highlight class="normal">}<sp/><ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref>;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref><sp/><ref refid="_t_r_n_g_8h_1a145efe92a31bca6c39f57619faf895d2" kindref="member">TRNG_defaultParams</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_t_r_n_g_8h_1a0f5e55c289bb677e686c687fc92de9a4" kindref="member">TRNG_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_t_r_n_g_8h_1a53b7f36d914ed9bcc1b11f58633c06da" kindref="member">TRNG_Params_init</ref>(<ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">TRNG_Handle<sp/><ref refid="_t_r_n_g_8h_1a77b3120825e3d0514fc213ff626be0ed" kindref="member">TRNG_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_t_r_n_g_8h_1a13b2fd9b511f35defafc5e316beacc2e" kindref="member">TRNG_close</ref>(TRNG_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">int_fast16_t<sp/><ref refid="_t_r_n_g_8h_1a3afd5042c7bb40f654e546ed5cc70246" kindref="member">TRNG_generateEntropy</ref>(TRNG_Handle<sp/>handle,<sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*entropy);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal">int_fast16_t<sp/><ref refid="_t_r_n_g_8h_1a5e16c78c037c0793d7126c2cce7f007d" kindref="member">TRNG_generateKey</ref>(TRNG_Handle<sp/>handle,<sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*entropy);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal">int_fast16_t<sp/><ref refid="_t_r_n_g_8h_1ac671624bdf54d57adf1f403e4be1a778" kindref="member">TRNG_getRandomBytes</ref>(TRNG_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*randomBytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>randomBytesSize);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal">TRNG_Handle<sp/><ref refid="_t_r_n_g_8h_1a6e64ed78ddcf7149a347be2a2d60df1b" kindref="member">TRNG_construct</ref>(<ref refid="struct_t_r_n_g___config" kindref="compound">TRNG_Config</ref><sp/>*config,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_r_n_g___params" kindref="compound">TRNG_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal">int_fast16_t<sp/><ref refid="_t_r_n_g_8h_1a10aefaa0cff3d97b483d8b37dfc3b043" kindref="member">TRNG_cancelOperation</ref>(TRNG_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_TRNG__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/TRNG.h"/>
  </compounddef>
</doxygen>
