<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_i2_s_c_c26_x_x_8h" kind="file" language="C++">
    <compoundname>I2SCC26XX.h</compoundname>
    <includes refid="_i2_s_8h" local="no">ti/drivers/I2S.h</includes>
    <includes refid="_semaphore_p_8h" local="no">ti/drivers/dpl/SemaphoreP.h</includes>
    <includes refid="_hwi_p_8h" local="no">ti/drivers/dpl/HwiP.h</includes>
    <includes refid="_power_8h" local="no">ti/drivers/Power.h</includes>
    <incdepgraph>
      <node id="1281">
        <label>stdbool.h</label>
      </node>
      <node id="1284">
        <label>ti/drivers/dpl/SemaphoreP.h</label>
        <link refid="_semaphore_p_8h"/>
        <childnode refid="1282" relation="include">
        </childnode>
        <childnode refid="1281" relation="include">
        </childnode>
        <childnode refid="1280" relation="include">
        </childnode>
      </node>
      <node id="1282">
        <label>stdint.h</label>
      </node>
      <node id="1279">
        <label>ti/drivers/I2S.h</label>
        <link refid="_i2_s_8h"/>
        <childnode refid="1280" relation="include">
        </childnode>
        <childnode refid="1281" relation="include">
        </childnode>
        <childnode refid="1282" relation="include">
        </childnode>
        <childnode refid="1283" relation="include">
        </childnode>
      </node>
      <node id="1291">
        <label>ti/drivers/Temperature.h</label>
        <link refid="_temperature_8h"/>
        <childnode refid="1281" relation="include">
        </childnode>
        <childnode refid="1280" relation="include">
        </childnode>
        <childnode refid="1282" relation="include">
        </childnode>
        <childnode refid="1283" relation="include">
        </childnode>
      </node>
      <node id="1280">
        <label>stddef.h</label>
      </node>
      <node id="1286">
        <label>ti/drivers/Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="1283" relation="include">
        </childnode>
        <childnode refid="1287" relation="include">
        </childnode>
        <childnode refid="1288" relation="include">
        </childnode>
      </node>
      <node id="1285">
        <label>ti/drivers/dpl/HwiP.h</label>
        <link refid="_hwi_p_8h"/>
        <childnode refid="1282" relation="include">
        </childnode>
        <childnode refid="1281" relation="include">
        </childnode>
        <childnode refid="1280" relation="include">
        </childnode>
      </node>
      <node id="1287">
        <label>ti/devices/DeviceFamily.h</label>
      </node>
      <node id="1278">
        <label>I2SCC26XX.h</label>
        <link refid="_i2_s_c_c26_x_x_8h"/>
        <childnode refid="1279" relation="include">
        </childnode>
        <childnode refid="1284" relation="include">
        </childnode>
        <childnode refid="1285" relation="include">
        </childnode>
        <childnode refid="1286" relation="include">
        </childnode>
      </node>
      <node id="1283">
        <label>ti/drivers/utils/List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="1282" relation="include">
        </childnode>
        <childnode refid="1281" relation="include">
        </childnode>
        <childnode refid="1280" relation="include">
        </childnode>
      </node>
      <node id="1292">
        <label>DeviceFamily_constructPath(driverlib/sys_ctrl.h)</label>
      </node>
      <node id="1290">
        <label>ti/drivers/power/PowerCC26X2.h</label>
        <link refid="_power_c_c26_x2_8h"/>
        <childnode refid="1285" relation="include">
        </childnode>
        <childnode refid="1289" relation="include">
        </childnode>
        <childnode refid="1286" relation="include">
        </childnode>
        <childnode refid="1288" relation="include">
        </childnode>
        <childnode refid="1291" relation="include">
        </childnode>
        <childnode refid="1287" relation="include">
        </childnode>
        <childnode refid="1292" relation="include">
        </childnode>
      </node>
      <node id="1289">
        <label>ti/drivers/dpl/ClockP.h</label>
        <link refid="_clock_p_8h"/>
        <childnode refid="1282" relation="include">
        </childnode>
        <childnode refid="1281" relation="include">
        </childnode>
        <childnode refid="1280" relation="include">
        </childnode>
      </node>
      <node id="1288">
        <label>ti/drivers/power/PowerCC26XX.h</label>
        <link refid="_power_c_c26_x_x_8h"/>
        <childnode refid="1285" relation="include">
        </childnode>
        <childnode refid="1289" relation="include">
        </childnode>
        <childnode refid="1286" relation="include">
        </childnode>
        <childnode refid="1287" relation="include">
        </childnode>
        <childnode refid="1290" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_i2_s_c_c26_x_x___h_w_attrs" prot="public">I2SCC26XX_HWAttrs</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_i2_s_c_c26_x_x_8h_1aa84e66420b691a92b3afe93090563a41" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2SCC26XX_PtrUpdate) (I2S_Handle handle, I2SCC26XX_Interface *interface)</definition>
        <argsstring>)(I2S_Handle handle, I2SCC26XX_Interface *interface)</argsstring>
        <name>I2SCC26XX_PtrUpdate</name>
        <briefdescription>
<para>The definition of a function used by the I2S driver to refresh the pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2S_Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2S_Handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2SCC26XX_Interface</parametername>
</parameternamelist>
<parameterdescription>
<para>*interface Pointer on the interface to update </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/i2s/I2SCC26XX.h" line="298" column="1" bodyfile="source/ti/drivers/i2s/I2SCC26XX.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>I2S driver implementation for a CC26XX I2S controller. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para><heading level="1">Limitations</heading>
</para><para><heading level="2">Flash Memory range</heading>
</para><para>The I2S driver is unable to access flash memory in the address range 0x0000 - 0x2000 on devices based on the Cortex M33+ core (CC26X3/CC26X4) due to security constraints.</para><para><heading level="2">Supported <ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222" kindref="member">I2S_MemoryLength</ref> values</heading>
</para><para>Only the following memory lengths are supported:<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222aa95b67ba7278bcb1d9a64cba9a8e1bc8" kindref="member">I2S_MEMORY_LENGTH_16BITS</ref></para></listitem><listitem><para><ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222acc56087b412f11af3dc890f066fac0b6" kindref="member">I2S_MEMORY_LENGTH_24BITS</ref></para></listitem></itemizedlist>
</para><para><heading level="2"><ref refid="struct_i2_s___params" kindref="compound">I2S_Params</ref> Attributes Limitations</heading>
</para><para>Some attributes in the <ref refid="struct_i2_s___params" kindref="compound">I2S_Params</ref> structure have a limited set of supported values. These limitations are described below:<itemizedlist>
<listitem><para><ref refid="struct_i2_s___params_1aff5aa130ef087ebb86932182787c1df8" kindref="member">I2S_Params.samplingFrequency</ref><itemizedlist>
<listitem><para>The SCK frequency resulting from the selected sampling frequency should be between 47 kHz and 4 MHz.</para></listitem></itemizedlist>
</para></listitem><listitem><para><ref refid="struct_i2_s___params_1a040e104c9b7118fb5719b3007801a2cb" kindref="member">I2S_Params.isDMAUnused</ref><itemizedlist>
<listitem><para>Must be false. All transmissions are always performed by the I2S module&apos;s own DMA.</para></listitem></itemizedlist>
</para></listitem><listitem><para><ref refid="struct_i2_s___params_1aa6bc7fe594699bd27444b2b3b8aa17e4" kindref="member">I2S_Params.isMSBFirst</ref><itemizedlist>
<listitem><para>Must be true. All samples are always transmitted MSB first.</para></listitem></itemizedlist>
</para></listitem><listitem><para><ref refid="struct_i2_s___params_1a257e437c1d8fb08ddd7457c47c479db5" kindref="member">I2S_Params.memorySlotLength</ref><itemizedlist>
<listitem><para>Must be one of the suported <ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222" kindref="member">I2S_MemoryLength</ref> values listed in the above section.</para></listitem></itemizedlist>
</para></listitem><listitem><para><ref refid="struct_i2_s___params_1ae3241f138f3e247875ef9686622b4d43" kindref="member">I2S_Params.fixedBufferLength</ref><itemizedlist>
<listitem><para>Additional restriction: Must be an even multiple of the number of bytes in a frame.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para><hruler/>
 <heading level="1">Sample Buffers</heading>
</para><para>This section describes the structure and requirements for the sample buffers used in the <ref refid="struct_i2_s___transaction" kindref="compound">I2S_Transaction</ref> objects.</para><para>Sample words are read from or written to the sample buffers in little-endian byte order, meaning that the least significant byte (LSByte) is stored at the lower byte address, and the most significant byte (MSByte) is stored at the higher byte address.</para><para>The sample buffers are divided into frames which are further subdivided into channels, and if a channel is used by both SD0 and SD1 (where the direction of the two pins are the same), then that channel is further subdivided into a sample word for first SD0 and then SD1.</para><para><heading level="2">Buffer Size Requirements</heading>
</para><para>The size of the buffers used in <ref refid="struct_i2_s___transaction" kindref="compound">I2S_Transaction</ref> objects must be an even multiple of the number of bytes per frame. I.e. the number of bytes in the buffers must be of the form: 2*n*k, where k is the size of a frame in bytes and n is an integer satisfying n&gt;=2. 2*n is the number of frames in the buffer.</para><para><heading level="2">General Sample Buffer Structure</heading>
</para><para>Below code describes the general structure of a sample buffer if SD0 and SD1 are configured to the same direction.</para><para><programlisting><codeline><highlight class="normal">struct</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">#if<sp/>SD0_USE_CHANNEL_0<sp/>||<sp/>SD1_USE_CHANNEL_0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#if<sp/>SD0_USE_CHANNEL_0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sd0SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#if<sp/>SD1_USE_CHANNEL_0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sd1SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>channel0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">#if<sp/>SD0_USE_CHANNEL_1<sp/>||<sp/>SD1_USE_CHANNEL_1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#if<sp/>SD0_USE_CHANNEL_1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sd0SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#if<sp/>SD1_USE_CHANNEL_1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sd1SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>channel1;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">#if<sp/>SD0_USE_CHANNEL_8<sp/>||<sp/>SD1_USE_CHANNEL_8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#if<sp/>SD0_USE_CHANNEL_8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sd0SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#if<sp/>SD1_USE_CHANNEL_8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sd1SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>channel8;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">}<sp/>sampleBufferFrames[FRAMES_PER_BUFFER];</highlight></codeline>
</programlisting></para><para>Notes:<itemizedlist>
<listitem><para><computeroutput>SD0_USE_CHANNEL_n</computeroutput> should be true if SD0 uses channel n, otherwise false.</para></listitem><listitem><para><computeroutput>SD1_USE_CHANNEL_n</computeroutput> should be true if SD1 uses channel n, otherwise false.</para></listitem><listitem><para><computeroutput>BYTES_PER_WORD</computeroutput> is based on the configured memory length:<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222aa95b67ba7278bcb1d9a64cba9a8e1bc8" kindref="member">I2S_MEMORY_LENGTH_16BITS</ref>: 2</para></listitem><listitem><para><ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222acc56087b412f11af3dc890f066fac0b6" kindref="member">I2S_MEMORY_LENGTH_24BITS</ref>: 3</para></listitem></itemizedlist>
</para></listitem><listitem><para><computeroutput>FRAMES_PER_BUFFER</computeroutput> must be divisible by 2</para></listitem><listitem><para><computeroutput>sampleBufferFrames</computeroutput> needs to be cast to an <computeroutput>uint8_t</computeroutput> pointer to be used with the I2S driver.</para></listitem></itemizedlist>
</para><para>If SD0 and SD1 are not configured to the same direction (or only one is used) then the structure can be simplified as below: <programlisting><codeline><highlight class="normal">struct</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">#if<sp/>USE_CHANNEL_0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>channel0SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">#if<sp/>USE_CHANNEL_1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>channel1SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">#if<sp/>USE_CHANNEL_8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>channel8SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">}<sp/>sampleBufferFrames[FRAMES_PER_BUFFER];</highlight></codeline>
</programlisting></para><para>Notes:<itemizedlist>
<listitem><para><computeroutput>USE_CHANNEL_n</computeroutput> should be true if channel n is used, otherwise false.</para></listitem></itemizedlist>
</para><para><heading level="3">Sample Buffer Structure Example</heading>
</para><para>If for example SD0 and SD1 are configured to the same direction and if channel 0 and 1 are used for SD0 and channel 0 is used for SD1, then the sample buffer would be structured as in the code below.</para><para><programlisting><codeline><highlight class="normal">struct</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sd0SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sd1SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>channel0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sd0SampleWord[BYTES_PER_WORD];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>channel1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>sampleBufferFrames[FRAMES_PER_BUFFER];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Access<sp/>LSB<sp/>of<sp/>sample<sp/>10<sp/>of<sp/>channel<sp/>0<sp/>on<sp/>SD1</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>tmp<sp/>=<sp/>sampleBufferFrames[10].channel0.sd1SampleWord[0];</highlight></codeline>
</programlisting> <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_i2s_I2SCC26XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_i2s_I2SCC26XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_i2_s_8h" kindref="compound">ti/drivers/I2S.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_semaphore_p_8h" kindref="compound">ti/drivers/dpl/SemaphoreP.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_hwi_p_8h" kindref="compound">ti/drivers/dpl/HwiP.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_power_8h" kindref="compound">ti/drivers/Power.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="struct_i2_s_c_c26_x_x___h_w_attrs" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235" refid="struct_i2_s_c_c26_x_x___h_w_attrs_1a20c7af10ef3e2a100752b14107ee35ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_least8_t<sp/><ref refid="struct_i2_s_c_c26_x_x___h_w_attrs_1a20c7af10ef3e2a100752b14107ee35ec" kindref="member">pinSD1</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="236" refid="struct_i2_s_c_c26_x_x___h_w_attrs_1a6c01c5dc7ee1e4d5934bde2dbf275b37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_least8_t<sp/><ref refid="struct_i2_s_c_c26_x_x___h_w_attrs_1a6c01c5dc7ee1e4d5934bde2dbf275b37" kindref="member">pinSD0</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="237" refid="struct_i2_s_c_c26_x_x___h_w_attrs_1aac0ae881400b3b4b7d4405444a775639" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_least8_t<sp/><ref refid="struct_i2_s_c_c26_x_x___h_w_attrs_1aac0ae881400b3b4b7d4405444a775639" kindref="member">pinSCK</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="238" refid="struct_i2_s_c_c26_x_x___h_w_attrs_1adc05b257f6f9c6b3b4ff1b7cd141270b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_least8_t<sp/><ref refid="struct_i2_s_c_c26_x_x___h_w_attrs_1adc05b257f6f9c6b3b4ff1b7cd141270b" kindref="member">pinCCLK</ref>;<sp/></highlight></codeline>
<codeline lineno="239" refid="struct_i2_s_c_c26_x_x___h_w_attrs_1aa99b3fe3d673d7760e783750235197ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_least8_t<sp/><ref refid="struct_i2_s_c_c26_x_x___h_w_attrs_1aa99b3fe3d673d7760e783750235197ab" kindref="member">pinWS</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240" refid="struct_i2_s_c_c26_x_x___h_w_attrs_1a993a403917ccb7fdb078e5464371d629" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_i2_s_c_c26_x_x___h_w_attrs_1a993a403917ccb7fdb078e5464371d629" kindref="member">intPriority</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal">}<sp/><ref refid="struct_i2_s_c_c26_x_x___h_w_attrs" kindref="compound">I2SCC26XX_HWAttrs</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>numberOfChannelsUsed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480" kindref="member">I2S_ChannelConfig</ref><sp/>channelsUsed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7e" kindref="member">I2S_DataInterfaceUse</ref><sp/>interfaceConfig;<sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal">}<sp/>I2SCC26XX_DataInterface;</highlight></codeline>
<codeline lineno="265"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>memoryStep;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>delay;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref><sp/>callback;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a7ce338dedc6f90e9b86705ad6a2e3eea" kindref="member">I2S_RegUpdate</ref><sp/>pointerSet;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a518f25dc99f76453c3ef7bfdb7fc390c" kindref="member">I2S_StopInterface</ref><sp/>stopInterface;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___transaction" kindref="compound">I2S_Transaction</ref><sp/>*activeTransfer;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}<sp/>I2SCC26XX_Interface;</highlight></codeline>
<codeline lineno="298" refid="_i2_s_c_c26_x_x_8h_1aa84e66420b691a92b3afe93090563a41" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_i2_s_c_c26_x_x_8h_1aa84e66420b691a92b3afe93090563a41" kindref="member">I2SCC26XX_PtrUpdate</ref>)(<ref refid="struct_i2_s___config" kindref="compound">I2S_Handle</ref><sp/>handle,<sp/>I2SCC26XX_Interface<sp/>*<ref refid="doxygen__drivers_8txt_1a8222c14413241c99b87d1c8f5e91b61d" kindref="member">interface</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOpen;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invertWS;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>memorySlotLength;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>dataShift;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bitsPerWord;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>beforeWordPadding;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>afterWordPadding;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>dmaBuffSizeConfig;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1adf99b8155252f529a3089cee99c52a51" kindref="member">I2S_SamplingEdge</ref><sp/>samplingEdge;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a54ce68790d113be856f3a6840bc3ebe0" kindref="member">I2S_Role</ref><sp/>moduleRole;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a5d9de87aff52f63eadf4a95560abd61f" kindref="member">I2S_PhaseType</ref><sp/>phaseType;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>CCLKDivider;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>SCKDivider;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>WSDivider;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>startUpDelay;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>I2SCC26XX_DataInterface<sp/>dataInterfaceSD0;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>I2SCC26XX_DataInterface<sp/>dataInterfaceSD1;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>I2S<sp/>SYS/BIOS<sp/>objects</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="union_hwi_p___struct" kindref="compound">HwiP_Struct</ref><sp/>hwi;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_c_c26_x_x_8h_1aa84e66420b691a92b3afe93090563a41" kindref="member">I2SCC26XX_PtrUpdate</ref><sp/>ptrUpdateFxn;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>I2SCC26XX_Interface<sp/>read;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>I2SCC26XX_Interface<sp/>write;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref><sp/>errorCallback;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>I2S<sp/>pre<sp/>and<sp/>post<sp/>notification<sp/>functions</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*i2sPreFxn;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*i2sPostFxn;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_power___notify_obj" kindref="compound">Power_NotifyObj</ref><sp/>i2sPreObj;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_power___notify_obj" kindref="compound">Power_NotifyObj</ref><sp/>i2sPostObj;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>i2sPowerConstraint;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">}<sp/>I2SCC26XX_Object;</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_i2s_I2SCC26XX__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/i2s/I2SCC26XX.h"/>
  </compounddef>
</doxygen>
