<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_clock_p_8h" kind="file" language="C++">
    <compoundname>ClockP.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includedby refid="_a_d_c_buf_c_c26_x2_8h" local="no">ADCBufCC26X2.h</includedby>
    <includedby refid="_a_d_c_buf_c_c26_x_x_8h" local="no">ADCBufCC26XX.h</includedby>
    <includedby refid="_button_8h" local="no">Button.h</includedby>
    <includedby refid="_l_e_d_8h" local="no">LED.h</includedby>
    <includedby refid="_power_c_c26_x2_8h" local="no">PowerCC26X2.h</includedby>
    <includedby refid="_power_c_c26_x_x_8h" local="no">PowerCC26XX.h</includedby>
    <includedby refid="_u_a_r_t2_8h" local="no">UART2.h</includedby>
    <incdepgraph>
      <node id="548">
        <label>stdbool.h</label>
      </node>
      <node id="547">
        <label>stdint.h</label>
      </node>
      <node id="549">
        <label>stddef.h</label>
      </node>
      <node id="546">
        <label>ClockP.h</label>
        <link refid="_clock_p_8h"/>
        <childnode refid="547" relation="include">
        </childnode>
        <childnode refid="548" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="576">
        <label>TimerCC26XX.h</label>
        <link refid="_timer_c_c26_x_x_8h"/>
      </node>
      <node id="575">
        <label>Timer.h</label>
        <link refid="_timer_8h"/>
        <childnode refid="576" relation="include">
        </childnode>
        <childnode refid="577" relation="include">
        </childnode>
      </node>
      <node id="578">
        <label>TRNGCC26XX.h</label>
        <link refid="_t_r_n_g_c_c26_x_x_8h"/>
        <childnode refid="579" relation="include">
        </childnode>
        <childnode refid="573" relation="include">
        </childnode>
        <childnode refid="580" relation="include">
        </childnode>
      </node>
      <node id="577">
        <label>TimerSupport.h</label>
        <link refid="_timer_support_8h"/>
      </node>
      <node id="571">
        <label>AESGCMCC26XX.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="566">
        <label>Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="557" relation="include">
        </childnode>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="567" relation="include">
        </childnode>
        <childnode refid="568" relation="include">
        </childnode>
        <childnode refid="569" relation="include">
        </childnode>
        <childnode refid="570" relation="include">
        </childnode>
        <childnode refid="571" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
        <childnode refid="559" relation="include">
        </childnode>
        <childnode refid="572" relation="include">
        </childnode>
        <childnode refid="573" relation="include">
        </childnode>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="574" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
        <childnode refid="565" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="560" relation="include">
        </childnode>
        <childnode refid="561" relation="include">
        </childnode>
        <childnode refid="575" relation="include">
        </childnode>
        <childnode refid="578" relation="include">
        </childnode>
        <childnode refid="581" relation="include">
        </childnode>
      </node>
      <node id="558">
        <label>DACCC26X2.h</label>
        <link refid="_d_a_c_c_c26_x2_8h"/>
      </node>
      <node id="568">
        <label>AESCCMCC26XX.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="564">
        <label>PDMCC26XX.h</label>
        <link refid="_p_d_m_c_c26_x_x_8h"/>
      </node>
      <node id="551">
        <label>ADCBufCC26X2.h</label>
        <link refid="_a_d_c_buf_c_c26_x2_8h"/>
      </node>
      <node id="562">
        <label>UART2CC26X2.h</label>
        <link refid="_u_a_r_t2_c_c26_x2_8h"/>
      </node>
      <node id="570">
        <label>AESGCMCC26X4.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x4_8h"/>
      </node>
      <node id="569">
        <label>AESECBCC26XX.h</label>
        <link refid="_a_e_s_e_c_b_c_c26_x_x_8h"/>
      </node>
      <node id="580">
        <label>RNGCC26XX.h</label>
        <link refid="_r_n_g_c_c26_x_x_8h"/>
      </node>
      <node id="561">
        <label>SPICC26X4DMA.h</label>
        <link refid="_s_p_i_c_c26_x4_d_m_a_8h"/>
      </node>
      <node id="567">
        <label>AESCCMCC26X4.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x4_8h"/>
      </node>
      <node id="574">
        <label>I2SCC26XX.h</label>
        <link refid="_i2_s_c_c26_x_x_8h"/>
      </node>
      <node id="554">
        <label>LED.h</label>
        <link refid="_l_e_d_8h"/>
      </node>
      <node id="582">
        <label>UART2Support.h</label>
        <link refid="_u_a_r_t2_support_8h"/>
      </node>
      <node id="559">
        <label>UDMACC26XX.h</label>
        <link refid="_u_d_m_a_c_c26_x_x_8h"/>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="560" relation="include">
        </childnode>
        <childnode refid="561" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
      </node>
      <node id="565">
        <label>PDMCC26XX_util.h</label>
        <link refid="_p_d_m_c_c26_x_x__util_8h"/>
      </node>
      <node id="552">
        <label>ADCBufCC26XX.h</label>
        <link refid="_a_d_c_buf_c_c26_x_x_8h"/>
      </node>
      <node id="563">
        <label>I2CCC26XX.h</label>
        <link refid="_i2_c_c_c26_x_x_8h"/>
      </node>
      <node id="584">
        <label>DisplayUart2.h</label>
        <link refid="_display_uart2_8h"/>
      </node>
      <node id="583">
        <label>LogSinkUART.h</label>
        <link refid="_log_sink_u_a_r_t_8h"/>
      </node>
      <node id="573">
        <label>ECDSACC26X2.h</label>
        <link refid="_e_c_d_s_a_c_c26_x2_8h"/>
      </node>
      <node id="555">
        <label>PowerCC26X2.h</label>
        <link refid="_power_c_c26_x2_8h"/>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
      </node>
      <node id="553">
        <label>Button.h</label>
        <link refid="_button_8h"/>
      </node>
      <node id="572">
        <label>ECDHCC26X2.h</label>
        <link refid="_e_c_d_h_c_c26_x2_8h"/>
      </node>
      <node id="550">
        <label>ClockP.h</label>
        <link refid="_clock_p_8h"/>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="554" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="581" relation="include">
        </childnode>
      </node>
      <node id="560">
        <label>SPICC26X2DMA.h</label>
        <link refid="_s_p_i_c_c26_x2_d_m_a_8h"/>
      </node>
      <node id="557">
        <label>ADCCC26XX.h</label>
        <link refid="_a_d_c_c_c26_x_x_8h"/>
      </node>
      <node id="556">
        <label>PowerCC26XX.h</label>
        <link refid="_power_c_c26_x_x_8h"/>
        <childnode refid="557" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
        <childnode refid="559" relation="include">
        </childnode>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
        <childnode refid="565" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="566" relation="include">
        </childnode>
        <childnode refid="560" relation="include">
        </childnode>
        <childnode refid="561" relation="include">
        </childnode>
      </node>
      <node id="581">
        <label>UART2.h</label>
        <link refid="_u_a_r_t2_8h"/>
        <childnode refid="562" relation="include">
        </childnode>
        <childnode refid="582" relation="include">
        </childnode>
        <childnode refid="583" relation="include">
        </childnode>
        <childnode refid="584" relation="include">
        </childnode>
      </node>
      <node id="579">
        <label>ECDSACC26X1.h</label>
        <link refid="_e_c_d_s_a_c_c26_x1_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="union_clock_p___struct" prot="public">ClockP_Struct</innerclass>
    <innerclass refid="struct_clock_p___freq_hz" prot="public">ClockP_FreqHz</innerclass>
    <innerclass refid="struct_clock_p___params" prot="public">ClockP_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_clock_p_8h_1a9f872ba47b96783b5b49843103fc9585" prot="public" static="no">
        <name>ClockP_STRUCT_SIZE</name>
        <initializer>(68)</initializer>
        <briefdescription>
<para>Number of bytes greater than or equal to the size of any RTOS ClockP object. </para>        </briefdescription>
        <detaileddescription>
<para>NoRTOS: 32 (biggest of the HW-specific ClockP instance structs) BIOS 6.x: 40 BIOS 7.x: 36 FreeRTOS: 68 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="73" column="9" bodyfile="source/ti/drivers/dpl/ClockP.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_clock_p_8h_1a33b2346f23e49f8d696e7f52cc277952" prot="public" static="no">
        <name>ClockP_handle</name>
        <param><defname>x</defname></param>
        <initializer>((<ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref>)(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="114" column="9" bodyfile="source/ti/drivers/dpl/ClockP.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_clock_p_8h_1aa2030f172fe0c2dbc9ac0b082933c767" prot="public" static="no">
        <name>ClockP_Status</name>
        <enumvalue id="_clock_p_8h_1aa2030f172fe0c2dbc9ac0b082933c767a300c7c353a0ae1d107c2b2278a40a09b" prot="public">
          <name>ClockP_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_clock_p_8h_1aa2030f172fe0c2dbc9ac0b082933c767a2033a09c166a62496eeb184d0c736a67" prot="public">
          <name>ClockP_FAILURE</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Status codes for ClockP APIs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="100" column="1" bodyfile="source/ti/drivers/dpl/ClockP.h" bodystart="99" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_clock_p_8h_1a2f44384179f25a9ad71b8c032d241dae" prot="public" static="no">
        <type>union <ref refid="union_clock_p___struct" kindref="compound">ClockP_Struct</ref></type>
        <definition>typedef union ClockP_Struct  ClockP_Struct</definition>
        <argsstring></argsstring>
        <name>ClockP_Struct</name>
        <briefdescription>
<para>ClockP structure. </para>        </briefdescription>
        <detaileddescription>
<para>Opaque structure that should be large enough to hold any of the RTOS specific ClockP objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* ClockP_Handle</definition>
        <argsstring></argsstring>
        <name>ClockP_Handle</name>
        <briefdescription>
<para>Opaque client reference to an instance of a ClockP. </para>        </briefdescription>
        <detaileddescription>
<para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> returned from <ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create()</ref> or <ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct()</ref> represents that instance. It is then is used in the other instance based functions (e.g. <ref refid="_clock_p_8h_1ac4a1abafab221d989e19458af7d88a63" kindref="member">ClockP_start()</ref>, <ref refid="_clock_p_8h_1a08cf2cb4bfea18be3a21e8cc553eff51" kindref="member">ClockP_stop()</ref>, etc.). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="112" column="1" bodyfile="source/ti/drivers/dpl/ClockP.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_clock_p_8h_1af516e3c763bec8fb9769ecc4ac7296bb" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ClockP_Fxn) (uintptr_t arg)</definition>
        <argsstring>)(uintptr_t arg)</argsstring>
        <name>ClockP_Fxn</name>
        <briefdescription>
<para>Prototype for a ClockP callback function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="119" column="1" bodyfile="source/ti/drivers/dpl/ClockP.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
        <definition>ClockP_Handle ClockP_construct</definition>
        <argsstring>(ClockP_Struct *clockP, ClockP_Fxn clockFxn, uint32_t timeout, ClockP_Params *params)</argsstring>
        <name>ClockP_construct</name>
        <param>
          <type><ref refid="union_clock_p___struct" kindref="compound">ClockP_Struct</ref> *</type>
          <declname>clockP</declname>
        </param>
        <param>
          <type><ref refid="_clock_p_8h_1af516e3c763bec8fb9769ecc4ac7296bb" kindref="member">ClockP_Fxn</ref></type>
          <declname>clockFxn</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="struct_clock_p___params" kindref="compound">ClockP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to construct a clock object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clockP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="union_clock_p___struct" kindref="compound">ClockP_Struct</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The startup timeout, if supported by the RTOS. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clockFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function called when timeout or period expires.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. NULL denotes to use the default parameters. The ClockP default parameters are noted in <ref refid="_clock_p_8h_1a666e9ded465c969456e6c4ef95e849f4" kindref="member">ClockP_Params_init()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> on success or NULL on an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a4dc26d25988f0b2ef4d4129b42962f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_destruct</definition>
        <argsstring>(ClockP_Struct *clockP)</argsstring>
        <name>ClockP_destruct</name>
        <param>
          <type><ref refid="union_clock_p___struct" kindref="compound">ClockP_Struct</ref> *</type>
          <declname>clockP</declname>
        </param>
        <briefdescription>
<para>Function to destruct a clock object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clockP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="union_clock_p___struct" kindref="compound">ClockP_Struct</ref> object that was passed to <ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
The clock object must be stopped before calling destruct. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
        <definition>ClockP_Handle ClockP_create</definition>
        <argsstring>(ClockP_Fxn clockFxn, uint32_t timeout, ClockP_Params *params)</argsstring>
        <name>ClockP_create</name>
        <param>
          <type><ref refid="_clock_p_8h_1af516e3c763bec8fb9769ecc4ac7296bb" kindref="member">ClockP_Fxn</ref></type>
          <declname>clockFxn</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="struct_clock_p___params" kindref="compound">ClockP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to create a clock object. </para>        </briefdescription>
        <detaileddescription>
<para>This function will allocate memory for the instance&apos;s <ref refid="union_clock_p___struct" kindref="compound">ClockP_Struct</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clockFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function called when timeout or period expires. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The startup timeout, if supported by the RTOS. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance configuration parameters. NULL denotes to use the default parameters. The ClockP default parameters are noted in <ref refid="_clock_p_8h_1a666e9ded465c969456e6c4ef95e849f4" kindref="member">ClockP_Params_init()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> on success or NULL on an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1aeb6405246f431b6589e3ee4649f615f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_delete</definition>
        <argsstring>(ClockP_Handle handle)</argsstring>
        <name>ClockP_delete</name>
        <param>
          <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to delete a clock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> returned from <ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
The clock object must be stopped before calling delete. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1ac0ac5819c6679eea45298919b789a48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_getCpuFreq</definition>
        <argsstring>(ClockP_FreqHz *freq)</argsstring>
        <name>ClockP_getCpuFreq</name>
        <param>
          <type><ref refid="struct_clock_p___freq_hz" kindref="compound">ClockP_FreqHz</ref> *</type>
          <declname>freq</declname>
        </param>
        <briefdescription>
<para>Get CPU frequency in Hertz. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the FreqHz structure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a7ff85ce33fc4a61138cee66126b59b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ClockP_getSystemTickPeriod</definition>
        <argsstring>(void)</argsstring>
        <name>ClockP_getSystemTickPeriod</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the system tick period in number of micro seconds. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The kernel&apos;s system tick period in micro seconds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a02c63ebcef1a5ed8f4f655f8d9a0c9d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ClockP_getSystemTicks</definition>
        <argsstring>(void)</argsstring>
        <name>ClockP_getSystemTicks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current tick value in number of system ticks. </para>        </briefdescription>
        <detaileddescription>
<para>The value returned will wrap back to zero after it reaches the max value that can be stored in 32 bits.</para><para><simplesect kind="return"><para>Time in system clock ticks </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1abd04c2c92d6d89504917a85b645eb89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ClockP_getSystemTicks64</definition>
        <argsstring>(void)</argsstring>
        <name>ClockP_getSystemTicks64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current tick value in number of system ticks. </para>        </briefdescription>
        <detaileddescription>
<para>The value returned will wrap back to zero after it reaches the max value that can be stored in 64 bits.</para><para><simplesect kind="return"><para>Time in system clock ticks </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1ac0fa9213cb4a7bfb92d0a16b3f18cc44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ClockP_getTicksUntilInterrupt</definition>
        <argsstring>(void)</argsstring>
        <name>ClockP_getTicksUntilInterrupt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of ClockP tick periods expected to expire between now and the next interrupt from the timer peripheral. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of ClockP tick periods that are expected to expire between now and the next interrupt from the timer peripheral.</para><para>Used internally by various Power modules</para><para><simplesect kind="return"><para>Count in ticks </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1ad0f7856a666906276db9d6dd3d9d8b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ClockP_getTimeout</definition>
        <argsstring>(ClockP_Handle handle)</argsstring>
        <name>ClockP_getTimeout</name>
        <param>
          <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Get timeout of clock instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> returned from <ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create()</ref> or <ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the remaining time in clock ticks if the instance has been started. If the clock is not active, the initial timeout value is returned.</para><para><simplesect kind="return"><para>Remaining timeout in clock ticks. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1af8971b941bf7c9d9261fee8fd64c75c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ClockP_isActive</definition>
        <argsstring>(ClockP_Handle handle)</argsstring>
        <name>ClockP_isActive</name>
        <param>
          <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Determine if a clock object is currently active (i.e., running) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> returned from <ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create()</ref> or <ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
Returns true if the clock object is currently active, otherwise returns false.</para><para><simplesect kind="return"><para>active state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a666e9ded465c969456e6c4ef95e849f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_Params_init</definition>
        <argsstring>(ClockP_Params *params)</argsstring>
        <name>ClockP_Params_init</name>
        <param>
          <type><ref refid="struct_clock_p___params" kindref="compound">ClockP_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize params structure to default values. </para>        </briefdescription>
        <detaileddescription>
<para>The default parameters are:<itemizedlist>
<listitem><para>startFlag: false</para></listitem><listitem><para>period: 0</para></listitem><listitem><para>arg: 0</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the configuration parameters instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a2e3573def138bf3a341f47355bb7456b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_setFunc</definition>
        <argsstring>(ClockP_Handle handle, ClockP_Fxn clockFxn, uintptr_t arg)</argsstring>
        <name>ClockP_setFunc</name>
        <param>
          <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_clock_p_8h_1af516e3c763bec8fb9769ecc4ac7296bb" kindref="member">ClockP_Fxn</ref></type>
          <declname>clockFxn</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function to overwrite ClockP callback function and arg. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> returned from <ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create()</ref> or <ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clockFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function called when timeout or period expires. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument passed to <computeroutput>clockFxn</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a2d967475214bade8b3651f0633b1ecff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_setTimeout</definition>
        <argsstring>(ClockP_Handle handle, uint32_t timeout)</argsstring>
        <name>ClockP_setTimeout</name>
        <param>
          <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Set the initial timeout. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> returned from <ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create()</ref> or <ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial timeout in ClockP ticks</para></parameterdescription>
</parameteritem>
</parameterlist>
Cannot be used to set the initial timeout if the clock has been started. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a550124ef3ae43fdac55622ad5bf25f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_setPeriod</definition>
        <argsstring>(ClockP_Handle handle, uint32_t period)</argsstring>
        <name>ClockP_setPeriod</name>
        <param>
          <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Set the clock period. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> returned from <ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create()</ref> or <ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic interval in ClockP ticks</para></parameterdescription>
</parameteritem>
</parameterlist>
Cannot be used to set the clock period to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1ac4a1abafab221d989e19458af7d88a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_start</definition>
        <argsstring>(ClockP_Handle handle)</argsstring>
        <name>ClockP_start</name>
        <param>
          <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to start a clock. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>In some implementations, it may not always be possible to to start a ClockP object with maximum timeout. This situation can occur when a very fast tick period is used, and when <ref refid="_clock_p_8h_1ac4a1abafab221d989e19458af7d88a63" kindref="member">ClockP_start()</ref> is called (by another ISR, by a higher-priority SwiP, or within a clock function) while ClockP is in-process of servicing its timeout queue. In this case the timeout of the newly-started object may occur in the near future rather than in the far future. For one-shot objects there will be a single early timeout; for periodic objects there will be an early timeout, but the next timeout will occur correctly offset from the first timeout. This condition is due to a ClockP tick count wrap, and only occurs when there is a very fast ClockP tick period such that there are virtual ClockP tick period increments between the last timer interrupt to the invocation of <ref refid="_clock_p_8h_1ac4a1abafab221d989e19458af7d88a63" kindref="member">ClockP_start()</ref>. For example, if the ClockP tick period is 10 usec, and if the ClockP tick count is 0x10000005 when the interrupt occurs, and if there are 3 intervening tick periods (30 usec) before the call to <ref refid="_clock_p_8h_1ac4a1abafab221d989e19458af7d88a63" kindref="member">ClockP_start()</ref> in a clock function, then the future timeout will be computed as 0x10000005 + 3 + 0xFFFFFFFF = 0x10000007, only 2 ticks in the future. In this case, the maximum timeout should be limited to 0xFFFFFFFD to achieve the maximum delay from the last timer interrupt.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> returned from <ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create()</ref> or <ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a08cf2cb4bfea18be3a21e8cc553eff51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_stop</definition>
        <argsstring>(ClockP_Handle handle)</argsstring>
        <name>ClockP_stop</name>
        <param>
          <type><ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to stop a clock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref> returned from <ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create()</ref> or <ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
It is ok to call <ref refid="_clock_p_8h_1a08cf2cb4bfea18be3a21e8cc553eff51" kindref="member">ClockP_stop()</ref> for a clock that has not been started. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a686ba37559969d4a69af02147a9b5081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_usleep</definition>
        <argsstring>(uint32_t usec)</argsstring>
        <name>ClockP_usleep</name>
        <param>
          <type>uint32_t</type>
          <declname>usec</declname>
        </param>
        <briefdescription>
<para>Set delay in micro seconds. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usec</parametername>
</parameternamelist>
<parameterdescription>
<para>A duration in micro seconds </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_clock_p_8h_1a44c15f99499caf08795011fcc8b6db7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClockP_sleep</definition>
        <argsstring>(uint32_t sec)</argsstring>
        <name>ClockP_sleep</name>
        <param>
          <type>uint32_t</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
<para>Set delay in seconds. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sec</parametername>
</parameternamelist>
<parameterdescription>
<para>A duration in seconds </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/dpl/ClockP.h" line="369" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Clock interface for the RTOS Porting Interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>The ClockP module can be used to schedule functions that run at intervals specified in the underlying kernel&apos;s system ticks. ClockP instances are one-shot. The one-shot function will be run once after the specified period has elapsed since calling <ref refid="_clock_p_8h_1ac4a1abafab221d989e19458af7d88a63" kindref="member">ClockP_start()</ref>.</para><para>The ClockP module can also be used to obtain the period of the kernel&apos;s system tick in micro seconds. This is useful for determining the number of ticks needed for setting a Clock object&apos;s period.</para><para>When using the TI-RTOS kernel, ClockP functions are run at software interrupt level. With FreeRTOS, the ClockP functions are either run by a timer service task with priority configured by the application, or in hardware interrupt directly, depending on the device platform. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016-2024,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor">#ifndef<sp/>ti_dpl_ClockP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_dpl_ClockP__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="_clock_p_8h_1a9f872ba47b96783b5b49843103fc9585" refkind="member"><highlight class="preprocessor">#define<sp/>ClockP_STRUCT_SIZE<sp/>(68)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="union_clock_p___struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_clock_p___struct" kindref="compound">ClockP_Struct</ref></highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83" refid="union_clock_p___struct_1a464995f46e2865be6bccaa5ce9092423" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="union_clock_p___struct_1a464995f46e2865be6bccaa5ce9092423" kindref="member">dummy</ref>;<sp/></highlight></codeline>
<codeline lineno="84" refid="union_clock_p___struct_1a163cc5f42d13c4538917d78e3943f642" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="union_clock_p___struct_1a163cc5f42d13c4538917d78e3943f642" kindref="member">data</ref>[<ref refid="_clock_p_8h_1a9f872ba47b96783b5b49843103fc9585" kindref="member">ClockP_STRUCT_SIZE</ref>];</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/><ref refid="_clock_p_8h_1a2f44384179f25a9ad71b8c032d241dae" kindref="member">ClockP_Struct</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="struct_clock_p___freq_hz" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92" refid="struct_clock_p___freq_hz_1aa904c480d9146b303386e6ec82c3987e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_clock_p___freq_hz_1aa904c480d9146b303386e6ec82c3987e" kindref="member">hi</ref>;<sp/></highlight></codeline>
<codeline lineno="93" refid="struct_clock_p___freq_hz_1ab41efab05aa64017e11ed5c4231b165a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_clock_p___freq_hz_1ab41efab05aa64017e11ed5c4231b165a" kindref="member">lo</ref>;<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}<sp/><ref refid="struct_clock_p___freq_hz" kindref="compound">ClockP_FreqHz</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="_clock_p_8h_1aa2030f172fe0c2dbc9ac0b082933c767" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101" refid="_clock_p_8h_1aa2030f172fe0c2dbc9ac0b082933c767a300c7c353a0ae1d107c2b2278a40a09b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_clock_p_8h_1aa2030f172fe0c2dbc9ac0b082933c767a300c7c353a0ae1d107c2b2278a40a09b" kindref="member">ClockP_OK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="102" refid="_clock_p_8h_1aa2030f172fe0c2dbc9ac0b082933c767a2033a09c166a62496eeb184d0c736a67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_clock_p_8h_1aa2030f172fe0c2dbc9ac0b082933c767a2033a09c166a62496eeb184d0c736a67" kindref="member">ClockP_FAILURE</ref><sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}<sp/><ref refid="_clock_p_8h_1aa2030f172fe0c2dbc9ac0b082933c767" kindref="member">ClockP_Status</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_clock_p_8h_1a003dd74e948999fe5c3f45d8f51501f1" kindref="member">ClockP_Handle</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="_clock_p_8h_1a33b2346f23e49f8d696e7f52cc277952" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ClockP_handle(x)<sp/>((ClockP_Handle)(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="_clock_p_8h_1af516e3c763bec8fb9769ecc4ac7296bb" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_clock_p_8h_1af516e3c763bec8fb9769ecc4ac7296bb" kindref="member">ClockP_Fxn</ref>)(uintptr_t<sp/>arg);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="struct_clock_p___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142" refid="struct_clock_p___params_1a5bd3c79ea5ac343e0f504b86c76e39c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_clock_p___params_1a5bd3c79ea5ac343e0f504b86c76e39c6" kindref="member">startFlag</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="143" refid="struct_clock_p___params_1af92c3f4d44aed9c643128e6049294f94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_clock_p___params_1af92c3f4d44aed9c643128e6049294f94" kindref="member">period</ref>;<sp/></highlight></codeline>
<codeline lineno="144" refid="struct_clock_p___params_1a262d7e91bc0a7f98b23033084e68531c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="struct_clock_p___params_1a262d7e91bc0a7f98b23033084e68531c" kindref="member">arg</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}<sp/><ref refid="struct_clock_p___params" kindref="compound">ClockP_Params</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ClockP_Handle<sp/><ref refid="_clock_p_8h_1a78a546df2ea3d317ddf07236a4d1ab1c" kindref="member">ClockP_construct</ref>(<ref refid="union_clock_p___struct" kindref="compound">ClockP_Struct</ref><sp/>*clockP,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_clock_p_8h_1af516e3c763bec8fb9769ecc4ac7296bb" kindref="member">ClockP_Fxn</ref><sp/>clockFxn,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>timeout,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_clock_p___params" kindref="compound">ClockP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1a4dc26d25988f0b2ef4d4129b42962f38" kindref="member">ClockP_destruct</ref>(<ref refid="union_clock_p___struct" kindref="compound">ClockP_Struct</ref><sp/>*clockP);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ClockP_Handle<sp/><ref refid="_clock_p_8h_1a4b5539d012f41ca5d7b158ca99832e63" kindref="member">ClockP_create</ref>(<ref refid="_clock_p_8h_1af516e3c763bec8fb9769ecc4ac7296bb" kindref="member">ClockP_Fxn</ref><sp/>clockFxn,<sp/>uint32_t<sp/>timeout,<sp/><ref refid="struct_clock_p___params" kindref="compound">ClockP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1aeb6405246f431b6589e3ee4649f615f0" kindref="member">ClockP_delete</ref>(ClockP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1ac0ac5819c6679eea45298919b789a48b" kindref="member">ClockP_getCpuFreq</ref>(<ref refid="struct_clock_p___freq_hz" kindref="compound">ClockP_FreqHz</ref><sp/>*freq);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_clock_p_8h_1a7ff85ce33fc4a61138cee66126b59b96" kindref="member">ClockP_getSystemTickPeriod</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_clock_p_8h_1a02c63ebcef1a5ed8f4f655f8d9a0c9d7" kindref="member">ClockP_getSystemTicks</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="_clock_p_8h_1abd04c2c92d6d89504917a85b645eb89d" kindref="member">ClockP_getSystemTicks64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_clock_p_8h_1ac0fa9213cb4a7bfb92d0a16b3f18cc44" kindref="member">ClockP_getTicksUntilInterrupt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_clock_p_8h_1ad0f7856a666906276db9d6dd3d9d8b35" kindref="member">ClockP_getTimeout</ref>(ClockP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1af8971b941bf7c9d9261fee8fd64c75c2" kindref="member">ClockP_isActive</ref>(ClockP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1a666e9ded465c969456e6c4ef95e849f4" kindref="member">ClockP_Params_init</ref>(<ref refid="struct_clock_p___params" kindref="compound">ClockP_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1a2e3573def138bf3a341f47355bb7456b" kindref="member">ClockP_setFunc</ref>(ClockP_Handle<sp/>handle,<sp/><ref refid="_clock_p_8h_1af516e3c763bec8fb9769ecc4ac7296bb" kindref="member">ClockP_Fxn</ref><sp/>clockFxn,<sp/>uintptr_t<sp/>arg);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1a2d967475214bade8b3651f0633b1ecff" kindref="member">ClockP_setTimeout</ref>(ClockP_Handle<sp/>handle,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1a550124ef3ae43fdac55622ad5bf25f91" kindref="member">ClockP_setPeriod</ref>(ClockP_Handle<sp/>handle,<sp/>uint32_t<sp/>period);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1ac4a1abafab221d989e19458af7d88a63" kindref="member">ClockP_start</ref>(ClockP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1a08cf2cb4bfea18be3a21e8cc553eff51" kindref="member">ClockP_stop</ref>(ClockP_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1a686ba37559969d4a69af02147a9b5081" kindref="member">ClockP_usleep</ref>(uint32_t<sp/>usec);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_clock_p_8h_1a44c15f99499caf08795011fcc8b6db7b" kindref="member">ClockP_sleep</ref>(uint32_t<sp/>sec);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_dpl_ClockP__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/dpl/ClockP.h"/>
  </compounddef>
</doxygen>
