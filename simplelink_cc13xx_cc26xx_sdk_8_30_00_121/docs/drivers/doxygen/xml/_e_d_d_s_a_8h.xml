<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_e_d_d_s_a_8h" kind="file" language="C++">
    <compoundname>EDDSA.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_crypto_key_8h" local="no">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</includes>
    <includes refid="_e_c_c_params_8h" local="no">ti/drivers/cryptoutils/ecc/ECCParams.h</includes>
    <includedby refid="_e_d_d_s_a_c_c26_x2_8h" local="no">EDDSACC26X2.h</includedby>
    <includedby refid="_e_d_d_s_a_c_c26_x4__ns_8h" local="no">EDDSACC26X4_ns.h</includedby>
    <includedby refid="_e_d_d_s_a_c_c26_x4__s_8h" local="no">EDDSACC26X4_s.h</includedby>
    <incdepgraph>
      <node id="1091">
        <label>stdbool.h</label>
      </node>
      <node id="1093">
        <label>stdint.h</label>
      </node>
      <node id="1097">
        <label>ti/drivers/cryptoutils/ecc/ECCParamsLPF3HSM.h</label>
      </node>
      <node id="1092">
        <label>stddef.h</label>
      </node>
      <node id="1090">
        <label>EDDSA.h</label>
        <link refid="_e_d_d_s_a_8h"/>
        <childnode refid="1091" relation="include">
        </childnode>
        <childnode refid="1092" relation="include">
        </childnode>
        <childnode refid="1093" relation="include">
        </childnode>
        <childnode refid="1094" relation="include">
        </childnode>
        <childnode refid="1095" relation="include">
        </childnode>
      </node>
      <node id="1095">
        <label>ti/drivers/cryptoutils/ecc/ECCParams.h</label>
        <link refid="_e_c_c_params_8h"/>
        <childnode refid="1093" relation="include">
        </childnode>
        <childnode refid="1092" relation="include">
        </childnode>
        <childnode refid="1091" relation="include">
        </childnode>
        <childnode refid="1094" relation="include">
        </childnode>
        <childnode refid="1096" relation="include">
        </childnode>
        <childnode refid="1097" relation="include">
        </childnode>
      </node>
      <node id="1096">
        <label>ti/devices/DeviceFamily.h</label>
      </node>
      <node id="1094">
        <label>ti/drivers/cryptoutils/cryptokey/CryptoKey.h</label>
        <link refid="_crypto_key_8h"/>
        <childnode refid="1093" relation="include">
        </childnode>
        <childnode refid="1091" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1100">
        <label>EDDSACC26X4_ns.h</label>
        <link refid="_e_d_d_s_a_c_c26_x4__ns_8h"/>
      </node>
      <node id="1099">
        <label>EDDSACC26X2.h</label>
        <link refid="_e_d_d_s_a_c_c26_x2_8h"/>
      </node>
      <node id="1101">
        <label>EDDSACC26X4_s.h</label>
        <link refid="_e_d_d_s_a_c_c26_x4__s_8h"/>
      </node>
      <node id="1098">
        <label>EDDSA.h</label>
        <link refid="_e_d_d_s_a_8h"/>
        <childnode refid="1099" relation="include">
        </childnode>
        <childnode refid="1100" relation="include">
        </childnode>
        <childnode refid="1101" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_e_d_d_s_a___config" prot="public">EDDSA_Config</innerclass>
    <innerclass refid="struct_e_d_d_s_a___operation_generate_public_key" prot="public">EDDSA_OperationGeneratePublicKey</innerclass>
    <innerclass refid="struct_e_d_d_s_a___operation_sign" prot="public">EDDSA_OperationSign</innerclass>
    <innerclass refid="struct_e_d_d_s_a___operation_verify" prot="public">EDDSA_OperationVerify</innerclass>
    <innerclass refid="union_e_d_d_s_a___operation" prot="public">EDDSA_Operation</innerclass>
    <innerclass refid="struct_e_d_d_s_a___params" prot="public">EDDSA_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_e_d_d_s_a_8h_1afa4f2cbb094d15cedaee9241ca7aaa91" prot="public" static="no">
        <name>EDDSA_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common EDDSA status code reservation offset. EDDSA driver implementations should offset status codes with EDDSA_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>EDDSAXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>EDDSA_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EDDSAXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>EDDSA_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EDDSAXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>EDDSA_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="387" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1ab13cbd97a011a0cbe686e876073c7c90" prot="public" static="no">
        <name>EDDSA_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return EDDSA_STATUS_SUCCESS if the function was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="395" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a9285142cde705256b57ac9cf5c42c53c" prot="public" static="no">
        <name>EDDSA_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return EDDSA_STATUS_ERROR if the function was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="403" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1adb4aaae6ac1e9646066b5ca05816cd94" prot="public" static="no">
        <name>EDDSA_STATUS_CANCELED</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>The ongoing operation was canceled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="408" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a41efa2929e395310213d703636e225ee" prot="public" static="no">
        <name>EDDSA_STATUS_HASH_UNAVAILABLE</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>An error status code returned if the hash hardware or software resource is currently unavailable. </para>        </briefdescription>
        <detaileddescription>
<para>EDDSA driver implementations may have hardware or software limitations on how many clients can simultaneously perform operations. This status code is returned if the mutual exclusion mechanism signals that an operation cannot currently be performed because the hash module is unavailable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="419" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a475ed3864cdc27484ab94724835d8009" prot="public" static="no">
        <name>EDDSA_STATUS_PKA_UNAVAILABLE</name>
        <initializer>(-4)</initializer>
        <briefdescription>
<para>An error status code returned if the public-key accelerator hardware or software resource is currently unavailable. </para>        </briefdescription>
        <detaileddescription>
<para>EDDSA driver implementations may have hardware or software limitations on how many clients can simultaneously perform operations. This status code is returned if the mutual exclusion mechanism signals that an operation cannot currently be performed because the PKA module is unavailable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="430" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a5c7e76588d6df7b44a74739ef6effa40" prot="public" static="no">
        <name>EDDSA_STATUS_POINT_AT_INFINITY</name>
        <initializer>(-5)</initializer>
        <briefdescription>
<para>The generated public key was the point at infinity. </para>        </briefdescription>
        <detaileddescription>
<para>The point at infinity is not a valid public key, try EDDSA_generatePublicKey again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="438" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a5319a8694cc727685c4ee480be44c872" prot="public" static="no">
        <name>EDDSA_STATUS_INVALID_PRIVATE_KEY_SIZE</name>
        <initializer>(-6)</initializer>
        <briefdescription>
<para>The private key was not 32 bytes long. </para>        </briefdescription>
        <detaileddescription>
<para>Ed25519 expects a 32 byte private key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="445" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1ad0ecd7691b45558ea55c42333be94a11" prot="public" static="no">
        <name>EDDSA_STATUS_INVALID_PUBLIC_KEY_SIZE</name>
        <initializer>(-7)</initializer>
        <briefdescription>
<para>The public key was not 32 bytes long. </para>        </briefdescription>
        <detaileddescription>
<para>Ed25519 expects a 32 byte public key. This is the compressed representation of a point on curve Ed25519. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="453" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a99d3ba874ff24e916d6a14f3cf7404e1" prot="public" static="no">
        <name>EDDSA_STATUS_PUBLIC_KEY_NOT_ON_CURVE</name>
        <initializer>(-8)</initializer>
        <briefdescription>
<para>The public key was not a valid point on curve Ed25519. </para>        </briefdescription>
        <detaileddescription>
<para>Ed25519 expects a valid public key. This is the compressed representation of a point on curve Ed25519. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="461" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a42d3d3bd421fa2e0687ac88c0fc11369" prot="public" static="no">
        <name>EDDSA_STATUS_INVALID_R_SIZE</name>
        <initializer>(-9)</initializer>
        <briefdescription>
<para>The Ed25519 signature component R was not 32 bytes long. </para>        </briefdescription>
        <detaileddescription>
<para>Signature component R must be 32 bytes long, representing a point on Ed25519. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="469" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a5386326ca227cec3c5bc3fe3051373ac" prot="public" static="no">
        <name>EDDSA_STATUS_INVALID_S_SIZE</name>
        <initializer>(-10)</initializer>
        <briefdescription>
<para>The Ed25519 signature component S was not 32 bytes long. </para>        </briefdescription>
        <detaileddescription>
<para>Signature component S must be 32 bytes long, representing a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="476" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1ac67fec2183b90aa7ec092da2f8ee6970" prot="public" static="no">
        <name>EDDSA_STATUS_S_LARGER_THAN_ORDER</name>
        <initializer>(-11)</initializer>
        <briefdescription>
<para>The Ed25519 signature component S was larger than the order of Ed25519. </para>        </briefdescription>
        <detaileddescription>
<para>The signature component S must be less than the order of the elliptic curve Ed25519. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="485" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a48d65f84b271dd45b5e7ed43c9ab658f" prot="public" static="no">
        <name>EDDSA_STATUS_KEY_ID_PARAM_MISMATCH</name>
        <initializer>(-12)</initializer>
        <briefdescription>
<para>The Ed25519 operation was called with conflicting private and public key ID parameters. </para>        </briefdescription>
        <detaileddescription>
<para>The private and public key params have different ECC parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="493" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a71a907ded5d3c6bfa2e2e47ccf308aba" prot="public" static="no">
        <name>EDDSA_STATUS_KEYSTORE_INVALID_ID</name>
        <initializer>(-13)</initializer>
        <briefdescription>
<para>The KeyStore module could not find a key with the given ID. </para>        </briefdescription>
        <detaileddescription>
<para>The KeyStore was provided an invalid ID#. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="500" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1adf314946fe684bcbc852465fa0ca6100" prot="public" static="no">
        <name>EDDSA_STATUS_KEYSTORE_GENERIC_FAILURE</name>
        <initializer>(-14)</initializer>
        <briefdescription>
<para>The KeyStore module entered a failure state when retrieving the key ID. </para>        </briefdescription>
        <detaileddescription>
<para>A KeyStore operation failed as a result of an invalid key type, invalid key policy, not enough buffer space, hardware failure, and so on. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="509" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1aa40ddf06e62d96f44c2d2135932ada61" prot="public" static="no">
        <name>EDDSA_STATUS_SHA2_HASH_FAILURE</name>
        <initializer>(-15)</initializer>
        <briefdescription>
<para>The SHA2 module returned an error while hashing. </para>        </briefdescription>
        <detaileddescription>
<para>The SHA2 module did not successfully hash a required value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="516" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_d_d_s_a_8h_1a7c4042153907de966d21b764db897f10" prot="public" static="no">
        <name>EDDSA_STATUS_KEYSTORE_ERROR</name>
        <initializer>(-16)</initializer>
        <briefdescription>
<para>The KeyStore module returned an error while importing/exporting key. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return EDDSA_STATUS_KEYSTORE_ERROR if any KeyStore operation did not return KEYSTORE_PSA_STATUS_SUCCESS </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="524" column="9" bodyfile="source/ti/drivers/EDDSA.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14f" prot="public" static="no">
        <name>EDDSA_ReturnBehavior</name>
        <enumvalue id="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fac8914fb0b0024a8add72d78d8d4161a5" prot="public">
          <name>EDDSA_RETURN_BEHAVIOR_CALLBACK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will return immediately while the EDDSA operation goes on in the background. The registered callback function is called after the operation completes. The context the callback function is called (task, HWI, SWI) is implementation-dependent. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fa5b29034b4fd68970e6060dedecd33398" prot="public">
          <name>EDDSA_RETURN_BEHAVIOR_BLOCKING</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will block while EDDSA operation goes on in the background. EDDSA operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fa574c6aa8bf233db44b1bc0ecf6b47624" prot="public">
          <name>EDDSA_RETURN_BEHAVIOR_POLLING</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will continuously poll a flag while EDDSA operation goes on in the background. EDDSA operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The way in which EDDSA function calls return after performing an encryption + authentication or decryption + verification operation. </para>        </briefdescription>
        <detaileddescription>
<para>Not all EDDSA operations exhibit the specified return behavior. Functions that do not require significant computation and cannot offload that computation to a background thread behave like regular functions. Which functions exhibit the specified return behavior is implementation dependent. Specifically, a software-backed implementation run on the same CPU as the application will emulate the return behavior while not actually offloading the computation to the background thread.</para><para>EDDSA functions exhibiting the specified return behavior have restrictions on the context from which they may be called.</para><para><table rows="4" cols="4"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Task </para></entry><entry thead="yes"><para>Hwi </para></entry><entry thead="yes"><para>Swi  </para></entry></row>
<row>
<entry thead="no"><para>EDDSA_RETURN_BEHAVIOR_CALLBACK </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
<row>
<entry thead="no"><para>EDDSA_RETURN_BEHAVIOR_BLOCKING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>EDDSA_RETURN_BEHAVIOR_POLLING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="574" column="1" bodyfile="source/ti/drivers/EDDSA.h" bodystart="573" bodyend="594"/>
      </memberdef>
      <memberdef kind="enum" id="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fb" prot="public" static="no">
        <name>EDDSA_OperationType</name>
        <enumvalue id="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fba6705d1a5bda1b194c364e627c1bff3e1" prot="public">
          <name>EDDSA_OPERATION_TYPE_GENERATE_PUBLIC_KEY</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fba4c6e4c13833ac07401d36e084ed9a27b" prot="public">
          <name>EDDSA_OPERATION_TYPE_SIGN</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fba0a7e89ff24a66b8d5d1811d0fbacacff" prot="public">
          <name>EDDSA_OPERATION_TYPE_VERIFY</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the operation types supported by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="708" column="1" bodyfile="source/ti/drivers/EDDSA.h" bodystart="707" bodyend="712"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" prot="public" static="no">
        <type><ref refid="struct_e_d_d_s_a___config" kindref="compound">EDDSA_Config</ref> *</type>
        <definition>typedef EDDSA_Config* EDDSA_Handle</definition>
        <argsstring></argsstring>
        <name>EDDSA_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="549" column="1" bodyfile="source/ti/drivers/EDDSA.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_e_d_d_s_a_8h_1a6a093ae7e304be315a31a45095c4662b" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* EDDSA_CallbackFxn) (EDDSA_Handle handle, int_fast16_t returnStatus, EDDSA_Operation operation, EDDSA_OperationType operationType)</definition>
        <argsstring>)(EDDSA_Handle handle, int_fast16_t returnStatus, EDDSA_Operation operation, EDDSA_OperationType operationType)</argsstring>
        <name>EDDSA_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used by the EDDSA driver when used in <ref refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fac8914fb0b0024a8add72d78d8d4161a5" kindref="member">EDDSA_RETURN_BEHAVIOR_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the client that started the EDDSA operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the EDDSA operation. May contain an error code if the result is the point at infinity for example.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A union of pointers to operation structs. Only one type of pointer is valid per call to the callback function. Which type is currently valid is determined by /c operationType. The union allows easier access to the struct&apos;s fields without the need to typecase the result.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operationType</parametername>
</parameternamelist>
<parameterdescription>
<para>This parameter determined which operation the callback refers to and which type to access through <computeroutput>operation</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="733" column="1" bodyfile="source/ti/drivers/EDDSA.h" bodystart="733" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_e_d_d_s_a_8h_1ad38c3a487594c6b117e9d9367d4611a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EDDSA_init</definition>
        <argsstring>(void)</argsstring>
        <name>EDDSA_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initializes the EDDSA module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The EDDSA_config structure must exist and be persistent before this function can be called. This function must also be called before any other EDDSA driver APIs. This function call does not modify any peripheral registers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1a173dac2072e5f83bbd1123a920decbd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EDDSA_close</definition>
        <argsstring>(EDDSA_Handle handle)</argsstring>
        <name>EDDSA_close</name>
        <param>
          <type><ref refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" kindref="member">EDDSA_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close an EDDSA peripheral specified by the EDDSA handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An EDDSA handle returned from <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="781" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" kindref="member">EDDSA_Handle</ref></type>
        <definition>EDDSA_Handle EDDSA_open</definition>
        <argsstring>(uint_least8_t index, const EDDSA_Params *params)</argsstring>
        <name>EDDSA_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function opens a given EDDSA peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>EDDSA controller has been initialized using <ref refid="_e_d_d_s_a_8h_1ad38c3a487594c6b117e9d9367d4611a5" kindref="member">EDDSA_init()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the EDDSA indexed into the EDDSA_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter block, if NULL it will use default values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An EDDSA_Handle on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_e_d_d_s_a_8h_1ad38c3a487594c6b117e9d9367d4611a5" kindref="member">EDDSA_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_e_d_d_s_a_8h_1a173dac2072e5f83bbd1123a920decbd7" kindref="member">EDDSA_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="800" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1ab056f386599ac453660e82838fd96d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EDDSA_Params_init</definition>
        <argsstring>(EDDSA_Params *params)</argsstring>
        <name>EDDSA_Params_init</name>
        <param>
          <type><ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to <ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: returnBehavior = EDDSA_RETURN_BEHAVIOR_BLOCKING callbackFxn = NULL timeout = SemaphoreP_WAIT_FOREVER custom = NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1a381b7b066e24af4d4cb8979471b887c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EDDSA_OperationGeneratePublicKey_init</definition>
        <argsstring>(EDDSA_OperationGeneratePublicKey *operation)</argsstring>
        <name>EDDSA_OperationGeneratePublicKey_init</name>
        <param>
          <type><ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to initialize an <ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults to all zeros. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1a6570e891d3918886ea3badcc8286cc94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EDDSA_OperationSign_init</definition>
        <argsstring>(EDDSA_OperationSign *operation)</argsstring>
        <name>EDDSA_OperationSign_init</name>
        <param>
          <type><ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to initialize an <ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults to all zeros. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="836" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1a79bbbc955774462fc15772968974e6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EDDSA_OperationVerify_init</definition>
        <argsstring>(EDDSA_OperationVerify *operation)</argsstring>
        <name>EDDSA_OperationVerify_init</name>
        <param>
          <type><ref refid="struct_e_d_d_s_a___operation_verify" kindref="compound">EDDSA_OperationVerify</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to initialize an <ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to <ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults to all zeros. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="847" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1a7a5d4d117f414187b95eb15eebb3d93f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t EDDSA_generatePublicKey</definition>
        <argsstring>(EDDSA_Handle handle, EDDSA_OperationGeneratePublicKey *operation)</argsstring>
        <name>EDDSA_generatePublicKey</name>
        <param>
          <type><ref refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" kindref="member">EDDSA_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Generates an EdDSA private-public keypair. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_e_d_d_s_a_8h_1a7a5d4d117f414187b95eb15eebb3d93f" kindref="member">EDDSA_generatePublicKey()</ref> generates a private-public keypair (<computeroutput>k</computeroutput>, <computeroutput>A</computeroutput>) to generate EdDSA signatures with.</para><para><simplesect kind="pre"><para><ref refid="_e_d_d_s_a_8h_1a6570e891d3918886ea3badcc8286cc94" kindref="member">EDDSA_OperationSign_init()</ref> must be called on <computeroutput>operation</computeroutput> first. The driver must have been opened by calling <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref> first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An EDDSA handle returned from <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A struct containing the pointers to the buffers necessary to perform the operation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_e_d_d_s_a_8h_1a883083d39b5bef163d36142446e06f50" kindref="member">EDDSA_sign()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_e_d_d_s_a_8h_1a8705e361f1522bd175c0d2f8c50f0c33" kindref="member">EDDSA_verify()</ref></para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1ab13cbd97a011a0cbe686e876073c7c90" kindref="member">EDDSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a9285142cde705256b57ac9cf5c42c53c" kindref="member">EDDSA_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1adb4aaae6ac1e9646066b5ca05816cd94" kindref="member">EDDSA_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a41efa2929e395310213d703636e225ee" kindref="member">EDDSA_STATUS_HASH_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hash hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a475ed3864cdc27484ab94724835d8009" kindref="member">EDDSA_STATUS_PKA_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required PKA hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a5c7e76588d6df7b44a74739ef6effa40" kindref="member">EDDSA_STATUS_POINT_AT_INFINITY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The computed public key is the point at infinity. Try again. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a48d65f84b271dd45b5e7ed43c9ab658f" kindref="member">EDDSA_STATUS_KEY_ID_PARAM_MISMATCH</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The ID for the private and public key parameters do not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a71a907ded5d3c6bfa2e2e47ccf308aba" kindref="member">EDDSA_STATUS_KEYSTORE_INVALID_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>KeyStore could not find a key with the given key ID#. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1adf314946fe684bcbc852465fa0ca6100" kindref="member">EDDSA_STATUS_KEYSTORE_GENERIC_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The KeyStore entered some error state when storing the public or private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a7c4042153907de966d21b764db897f10" kindref="member">EDDSA_STATUS_KEYSTORE_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The keystore module returned an error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="887" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1a883083d39b5bef163d36142446e06f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t EDDSA_sign</definition>
        <argsstring>(EDDSA_Handle handle, EDDSA_OperationSign *operation)</argsstring>
        <name>EDDSA_sign</name>
        <param>
          <type><ref refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" kindref="member">EDDSA_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Generates an EdDSA signature. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_e_d_d_s_a_8h_1a883083d39b5bef163d36142446e06f50" kindref="member">EDDSA_sign()</ref> generates a signature (<computeroutput>R</computeroutput>, <computeroutput>S</computeroutput>) of a message.</para><para><simplesect kind="pre"><para><ref refid="_e_d_d_s_a_8h_1a6570e891d3918886ea3badcc8286cc94" kindref="member">EDDSA_OperationSign_init()</ref> must be called on <computeroutput>operation</computeroutput> first. The driver must have been opened by calling <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref> first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An EDDSA handle returned from <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A struct containing the pointers to the buffers necessary to perform the operation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_e_d_d_s_a_8h_1a7a5d4d117f414187b95eb15eebb3d93f" kindref="member">EDDSA_generatePublicKey()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_e_d_d_s_a_8h_1a8705e361f1522bd175c0d2f8c50f0c33" kindref="member">EDDSA_verify()</ref></para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1ab13cbd97a011a0cbe686e876073c7c90" kindref="member">EDDSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a9285142cde705256b57ac9cf5c42c53c" kindref="member">EDDSA_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1adb4aaae6ac1e9646066b5ca05816cd94" kindref="member">EDDSA_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a41efa2929e395310213d703636e225ee" kindref="member">EDDSA_STATUS_HASH_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hash hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a475ed3864cdc27484ab94724835d8009" kindref="member">EDDSA_STATUS_PKA_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required PKA hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a5319a8694cc727685c4ee480be44c872" kindref="member">EDDSA_STATUS_INVALID_PRIVATE_KEY_SIZE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The private key size is an invalid size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1ad0ecd7691b45558ea55c42333be94a11" kindref="member">EDDSA_STATUS_INVALID_PUBLIC_KEY_SIZE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The public key size is an invalid size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a48d65f84b271dd45b5e7ed43c9ab658f" kindref="member">EDDSA_STATUS_KEY_ID_PARAM_MISMATCH</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The ID for the private and public key parameters do not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a71a907ded5d3c6bfa2e2e47ccf308aba" kindref="member">EDDSA_STATUS_KEYSTORE_INVALID_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>KeyStore could not find a key with the given key ID#. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1adf314946fe684bcbc852465fa0ca6100" kindref="member">EDDSA_STATUS_KEYSTORE_GENERIC_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The KeyStore entered some error state when retrieving the public or private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a7c4042153907de966d21b764db897f10" kindref="member">EDDSA_STATUS_KEYSTORE_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The keystore module returned an error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="927" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1a8705e361f1522bd175c0d2f8c50f0c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t EDDSA_verify</definition>
        <argsstring>(EDDSA_Handle handle, EDDSA_OperationVerify *operation)</argsstring>
        <name>EDDSA_verify</name>
        <param>
          <type><ref refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" kindref="member">EDDSA_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_e_d_d_s_a___operation_verify" kindref="compound">EDDSA_OperationVerify</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Verifies a received EdDSA signature matches a hash and public key. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_e_d_d_s_a_8h_1a79bbbc955774462fc15772968974e6a4" kindref="member">EDDSA_OperationVerify_init()</ref> must be called on <computeroutput>operation</computeroutput> first. The driver must have been opened by calling <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref> first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An EDDSA handle returned from <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A struct containing the pointers to the buffers necessary to perform the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_e_d_d_s_a_8h_1a883083d39b5bef163d36142446e06f50" kindref="member">EDDSA_sign()</ref></para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1ab13cbd97a011a0cbe686e876073c7c90" kindref="member">EDDSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a9285142cde705256b57ac9cf5c42c53c" kindref="member">EDDSA_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1adb4aaae6ac1e9646066b5ca05816cd94" kindref="member">EDDSA_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a41efa2929e395310213d703636e225ee" kindref="member">EDDSA_STATUS_HASH_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hash hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a475ed3864cdc27484ab94724835d8009" kindref="member">EDDSA_STATUS_PKA_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required PKA hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1ad0ecd7691b45558ea55c42333be94a11" kindref="member">EDDSA_STATUS_INVALID_PUBLIC_KEY_SIZE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The public key size is an invalid size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a99d3ba874ff24e916d6a14f3cf7404e1" kindref="member">EDDSA_STATUS_PUBLIC_KEY_NOT_ON_CURVE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The public key is not a valid point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a42d3d3bd421fa2e0687ac88c0fc11369" kindref="member">EDDSA_STATUS_INVALID_R_SIZE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The signature component R is an invalid size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a5386326ca227cec3c5bc3fe3051373ac" kindref="member">EDDSA_STATUS_INVALID_S_SIZE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The signature component S is an invalid size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1ac67fec2183b90aa7ec092da2f8ee6970" kindref="member">EDDSA_STATUS_S_LARGER_THAN_ORDER</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The signature component S is larger than the Edwards curve order. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a71a907ded5d3c6bfa2e2e47ccf308aba" kindref="member">EDDSA_STATUS_KEYSTORE_INVALID_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>KeyStore could not find a key with the given key ID#. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1adf314946fe684bcbc852465fa0ca6100" kindref="member">EDDSA_STATUS_KEYSTORE_GENERIC_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The KeyStore entered some error state when retrieving the public or private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a7c4042153907de966d21b764db897f10" kindref="member">EDDSA_STATUS_KEYSTORE_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The keystore module returned an error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="969" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1a7a4d9af13d672685671c39a94016b6ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t EDDSA_cancelOperation</definition>
        <argsstring>(EDDSA_Handle handle)</argsstring>
        <name>EDDSA_cancelOperation</name>
        <param>
          <type><ref refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" kindref="member">EDDSA_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Cancels an ongoing EDDSA operation. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000011"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function will be deprecated in the 3Q20 SDK release. The asynchronicity of the function can not be handled by all accelerators.</para></xrefdescription></xrefsect></para><para>Asynchronously cancels an EDDSA operation. Only available when using EDDSA_RETURN_BEHAVIOR_CALLBACK or EDDSA_RETURN_BEHAVIOR_BLOCKING. The operation will terminate as though an error occurred. The return status code of the operation will be EDDSA_STATUS_CANCELED.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the operation to cancel</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1ab13cbd97a011a0cbe686e876073c7c90" kindref="member">EDDSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_d_d_s_a_8h_1a9285142cde705256b57ac9cf5c42c53c" kindref="member">EDDSA_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was not canceled. There may be no operation to cancel. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="989" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_d_d_s_a_8h_1a2563186ba5d068a3bd7ed8cdf218d815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" kindref="member">EDDSA_Handle</ref></type>
        <definition>EDDSA_Handle EDDSA_construct</definition>
        <argsstring>(EDDSA_Config *config, const EDDSA_Params *params)</argsstring>
        <name>EDDSA_construct</name>
        <param>
          <type><ref refid="struct_e_d_d_s_a___config" kindref="compound">EDDSA_Config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const <ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Constructs a new EDDSA object. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref>, <ref refid="_e_d_d_s_a_8h_1a2563186ba5d068a3bd7ed8cdf218d815" kindref="member">EDDSA_construct()</ref> does not require the hwAttrs and object to be allocated in a <ref refid="struct_e_d_d_s_a___config" kindref="compound">EDDSA_Config</ref> array that is indexed into. Instead, the <ref refid="struct_e_d_d_s_a___config" kindref="compound">EDDSA_Config</ref>, hwAttrs, and object can be allocated at any location. This allows for relatively simple run-time allocation of temporary driver instances on the stack or the heap. The drawback is that this makes it more difficult to write device-agnostic code. If you use an ifdef with DeviceFamily, you can choose the correct object and hwAttrs to allocate. That compilation unit will be tied to the device it was compiled for at this point. To change devices, recompilation of the application with a different DeviceFamily setting is necessary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_e_d_d_s_a___config" kindref="compound">EDDSA_Config</ref> describing the location of the object and hwAttrs.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref> to configure the driver instance.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a <ref refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" kindref="member">EDDSA_Handle</ref> on success or NULL on failure.</para></simplesect>
<simplesect kind="pre"><para>The object struct <computeroutput>config</computeroutput> points to must be zeroed out prior to calling this function. Otherwise, unexpected behavior may ensue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/EDDSA.h" line="1015" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>TI Driver for Edwards Curve Digital Signature Algorithm. </para>    </briefdescription>
    <detaileddescription>
<para><anchor id="_e_d_d_s_a_8h_1ti_drivers_EDDSA_Overview"/><heading level="1">Overview</heading>
</para><para>The Edwards Curve Digital Signature Algorithm (EdDSA) is a message authentication scheme between two parties based on operation on Edwards curves over finite fields. This driver supports the PureEdDSA scheme for Edwards curve Ed25519 as is described in RFC 8032: <ulink url="https://tools.ietf.org/html/rfc8032">https://tools.ietf.org/html/rfc8032</ulink> . EdDSA variants, such as Ed25519ph or Ed25519ctx are currently not supported.</para><para>Signing a message with EdDSA proves to the recipient that the sender of the message is in possession of the private key corresponding to the transmitted public key used during verification. For most practical systems, this ensures message authentication and integrity.</para><para><heading level="1">Steps involved</heading>
</para><para><itemizedlist>
<listitem><para>Public Key Generation. The sender generates an EdDSA private-public keypair with private key k and public key A. For Ed25519, these are 32 bytes in little endian. The private key k comes from the DRBG. This private key is hashed, pruned (clear bits 0,1,2,255 and set bit 254), and used as a scalar to generate public key A.</para></listitem><listitem><para>Signature Generation. The sender hashes part of the private key k and message to be signed M. This result is used as a scalar to generate EdDSA signature component R which is a point on Ed25519. The signature component R, public key A, and message M are hashed to find a value that is used to generate the EdDSA signature component S which is a scalar. The signature for message M is {R,S}.</para></listitem><listitem><para>Signature Verification. The recipient receives signature {R,S}. The scalar S value is checked to be less than the order of the Edwards curve. The signature component R, public key A, and message M are hashed to find a scalar to recalculate R. The recipient accepts the signature if the received and calculated R match. Otherwise, they reject the signature.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>From here, we use EDDSA rather than EdDSA to be consistent with driver naming conventions.</para></simplesect>
<anchor id="_e_d_d_s_a_8h_1ti_drivers_EDDSA_Usage"/><heading level="1">Usage</heading>
</para><para><heading level="2">Before starting an EDDSA operation</heading>
</para><para>Before starting an EDDSA operation, the application must do the following:<itemizedlist>
<listitem><para>Call <ref refid="_e_d_d_s_a_8h_1ad38c3a487594c6b117e9d9367d4611a5" kindref="member">EDDSA_init()</ref> to initialize the driver</para></listitem><listitem><para>Call <ref refid="_e_d_d_s_a_8h_1ab056f386599ac453660e82838fd96d8f" kindref="member">EDDSA_Params_init()</ref> to initialize the <ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref> to default values.</para></listitem><listitem><para>Modify the <ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref> as desired</para></listitem><listitem><para>Call <ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open()</ref> to open an instance of the driver</para></listitem></itemizedlist>
</para><para><heading level="2">Generating an Ed25519 Public Key</heading>
</para><para>To generate an Ed25519 public key, the application must do the following:<itemizedlist>
<listitem><para>Initialize an <ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey</ref> struct by calling <ref refid="_e_d_d_s_a_8h_1a381b7b066e24af4d4cb8979471b887c1" kindref="member">EDDSA_OperationGeneratePublicKey_init()</ref>.</para></listitem><listitem><para>Initialize the public key <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. CryptoKeys are opaque data structures and representations of keying material and its storage. Depending on how the keying material is stored (RAM or flash, key store), the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> must be initialized differently. The EDDSA API can handle all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. However, not all device-specific implementations support all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. Devices without a key store will not support CryptoKeys with keying material stored in a key store for example. All devices support plaintext CryptoKeys.</para></listitem><listitem><para>Initialize the private key <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> and set its value as a random or selected 32-byte value</para></listitem><listitem><para>Call EDDSA_operationGeneratePublicKey(). The public key information will be written to the buffers provided in the function call. myPublicKey is the public key A generated from part of a hash of the private key. Ensure the return value is EDDSA_STATUS_SUCCESS.</para></listitem></itemizedlist>
</para><para><heading level="2">Signing a message</heading>
</para><para>To sign a message using Ed25519, the application must do the following:<itemizedlist>
<listitem><para>Initialize an <ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref> struct by calling <ref refid="_e_d_d_s_a_8h_1a6570e891d3918886ea3badcc8286cc94" kindref="member">EDDSA_OperationSign_init()</ref>.</para></listitem><listitem><para>Initialize and set the preHashedMessage buffer and corresponding preHashedMessageLength. Note that this function accepts any length. This is the message to sign.</para></listitem><listitem><para>Initialize the signature components R and S as 32 byte arrays.</para></listitem><listitem><para>Use the CryptoKeys myPrivateKey and myPublicKey generated from <ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey()</ref>.</para></listitem><listitem><para>Call <ref refid="_e_d_d_s_a_8h_1a883083d39b5bef163d36142446e06f50" kindref="member">EDDSA_sign()</ref>. The R and S vectors will be written to the buffers provided in the function call. Ensure the return value is EDDSA_STATUS_SUCCESS.</para></listitem></itemizedlist>
</para><para><heading level="2">Verifying a message</heading>
</para><para>After receiving the message, public key, R, and S, the application should do the following to verify the signature:<itemizedlist>
<listitem><para>Initialize an <ref refid="struct_e_d_d_s_a___operation_verify" kindref="compound">EDDSA_OperationVerify</ref> struct by calling <ref refid="_e_d_d_s_a_8h_1a79bbbc955774462fc15772968974e6a4" kindref="member">EDDSA_OperationVerify_init()</ref>.</para></listitem><listitem><para>Initialize and set the preHashedMessage buffer and corresponding preHashedMessageLength. Note that this function accepts any length. This is the message to verify.</para></listitem><listitem><para>Initialize a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> as public key with the keying material received from the other party.</para></listitem><listitem><para>Call <ref refid="_e_d_d_s_a_8h_1a8705e361f1522bd175c0d2f8c50f0c33" kindref="member">EDDSA_verify()</ref>. Ensure the return value is EDDSA_STATUS_SUCCESS. The driver will validate the received public key against the provided curve.</para></listitem></itemizedlist>
</para><para><heading level="2">General usage</heading>
</para><para>The API expects Edwards elliptic curves as defined in <ref refid="_e_c_c_params_8h" kindref="compound">ti/drivers/cryptoutils/ecc/ECCParams.h</ref>. Several commonly used curves are provided. Check the device-specific EDDSA documentation for curve type (short Weierstrass, Montgomery, Edwards) support for your device. EDDSA support for a curve type on a device does not imply curve-type support for other ECC schemes.</para><para><heading level="2">Parameter formatting</heading>
</para><para>Public keys are points on an elliptic curve. For EDDSA, these points are represented in their compressed form. This API uses points expressed in compressed affine coordinates by default and formatted in little endian. The point itself is stored as Y in little endian. If the X-coordinate is odd, the most significant bit of the public key is set (that is 0x80 || y). Otherwise, the public key is simply y and the even choice of x-coordinate is selected.</para><para>This API accepts and returns the keying material of public keys according to the following table:</para><para>| Curve Type | PublicKeying Material Array | Array Length | |-----------------<mdash/>|--------------------------<mdash/>|-----------------<mdash/>| | Ed25519 | [{0x80 or 0x00} || Y] | Curve Param Length |</para><para>The signature components R and S as well as the hash must be formatted in little endian format. For the hash, this simply means passing the digest of the hash function SHA-512 directly into <ref refid="_e_d_d_s_a_8h_1a883083d39b5bef163d36142446e06f50" kindref="member">EDDSA_sign()</ref> or <ref refid="_e_d_d_s_a_8h_1a8705e361f1522bd175c0d2f8c50f0c33" kindref="member">EDDSA_verify()</ref>. R and S will be interpreted as little-endian integers.</para><para><anchor id="_e_d_d_s_a_8h_1ti_drivers_EDDSA_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_e_d_d_s_a_8h_1ti_drivers_EDDSA_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>EdDSA<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/EDDSA.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>default<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">EDDSA_Handle<sp/>eddsaHandle;</highlight></codeline>
<codeline><highlight class="normal">EDDSA_Params<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EDDSA_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EDDSA_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.returnBehavior<sp/>=<sp/>EDDSA_RETURN_BEHAVIOR_BLOCKING;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eddsaHandle<sp/>=<sp/>EDDSA_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!eddsaHandle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>myPrivateKey;</highlight></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>myPublicKey;</highlight></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>theirPublicKey;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>myPrivateKey</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;myPrivateKey,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myPrivateKeyingMaterial,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(myPrivateKeyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>myPublicKey</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;myPublicKey,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myPublicKeyMaterial,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(myPublicKeyMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>operation</highlight></codeline>
<codeline><highlight class="normal">EDDSA_OperationGeneratePublicKey_init(&amp;operationGeneratePublicKey);</highlight></codeline>
<codeline><highlight class="normal">operationGeneratePublicKey.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_Ed25519;</highlight></codeline>
<codeline><highlight class="normal">operationGeneratePublicKey.myPrivateKey<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;myPrivateKey;</highlight></codeline>
<codeline><highlight class="normal">operationGeneratePublicKey.myPublicKey<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;myPublicKey;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">operationResult<sp/>=<sp/>EDDSA_generatePublicKey(eddsaHandle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;operationGeneratePublicKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(operationResult<sp/>!=<sp/>EDDSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>operation</highlight></codeline>
<codeline><highlight class="normal">EDDSA_OperationSign_init(&amp;operationSign);</highlight></codeline>
<codeline><highlight class="normal">operationSign.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_Ed25519;</highlight></codeline>
<codeline><highlight class="normal">operationSign.myPrivateKey<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;myPrivateKey;</highlight></codeline>
<codeline><highlight class="normal">operationSign.myPublicKey<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;myPublicKey;</highlight></codeline>
<codeline><highlight class="normal">operationSign.preHashedMessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>preHashedMessage;</highlight></codeline>
<codeline><highlight class="normal">operationSign.preHashedMessageLength<sp/><sp/>=<sp/>preHashedMessageLength;</highlight></codeline>
<codeline><highlight class="normal">operationSign.R<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sigR;</highlight></codeline>
<codeline><highlight class="normal">operationSign.S<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sigS;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Generate<sp/>the<sp/>signature</highlight></codeline>
<codeline><highlight class="normal">operationResult<sp/>=<sp/>EDDSA_sign(eddsaHandle,<sp/>&amp;operationSign);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(operationResult<sp/>!=<sp/>EDDSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>theirPublicKey</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;theirPublicKey,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theirPublicKeyingMaterial,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(theirPublicKeyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EDDSA_OperationVerify_init(&amp;operationVerify);</highlight></codeline>
<codeline><highlight class="normal">operationVerify.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_Ed25519;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.theirPublicKey<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;theirPublicKey;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.preHashedMessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>preHashedMessage;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.preHashedMessageLength<sp/>=<sp/>preHashedMessageLength;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.R<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sigR;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.S<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sigS;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Verify<sp/>the<sp/>EdDSA<sp/>signature</highlight></codeline>
<codeline><highlight class="normal">operationResult<sp/>=<sp/>EDDSA_verify(eddsaHandle,<sp/>&amp;operationVerify);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(operationResult<sp/>!=<sp/>EDDSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Close<sp/>the<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">EDDSA_close(eddsaHandle);</highlight></codeline>
</programlisting></para><para><anchor id="_e_d_d_s_a_8h_1ti_drivers_EDDSA_Examples"/># Examples # <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/EDDSA.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EDDSA_Handle<sp/>eddsaHandle;</highlight></codeline>
<codeline><highlight class="normal">EDDSA_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>theirPublicKey;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>operationResult;</highlight></codeline>
<codeline><highlight class="normal">EDDSA_OperationVerify<sp/>operationVerify;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>vector<sp/>is<sp/>test<sp/>vector<sp/>2<sp/>from<sp/>Section<sp/>7.1<sp/>of<sp/>RFC<sp/>8032.</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>publicKey[32]<sp/>=<sp/><sp/>{0x3D,0x40,0x17,0xC3,0xE8,0x43,0x89,0x5A,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x92,0xB7,0x0A,0xA7,0x4D,0x1B,0x7E,0xBC,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9C,0x98,0x2C,0xCF,0x2E,0xC4,0x96,0x8C,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xC0,0xCD,0x55,0xF1,0x2A,0xF4,0x66,0x0C};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>sigR[32]<sp/>=<sp/>{0x92,0xA0,0x09,0xA9,0xF0,0xD4,0xCA,0xB8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x72,0x0E,0x82,0x0B,0x5F,0x64,0x25,0x40,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xA2,0xB2,0x7B,0x54,0x16,0x50,0x3F,0x8F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xB3,0x76,0x22,0x23,0xEB,0xDB,0x69,0xDA};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>sigS[32]<sp/>=<sp/>{0x08,0x5A,0xC1,0xE4,0x3E,0x15,0x99,0x6E,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x45,0x8F,0x36,0x13,0xD0,0xF1,0x1D,0x8C,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x38,0x7B,0x2E,0xAE,0xB4,0x30,0x2A,0xEE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xB0,0x0D,0x29,0x16,0x12,0xBB,0x0C,0x00};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>preHashedMessage[1]<sp/>=<sp/>{0x72};</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>preHashedMessageLength<sp/>=<sp/>1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>EDDSA<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">EDDSA_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EDDSA_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.returnBehavior<sp/>=<sp/>EDDSA_RETURN_BEHAVIOR_BLOCKING;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eddsaHandle<sp/>=<sp/>EDDSA_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!eddsaHandle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>theirPublicKey</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;theirPublicKey,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>publicKey,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(publicKey));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EDDSA_OperationVerify_init(&amp;operationVerify);</highlight></codeline>
<codeline><highlight class="normal">operationVerify.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_Ed25519;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.theirPublicKey<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;theirPublicKey;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.preHashedMessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>preHashedMessage;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.preHashedMessageLength<sp/>=<sp/>preHashedMessageLength;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.R<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sigR;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.S<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sigS;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Verify<sp/>the<sp/>EdDSA<sp/>signature</highlight></codeline>
<codeline><highlight class="normal">operationResult<sp/>=<sp/>EDDSA_verify(eddsaHandle,<sp/>&amp;operationVerify);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(operationResult<sp/>!=<sp/>EDDSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="2">Using KeyStore for EDDSA Keys</heading>
</para><para><programlisting><codeline><highlight class="normal">//<sp/>This<sp/>example<sp/>shows<sp/>how<sp/>to<sp/>import<sp/>persistent<sp/>public<sp/>key<sp/>into<sp/>KeyStore<sp/>and</highlight></codeline>
<codeline><highlight class="normal">//<sp/>how<sp/>to<sp/>use<sp/>KeyStore<sp/>public<sp/>key<sp/>to<sp/>verify<sp/>EDDSA<sp/>signature</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_KeyFileId<sp/>publicKeyID;</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_KeyAttributes<sp/>pubKeyAttributes<sp/>=<sp/>KEYSTORE_PSA_KEY_ATTRIBUTES_INIT;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>status<sp/>=<sp/>KEYSTORE_PSA_STATUS_GENERIC_ERROR;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Public<sp/>Key</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_setKeyAlgorithm(&amp;pubKeyAttributes,<sp/>KEYSTORE_PSA_ALG_PURE_EDDSA);</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_setKeyUsageFlags(&amp;pubKeyAttributes,<sp/>KEYSTORE_PSA_KEY_USAGE_VERIFY_MESSAGE);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>In<sp/>this<sp/>example,<sp/>we<sp/>assume<sp/>public<sp/>key<sp/>to<sp/>be<sp/>stored<sp/>is<sp/>for<sp/>Curve25519</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_setKeyType(&amp;priKeyAttributes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEYSTORE_PSA_KEY_TYPE_ECC_KEY_PAIR_BASE<sp/>|<sp/>KEYSTORE_PSA_ECC_CURVE_CURVE25519);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>key<sp/>ID<sp/>for<sp/>persistent<sp/>keys</highlight></codeline>
<codeline><highlight class="normal">GET_KEY_ID(publicKeyID,<sp/>KEYSTORE_PSA_KEY_ID_USER_MIN);</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_setKeyLifetime(&amp;pubKeyAttributes,<sp/>KEYSTORE_PSA_KEY_LIFETIME_PERSISTENT);</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>KeyStore_PSA_importKey(&amp;pubKeyAttributes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>publicKey,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(publicKey),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;publicKeyID);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>!=<sp/>KEYSTORE_PSA_STATUS_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);<sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_initKey(&amp;theirPublicKey,<sp/>publicKeyID,<sp/>sizeof(theirPublicKeyingMaterial),<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>application<sp/>can<sp/>continue<sp/>to<sp/>use<sp/>the<sp/>theirPublicKey<sp/>as<sp/>they<sp/>would<sp/>use</highlight></codeline>
<codeline><highlight class="normal">//<sp/>plaintext<sp/>keys<sp/>with<sp/>EDDSA<sp/>driver</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020-2024,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_EDDSA__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_EDDSA__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_crypto_key_8h" kindref="compound">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_e_c_c_params_8h" kindref="compound">ti/drivers/cryptoutils/ecc/ECCParams.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="_e_d_d_s_a_8h_1afa4f2cbb094d15cedaee9241ca7aaa91" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_RESERVED<sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="_e_d_d_s_a_8h_1ab13cbd97a011a0cbe686e876073c7c90" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_SUCCESS<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="_e_d_d_s_a_8h_1a9285142cde705256b57ac9cf5c42c53c" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_ERROR<sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="_e_d_d_s_a_8h_1adb4aaae6ac1e9646066b5ca05816cd94" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_CANCELED<sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="_e_d_d_s_a_8h_1a41efa2929e395310213d703636e225ee" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_HASH_UNAVAILABLE<sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="_e_d_d_s_a_8h_1a475ed3864cdc27484ab94724835d8009" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_PKA_UNAVAILABLE<sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="_e_d_d_s_a_8h_1a5c7e76588d6df7b44a74739ef6effa40" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_POINT_AT_INFINITY<sp/>(-5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="_e_d_d_s_a_8h_1a5319a8694cc727685c4ee480be44c872" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_INVALID_PRIVATE_KEY_SIZE<sp/>(-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="_e_d_d_s_a_8h_1ad0ecd7691b45558ea55c42333be94a11" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_INVALID_PUBLIC_KEY_SIZE<sp/>(-7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="_e_d_d_s_a_8h_1a99d3ba874ff24e916d6a14f3cf7404e1" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_PUBLIC_KEY_NOT_ON_CURVE<sp/>(-8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="_e_d_d_s_a_8h_1a42d3d3bd421fa2e0687ac88c0fc11369" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_INVALID_R_SIZE<sp/>(-9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="_e_d_d_s_a_8h_1a5386326ca227cec3c5bc3fe3051373ac" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_INVALID_S_SIZE<sp/>(-10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="_e_d_d_s_a_8h_1ac67fec2183b90aa7ec092da2f8ee6970" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_S_LARGER_THAN_ORDER<sp/>(-11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="_e_d_d_s_a_8h_1a48d65f84b271dd45b5e7ed43c9ab658f" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_KEY_ID_PARAM_MISMATCH<sp/>(-12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="_e_d_d_s_a_8h_1a71a907ded5d3c6bfa2e2e47ccf308aba" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_KEYSTORE_INVALID_ID<sp/>(-13)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="_e_d_d_s_a_8h_1adf314946fe684bcbc852465fa0ca6100" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_KEYSTORE_GENERIC_FAILURE<sp/>(-14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="_e_d_d_s_a_8h_1aa40ddf06e62d96f44c2d2135932ada61" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_SHA2_HASH_FAILURE<sp/>(-15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="_e_d_d_s_a_8h_1a7c4042153907de966d21b764db897f10" refkind="member"><highlight class="preprocessor">#define<sp/>EDDSA_STATUS_KEYSTORE_ERROR<sp/>(-16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="struct_e_d_d_s_a___config" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540" refid="struct_e_d_d_s_a___config_1aeb413a711646d7898af5c22c6727211f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_e_d_d_s_a___config_1aeb413a711646d7898af5c22c6727211f" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="struct_e_d_d_s_a___config_1a8e118b89dbc6a3209dc31288c91beaa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_e_d_d_s_a___config_1a8e118b89dbc6a3209dc31288c91beaa6" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}<sp/><ref refid="struct_e_d_d_s_a___config" kindref="compound">EDDSA_Config</ref>;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_e_d_d_s_a___config" kindref="compound">EDDSA_Config</ref><sp/>*<ref refid="_e_d_d_s_a_8h_1a060e17f632b2e3f7fed96f4ba12fe48e" kindref="member">EDDSA_Handle</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575" refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fac8914fb0b0024a8add72d78d8d4161a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fac8914fb0b0024a8add72d78d8d4161a5" kindref="member">EDDSA_RETURN_BEHAVIOR_CALLBACK</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="582" refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fa5b29034b4fd68970e6060dedecd33398" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fa5b29034b4fd68970e6060dedecd33398" kindref="member">EDDSA_RETURN_BEHAVIOR_BLOCKING</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="588" refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fa574c6aa8bf233db44b1bc0ecf6b47624" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14fa574c6aa8bf233db44b1bc0ecf6b47624" kindref="member">EDDSA_RETURN_BEHAVIOR_POLLING</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}<sp/><ref refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14f" kindref="member">EDDSA_ReturnBehavior</ref>;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="struct_e_d_d_s_a___operation_generate_public_key" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602" refid="struct_e_d_d_s_a___operation_generate_public_key_1a77944a798bfa7e537de1a6afa0e28d33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_c_c_params___curve_params" kindref="compound">ECCParams_CurveParams</ref><sp/>*<ref refid="struct_e_d_d_s_a___operation_generate_public_key_1a77944a798bfa7e537de1a6afa0e28d33" kindref="member">curve</ref>;</highlight></codeline>
<codeline lineno="605" refid="struct_e_d_d_s_a___operation_generate_public_key_1a4ccef9ec43e7defea0df0a27e4253eb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*<ref refid="struct_e_d_d_s_a___operation_generate_public_key_1a4ccef9ec43e7defea0df0a27e4253eb2" kindref="member">myPrivateKey</ref>;</highlight></codeline>
<codeline lineno="610" refid="struct_e_d_d_s_a___operation_generate_public_key_1aa129dd994bddd37a2251b4dfb5000557" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*<ref refid="struct_e_d_d_s_a___operation_generate_public_key_1aa129dd994bddd37a2251b4dfb5000557" kindref="member">myPublicKey</ref>;</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}<sp/><ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey</ref>;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="struct_e_d_d_s_a___operation_sign" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623" refid="struct_e_d_d_s_a___operation_sign_1a010d0b79b8620b69f1453efe9d059852" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_c_c_params___curve_params" kindref="compound">ECCParams_CurveParams</ref><sp/>*<ref refid="struct_e_d_d_s_a___operation_sign_1a010d0b79b8620b69f1453efe9d059852" kindref="member">curve</ref>;</highlight></codeline>
<codeline lineno="626" refid="struct_e_d_d_s_a___operation_sign_1a7ea36ad4a7eb096d7dac66949df3d378" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*<ref refid="struct_e_d_d_s_a___operation_sign_1a7ea36ad4a7eb096d7dac66949df3d378" kindref="member">myPrivateKey</ref>;</highlight></codeline>
<codeline lineno="631" refid="struct_e_d_d_s_a___operation_sign_1a40c50f18bd05d0398a73adb4435c5555" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*<ref refid="struct_e_d_d_s_a___operation_sign_1a40c50f18bd05d0398a73adb4435c5555" kindref="member">myPublicKey</ref>;</highlight></codeline>
<codeline lineno="636" refid="struct_e_d_d_s_a___operation_sign_1a83a4e1860629e7c98126da108c8f59e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="struct_e_d_d_s_a___operation_sign_1a83a4e1860629e7c98126da108c8f59e9" kindref="member">preHashedMessage</ref>;</highlight></codeline>
<codeline lineno="641" refid="struct_e_d_d_s_a___operation_sign_1a2e6990758fe5642ec02c131731bb5191" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_e_d_d_s_a___operation_sign_1a2e6990758fe5642ec02c131731bb5191" kindref="member">preHashedMessageLength</ref>;</highlight></codeline>
<codeline lineno="644" refid="struct_e_d_d_s_a___operation_sign_1a8f20ac39ba343a496e00b852bdd42886" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_e_d_d_s_a___operation_sign_1a8f20ac39ba343a496e00b852bdd42886" kindref="member">R</ref>;</highlight></codeline>
<codeline lineno="649" refid="struct_e_d_d_s_a___operation_sign_1a9128253e99c933c8a432006f5902447f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_e_d_d_s_a___operation_sign_1a9128253e99c933c8a432006f5902447f" kindref="member">S</ref>;</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}<sp/><ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref>;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="660" refid="struct_e_d_d_s_a___operation_verify" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662" refid="struct_e_d_d_s_a___operation_verify_1a5f43e996f898e3ba50591c237435b500" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_c_c_params___curve_params" kindref="compound">ECCParams_CurveParams</ref><sp/>*<ref refid="struct_e_d_d_s_a___operation_verify_1a5f43e996f898e3ba50591c237435b500" kindref="member">curve</ref>;</highlight></codeline>
<codeline lineno="665" refid="struct_e_d_d_s_a___operation_verify_1a062569fa7cd444037c052604a0e854ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*<ref refid="struct_e_d_d_s_a___operation_verify_1a062569fa7cd444037c052604a0e854ef" kindref="member">theirPublicKey</ref>;</highlight></codeline>
<codeline lineno="671" refid="struct_e_d_d_s_a___operation_verify_1ab001844ea72319a8bfe2916afb4734d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="struct_e_d_d_s_a___operation_verify_1ab001844ea72319a8bfe2916afb4734d3" kindref="member">preHashedMessage</ref>;</highlight></codeline>
<codeline lineno="676" refid="struct_e_d_d_s_a___operation_verify_1a1d152c7a33e59e20bdb0566fd78efe7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_e_d_d_s_a___operation_verify_1a1d152c7a33e59e20bdb0566fd78efe7a" kindref="member">preHashedMessageLength</ref>;</highlight></codeline>
<codeline lineno="679" refid="struct_e_d_d_s_a___operation_verify_1a1427f38307769d79b63f11604fd86360" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="struct_e_d_d_s_a___operation_verify_1a1427f38307769d79b63f11604fd86360" kindref="member">R</ref>;</highlight></codeline>
<codeline lineno="684" refid="struct_e_d_d_s_a___operation_verify_1a25ae3c483413bec9ed83476c7148adc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="struct_e_d_d_s_a___operation_verify_1a25ae3c483413bec9ed83476c7148adc9" kindref="member">S</ref>;</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}<sp/><ref refid="struct_e_d_d_s_a___operation_verify" kindref="compound">EDDSA_OperationVerify</ref>;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="union_e_d_d_s_a___operation" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697" refid="union_e_d_d_s_a___operation_1aaacd0660b4f5b4017168cfe814f11dd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey</ref><sp/>*<ref refid="union_e_d_d_s_a___operation_1aaacd0660b4f5b4017168cfe814f11dd1" kindref="member">generatePublicKey</ref>;</highlight></codeline>
<codeline lineno="699" refid="union_e_d_d_s_a___operation_1af1e6b26b4e080062c4a1af2338a574f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref><sp/>*<ref refid="union_e_d_d_s_a___operation_1af1e6b26b4e080062c4a1af2338a574f5" kindref="member">sign</ref>;</highlight></codeline>
<codeline lineno="701" refid="union_e_d_d_s_a___operation_1aa4288eb64adcdb4ec63a79e8f0f839d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_e_d_d_s_a___operation_verify" kindref="compound">EDDSA_OperationVerify</ref><sp/>*<ref refid="union_e_d_d_s_a___operation_1aa4288eb64adcdb4ec63a79e8f0f839d7" kindref="member">verify</ref>;</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}<sp/><ref refid="union_e_d_d_s_a___operation" kindref="compound">EDDSA_Operation</ref>;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fb" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709" refid="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fba6705d1a5bda1b194c364e627c1bff3e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fba6705d1a5bda1b194c364e627c1bff3e1" kindref="member">EDDSA_OPERATION_TYPE_GENERATE_PUBLIC_KEY</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="710" refid="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fba4c6e4c13833ac07401d36e084ed9a27b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fba4c6e4c13833ac07401d36e084ed9a27b" kindref="member">EDDSA_OPERATION_TYPE_SIGN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="711" refid="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fba0a7e89ff24a66b8d5d1811d0fbacacff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fba0a7e89ff24a66b8d5d1811d0fbacacff" kindref="member">EDDSA_OPERATION_TYPE_VERIFY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}<sp/><ref refid="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fb" kindref="member">EDDSA_OperationType</ref>;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="733" refid="_e_d_d_s_a_8h_1a6a093ae7e304be315a31a45095c4662b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_e_d_d_s_a_8h_1a6a093ae7e304be315a31a45095c4662b" kindref="member">EDDSA_CallbackFxn</ref>)(EDDSA_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnStatus,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_e_d_d_s_a___operation" kindref="compound">EDDSA_Operation</ref><sp/>operation,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_e_d_d_s_a_8h_1af6e60847c2c0eaf13d3c854838bca0fb" kindref="member">EDDSA_OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="struct_e_d_d_s_a___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748" refid="struct_e_d_d_s_a___params_1ace1e30d1e5169369a9bab62665b3da59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_d_d_s_a_8h_1a4dd8a220f65c0bcee35b3aa81416e14f" kindref="member">EDDSA_ReturnBehavior</ref><sp/><ref refid="struct_e_d_d_s_a___params_1ace1e30d1e5169369a9bab62665b3da59" kindref="member">returnBehavior</ref>;</highlight></codeline>
<codeline lineno="751" refid="struct_e_d_d_s_a___params_1a0ad2ab7678665c04d727bbf47a65e959" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_d_d_s_a_8h_1a6a093ae7e304be315a31a45095c4662b" kindref="member">EDDSA_CallbackFxn</ref><sp/><ref refid="struct_e_d_d_s_a___params_1a0ad2ab7678665c04d727bbf47a65e959" kindref="member">callbackFxn</ref>;</highlight></codeline>
<codeline lineno="754" refid="struct_e_d_d_s_a___params_1a0f2b5f985120abea945175f59c4c19d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_e_d_d_s_a___params_1a0f2b5f985120abea945175f59c4c19d5" kindref="member">timeout</ref>;</highlight></codeline>
<codeline lineno="757" refid="struct_e_d_d_s_a___params_1a069856b2ad1333cd233817c9d245bd57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_e_d_d_s_a___params_1a069856b2ad1333cd233817c9d245bd57" kindref="member">custom</ref>;</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}<sp/><ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref>;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_d_d_s_a_8h_1ad38c3a487594c6b117e9d9367d4611a5" kindref="member">EDDSA_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_d_d_s_a_8h_1a173dac2072e5f83bbd1123a920decbd7" kindref="member">EDDSA_close</ref>(EDDSA_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">EDDSA_Handle<sp/><ref refid="_e_d_d_s_a_8h_1ab87c783c9f1673da9502705fa13b76c7" kindref="member">EDDSA_open</ref>(uint_least8_t<sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_d_d_s_a_8h_1ab056f386599ac453660e82838fd96d8f" kindref="member">EDDSA_Params_init</ref>(<ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_d_d_s_a_8h_1a381b7b066e24af4d4cb8979471b887c1" kindref="member">EDDSA_OperationGeneratePublicKey_init</ref>(<ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_d_d_s_a_8h_1a6570e891d3918886ea3badcc8286cc94" kindref="member">EDDSA_OperationSign_init</ref>(<ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_d_d_s_a_8h_1a79bbbc955774462fc15772968974e6a4" kindref="member">EDDSA_OperationVerify_init</ref>(<ref refid="struct_e_d_d_s_a___operation_verify" kindref="compound">EDDSA_OperationVerify</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal">int_fast16_t<sp/><ref refid="_e_d_d_s_a_8h_1a7a5d4d117f414187b95eb15eebb3d93f" kindref="member">EDDSA_generatePublicKey</ref>(EDDSA_Handle<sp/>handle,<sp/><ref refid="struct_e_d_d_s_a___operation_generate_public_key" kindref="compound">EDDSA_OperationGeneratePublicKey</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">int_fast16_t<sp/><ref refid="_e_d_d_s_a_8h_1a883083d39b5bef163d36142446e06f50" kindref="member">EDDSA_sign</ref>(EDDSA_Handle<sp/>handle,<sp/><ref refid="struct_e_d_d_s_a___operation_sign" kindref="compound">EDDSA_OperationSign</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal">int_fast16_t<sp/><ref refid="_e_d_d_s_a_8h_1a8705e361f1522bd175c0d2f8c50f0c33" kindref="member">EDDSA_verify</ref>(EDDSA_Handle<sp/>handle,<sp/><ref refid="struct_e_d_d_s_a___operation_verify" kindref="compound">EDDSA_OperationVerify</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">int_fast16_t<sp/><ref refid="_e_d_d_s_a_8h_1a7a4d9af13d672685671c39a94016b6ca" kindref="member">EDDSA_cancelOperation</ref>(EDDSA_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal">EDDSA_Handle<sp/><ref refid="_e_d_d_s_a_8h_1a2563186ba5d068a3bd7ed8cdf218d815" kindref="member">EDDSA_construct</ref>(<ref refid="struct_e_d_d_s_a___config" kindref="compound">EDDSA_Config</ref><sp/>*config,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_d_d_s_a___params" kindref="compound">EDDSA_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_EDDSA__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/EDDSA.h"/>
  </compounddef>
</doxygen>
