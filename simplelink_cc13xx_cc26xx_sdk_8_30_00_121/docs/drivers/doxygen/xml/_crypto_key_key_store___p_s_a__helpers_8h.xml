<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_crypto_key_key_store___p_s_a__helpers_8h" kind="file" language="C++">
    <compoundname>CryptoKeyKeyStore_PSA_helpers.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_crypto_key_key_store___p_s_a_8h" local="no">ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h</includes>
    <includes refid="_semaphore_p_8h" local="no">ti/drivers/dpl/SemaphoreP.h</includes>
    <includes local="no">ti/devices/DeviceFamily.h</includes>
    <includes local="no">third_party/mbedtls/library/psa_crypto_core.h</includes>
    <includes local="no">third_party/mbedtls/library/psa_crypto_slot_management.h</includes>
    <includes local="no">third_party/mbedtls/library/psa_crypto_storage.h</includes>
    <incdepgraph>
      <node id="702">
        <label>stdbool.h</label>
      </node>
      <node id="696">
        <label>ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h</label>
        <link refid="_crypto_key_key_store___p_s_a_8h"/>
        <childnode refid="697" relation="include">
        </childnode>
        <childnode refid="698" relation="include">
        </childnode>
        <childnode refid="699" relation="include">
        </childnode>
        <childnode refid="700" relation="include">
        </childnode>
      </node>
      <node id="701">
        <label>ti/drivers/dpl/SemaphoreP.h</label>
        <link refid="_semaphore_p_8h"/>
        <childnode refid="695" relation="include">
        </childnode>
        <childnode refid="702" relation="include">
        </childnode>
        <childnode refid="694" relation="include">
        </childnode>
      </node>
      <node id="698">
        <label>third_party/hsmddk/include/Integration/Adapter_PSA/incl/psa/crypto.h</label>
      </node>
      <node id="703">
        <label>third_party/mbedtls/library/psa_crypto_core.h</label>
      </node>
      <node id="695">
        <label>stdint.h</label>
      </node>
      <node id="693">
        <label>CryptoKeyKeyStore_PSA_helpers.h</label>
        <link refid="_crypto_key_key_store___p_s_a__helpers_8h"/>
        <childnode refid="694" relation="include">
        </childnode>
        <childnode refid="695" relation="include">
        </childnode>
        <childnode refid="696" relation="include">
        </childnode>
        <childnode refid="701" relation="include">
        </childnode>
        <childnode refid="697" relation="include">
        </childnode>
        <childnode refid="703" relation="include">
        </childnode>
        <childnode refid="704" relation="include">
        </childnode>
        <childnode refid="705" relation="include">
        </childnode>
      </node>
      <node id="694">
        <label>stddef.h</label>
      </node>
      <node id="700">
        <label>third_party/hsmddk/include/Integration/Adapter_PSA/Adapter_mbedTLS/incl/private_access.h</label>
      </node>
      <node id="697">
        <label>ti/devices/DeviceFamily.h</label>
      </node>
      <node id="699">
        <label>third_party/hsmddk/include/Integration/Adapter_PSA/incl/psa/crypto_extra.h</label>
      </node>
      <node id="705">
        <label>third_party/mbedtls/library/psa_crypto_storage.h</label>
      </node>
      <node id="704">
        <label>third_party/mbedtls/library/psa_crypto_slot_management.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_key_store__access_semaphore_object" prot="public">KeyStore_accessSemaphoreObject</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a__helpers_8h_1a703ce867305e26993e25dd5259eb2ef0" prot="public" static="no">
        <name>FLETCHER_CHECKSUM_ALGORITHM</name>
        <initializer>32 /* FLETCHER-32 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h" line="85" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_crypto_key_key_store___p_s_a__helpers_8h_1ac14bc41f0d152c568e25d96ebffb9189" prot="public" static="no" mutable="no">
        <type><ref refid="struct_key_store__access_semaphore_object" kindref="compound">KeyStore_accessSemaphoreObject</ref></type>
        <definition>KeyStore_accessSemaphoreObject KeyStore_semaphoreObject</definition>
        <argsstring></argsstring>
        <name>KeyStore_semaphoreObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h" line="83" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a__helpers_8h_1a68fb4c1a046b1965377bacd34822a2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_getKey</definition>
        <argsstring>(KeyStore_PSA_KeyFileId key, uint8_t *data, size_t dataSize, size_t *dataLength, KeyStore_PSA_Algorithm alg, KeyStore_PSA_KeyUsage usage)</argsstring>
        <name>KeyStore_PSA_getKey</name>
        <param>
          <type><ref refid="group__attributes_1ga54486a82cbcbaf04f23408c4181d39ec" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dataLength</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref></type>
          <declname>alg</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref></type>
          <declname>usage</declname>
        </param>
        <briefdescription>
<para>Get the plaintext key in binary format. </para>        </briefdescription>
        <detaileddescription>
<para>This function can only be called on secure side of SPM. It is used by SL crypto drivers to obtain plaintext keys, using keyIDs provided by non-secure application, which will be loaded onto crypto engine</para><para>Implementations must reject an attempt to import a certificate of size 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key ID for the key in keystore. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the buffer contains the plaintext key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes. It must be greater than or equal to the plaintext key material </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the returned key material in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alg</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm the key will be used for, it should match the orignal <computeroutput>alg</computeroutput> used to import the key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">usage</parametername>
</parameternamelist>
<parameterdescription>
<para>Key usage, it must match the original <computeroutput>usage</computeroutput> used to import the key.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. If the key ID exists, matches the <computeroutput>alg</computeroutput> and <computeroutput>usage</computeroutput> , and the <computeroutput>dataSize</computeroutput> is sufficient the key is returned in <computeroutput>data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aac85cef511781f98b0071828def22430" kindref="member">KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If the KeyStore lock cannot be acquired, the KeyStore module is in use elsewhere. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key identifier does not exist. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a4a8ec2db48e0c5f8ac76b2ee910685b3" kindref="member">KEYSTORE_PSA_STATUS_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key does not have matching <computeroutput>alg</computeroutput> and <computeroutput>usage</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a__helpers_8h_1a9d4d56e097fdd774a23b370648acf22c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KeyStore_acquireLock</definition>
        <argsstring>(void)</argsstring>
        <name>KeyStore_acquireLock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Attempt to acquire lock to access KeyStore. This function is used to synchronize drivers and the application when both are attempting to use KeyStore. For example, if a driver is retrieving key material from a key slot to perform an operation, it must be protected from the application making a call to psa_destroy_key() on that same slot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully acquired lock </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed to acquire lock </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a__helpers_8h_1ada14d5921f27df55a935116aaf70abea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KeyStore_releaseLock</definition>
        <argsstring>(void)</argsstring>
        <name>KeyStore_releaseLock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Release lock to access KeyStore. </para>        </briefdescription>
        <detaileddescription>
<para>Once done accessing KeyStore, either the CryptoKeyKeyStore_PSA_helpers APIs or the PSA Crypto APIs should release this lock so that other entities can use KeyStore. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a__helpers_8h_1af27ca852371c3f634b81b4ef198e1bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_retrieveFromKeyStore</definition>
        <argsstring>(const CryptoKey *key, uint8_t *keyBuffer, size_t keyBufferSize, uint32_t *keyAssetID, KeyStore_PSA_Algorithm targetAlg, KeyStore_PSA_KeyUsage targetUsage)</argsstring>
        <name>KeyStore_PSA_retrieveFromKeyStore</name>
        <param>
          <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>keyBuffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>keyBufferSize</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>keyAssetID</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref></type>
          <declname>targetAlg</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref></type>
          <declname>targetUsage</declname>
        </param>
        <briefdescription>
<para>Retrieve the key in either plaintext format or as an Asset ID. </para>        </briefdescription>
        <detaileddescription>
<para>This function handles the logic of retrieving a key from CC27XX KeyStore, which depends both on the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> encoding and the key lifetime/location. If the key location is <ref refid="group__key__lifetimes_1gabbc4cc76f71653de4c35e5deb31e0c93" kindref="member">KEYSTORE_PSA_KEY_LOCATION_HSM_ASSET_STORE</ref>, then the key will be returned via asset ID. If the requested key was not already in the asset store upon request, it will be loaded before the asset ID is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> object containing the encoding and keyID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">keyBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer in which to place the key if it is retrievable in plaintext </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">keyBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the provided buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">keyAssetID</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to keyAssetID output, if the key location is HSM_ASSET_STORE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">targetAlg</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired algorithm to use the key for. Before retrieving the key material, it must be verified that it is allowed to be used for a given algorithm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">targetUsage</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired usage of the resulting key - only necessary for symmetric keys that will be returned as HSM assets. Must be one of <ref refid="group__key__policies_1gaa67d52dc99c8cb9f35522abeb2fa3a04" kindref="member">KEYSTORE_PSA_KEY_USAGE_ENCRYPT</ref> or <ref refid="group__key__policies_1ga0e2ed070c15e64eb148d40e85dcb105b" kindref="member">KEYSTORE_PSA_KEY_USAGE_DECRYPT</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a212b767d34258f884e4fd794ae51e132" kindref="member">KEYSTORE_PSA_STATUS_GENERIC_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key length retrieved from KeyStore doesn&apos;t match the expected length. Or, other generic error. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aaf6c1ae5694a2fe490e2bda815a42a87" kindref="member">KEYSTORE_PSA_STATUS_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> encoding has an unexpected/unsupported value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aac85cef511781f98b0071828def22430" kindref="member">KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key identifier does not exist. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a4a8ec2db48e0c5f8ac76b2ee910685b3" kindref="member">KEYSTORE_PSA_STATUS_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key does not have matching <computeroutput>alg</computeroutput> and <computeroutput>usage</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a__helpers_8h_1ac082ce858f7a5ad74515085bb1b34b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_getKeyAssetId</definition>
        <argsstring>(KeyStore_PSA_KeyFileId key, uint32_t *const pAssetId, KeyStore_PSA_Algorithm targetAlg, KeyStore_PSA_KeyUsage targetUsage)</argsstring>
        <name>KeyStore_PSA_getKeyAssetId</name>
        <param>
          <type><ref refid="group__attributes_1ga54486a82cbcbaf04f23408c4181d39ec" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>pAssetId</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref></type>
          <declname>targetAlg</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref></type>
          <declname>targetUsage</declname>
        </param>
        <briefdescription>
<para>Get the asset ID for a given key ID. </para>        </briefdescription>
        <detaileddescription>
<para>This function can only be called on secure side of SPM. It is used by SL crypto drivers to obtain assetIDs to refer to keys in the HSM, using keyIDs provided by non-secure application. The asset ID can then be used directly with the HSM for a crypto operation.</para><para>If the key is not already stored in the HSM&apos;s Asset Store, this function will perform that allocation and load before returning the new asset ID.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key ID for the key in keystore. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pAssetId</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the asset ID for the corresponding key ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">targetAlg</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired algorithm to use the key for. Before retrieving the key asset, it must be verified that it is allowed to be used for a given algorithm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">targetUsage</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired usage of the resulting asset - only used for symmetric keys. Must be one of <ref refid="group__key__policies_1gaa67d52dc99c8cb9f35522abeb2fa3a04" kindref="member">KEYSTORE_PSA_KEY_USAGE_ENCRYPT</ref> or <ref refid="group__key__policies_1ga0e2ed070c15e64eb148d40e85dcb105b" kindref="member">KEYSTORE_PSA_KEY_USAGE_DECRYPT</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. If the key ID exists, the asset ID is returned in <computeroutput>pAssetId</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aac85cef511781f98b0071828def22430" kindref="member">KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If the KeyStore lock cannot be acquired, the KeyStore module is in use elsewhere. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key identifier does not exist. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a4a8ec2db48e0c5f8ac76b2ee910685b3" kindref="member">KEYSTORE_PSA_STATUS_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The provided pAssetId is NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_init</definition>
        <argsstring>(void)</argsstring>
        <name>KeyStore_PSA_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize the Key Store. </para>        </briefdescription>
        <detaileddescription>
<para>Applications must call this function before calling any other function in this module. This function will initialize key slot memory and load the key IDs of any preprovisioned keys.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a212b767d34258f884e4fd794ae51e132" kindref="member">KEYSTORE_PSA_STATUS_GENERIC_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>tfm_its_init() failed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a371295236e0ea6ba6f22dd4431744daf" kindref="member">KEYSTORE_PSA_STATUS_DOES_NOT_EXIST</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>KeyStore_PSA_getPreProvisionedKeyIDs() failed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h" line="281" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CryptoKeyKeyStore driver header. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_crypto_key_key_store___p_s_a__helpers_8h_1ti_drivers_cryptoutils_cryptokey_CryptoKeyKeyStore_PSA_helpers_Overview"/><heading level="1">Overview</heading>
</para><para>The CryptoKeyKeyStore driver provides API to initialize keys and get plaintext keys from KeyStore. This file provides definitions that are only available to the the secure side, in both TF-M disabled and TF-M enabled environments. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022-2024,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CryptoKeyKeyStore_PSA_helpers.h</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>CryptoKeyKeyStore<sp/>driver<sp/>header</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_cryptoutils_cryptokey_CryptoKeyKeyStore_PSA_helpers_Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>CryptoKeyKeyStore<sp/>driver<sp/>provides<sp/>API<sp/>to<sp/>initialize<sp/>keys<sp/>and<sp/>get<sp/>plaintext</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>keys<sp/>from<sp/>KeyStore.<sp/>This<sp/>file<sp/>provides<sp/>definitions<sp/>that<sp/>are<sp/>only<sp/>available<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>secure<sp/>side,<sp/>in<sp/>both<sp/>TF-M<sp/>disabled<sp/>and<sp/>TF-M<sp/>enabled<sp/>environments.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*******************************************************************************</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_cryptoutils_cryptokey_CryptoKeyKeyStore_PSA_helpers__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_cryptoutils_cryptokey_CryptoKeyKeyStore_PSA_helpers__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_crypto_key_key_store___p_s_a_8h" kindref="compound">ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_semaphore_p_8h" kindref="compound">ti/drivers/dpl/SemaphoreP.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/devices/DeviceFamily.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(DeviceFamily_PARENT<sp/>==<sp/>DeviceFamily_PARENT_CC13X4_CC26X3_CC26X4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;third_party/mbedtls/library/psa_crypto_core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;third_party/mbedtls/library/psa_crypto_slot_management.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;third_party/mbedtls/library/psa_crypto_storage.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(DeviceFamily_PARENT<sp/>==<sp/>DeviceFamily_PARENT_CC27XX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="_crypto_key_8h" kindref="compound">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>&quot;Unsupported<sp/>DeviceFamily_Parent<sp/>for<sp/>CryptoKeyKeyStore_PSA_helpers&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="struct_key_store__access_semaphore_object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78" refid="struct_key_store__access_semaphore_object_1ae6b581541f9a7f6676c11d552b8954b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="union_semaphore_p___struct" kindref="compound">SemaphoreP_Struct</ref><sp/><ref refid="struct_key_store__access_semaphore_object_1ae6b581541f9a7f6676c11d552b8954b7" kindref="member">KeyStore_accessSemaphore</ref>;</highlight></codeline>
<codeline lineno="79" refid="struct_key_store__access_semaphore_object_1afd16ee6f3850d79b24ea9a4652022f80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_key_store__access_semaphore_object_1afd16ee6f3850d79b24ea9a4652022f80" kindref="member">isInitialized</ref>;</highlight></codeline>
<codeline lineno="80" refid="struct_key_store__access_semaphore_object_1ab61c6c47778479fb6a495d01ffbbf4b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_key_store__access_semaphore_object_1ab61c6c47778479fb6a495d01ffbbf4b3" kindref="member">isAcquired</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/><ref refid="struct_key_store__access_semaphore_object" kindref="compound">KeyStore_accessSemaphoreObject</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_key_store__access_semaphore_object" kindref="compound">KeyStore_accessSemaphoreObject</ref><sp/><ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ac14bc41f0d152c568e25d96ebffb9189" kindref="member">KeyStore_semaphoreObject</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="_crypto_key_key_store___p_s_a__helpers_8h_1a703ce867305e26993e25dd5259eb2ef0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLETCHER_CHECKSUM_ALGORITHM<sp/>32<sp/></highlight><highlight class="comment">/*<sp/>FLETCHER-32<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1a68fb4c1a046b1965377bacd34822a2fe" kindref="member">KeyStore_PSA_getKey</ref>(<ref refid="group__attributes_1ga54486a82cbcbaf04f23408c4181d39ec" kindref="member">KeyStore_PSA_KeyFileId</ref><sp/>key,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*data,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataSize,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*dataLength,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref><sp/>alg,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref><sp/>usage);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(DeviceFamily_PARENT<sp/>==<sp/>DeviceFamily_PARENT_CC27XX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1a9d4d56e097fdd774a23b370648acf22c" kindref="member">KeyStore_acquireLock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ada14d5921f27df55a935116aaf70abea" kindref="member">KeyStore_releaseLock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1af27ca852371c3f634b81b4ef198e1bf7" kindref="member">KeyStore_PSA_retrieveFromKeyStore</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*key,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*keyBuffer,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>keyBufferSize,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*keyAssetID,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref><sp/>targetAlg,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref><sp/>targetUsage);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ac082ce858f7a5ad74515085bb1b34b4e" kindref="member">KeyStore_PSA_getKeyAssetId</ref>(<ref refid="group__attributes_1ga54486a82cbcbaf04f23408c4181d39ec" kindref="member">KeyStore_PSA_KeyFileId</ref><sp/>key,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pAssetId,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref><sp/>targetAlg,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref><sp/>targetUsage);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">int_fast16_t<sp/>KeyStore_PSA_assetPostProcessing(<ref refid="group__attributes_1ga54486a82cbcbaf04f23408c4181d39ec" kindref="member">KeyStore_PSA_KeyFileId</ref><sp/>key);</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_cryptoutils_cryptokey_CryptoKeyKeyStore_PSA_helpers__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h"/>
  </compounddef>
</doxygen>
